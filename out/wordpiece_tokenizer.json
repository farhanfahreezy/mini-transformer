{
  "version": "1.0",
  "truncation": null,
  "padding": null,
  "added_tokens": [
    {
      "id": 0,
      "content": "[PAD]",
      "single_word": false,
      "lstrip": false,
      "rstrip": false,
      "normalized": false,
      "special": true
    },
    {
      "id": 1,
      "content": "[UNK]",
      "single_word": false,
      "lstrip": false,
      "rstrip": false,
      "normalized": false,
      "special": true
    },
    {
      "id": 2,
      "content": "[CLS]",
      "single_word": false,
      "lstrip": false,
      "rstrip": false,
      "normalized": false,
      "special": true
    },
    {
      "id": 3,
      "content": "[SEP]",
      "single_word": false,
      "lstrip": false,
      "rstrip": false,
      "normalized": false,
      "special": true
    },
    {
      "id": 4,
      "content": "[MASK]",
      "single_word": false,
      "lstrip": false,
      "rstrip": false,
      "normalized": false,
      "special": true
    }
  ],
  "normalizer": null,
  "pre_tokenizer": null,
  "post_processor": null,
  "decoder": null,
  "model": {
    "type": "WordPiece",
    "unk_token": "[UNK]",
    "continuing_subword_prefix": "##",
    "max_input_chars_per_word": 100,
    "vocab": {
      "[PAD]": 0,
      "[UNK]": 1,
      "[CLS]": 2,
      "[SEP]": 3,
      "[MASK]": 4,
      "\t": 5,
      "\n": 6,
      "\r": 7,
      " ": 8,
      "!": 9,
      "\"": 10,
      "#": 11,
      "$": 12,
      "%": 13,
      "&": 14,
      "'": 15,
      "(": 16,
      ")": 17,
      "*": 18,
      "+": 19,
      ",": 20,
      "-": 21,
      ".": 22,
      "/": 23,
      "0": 24,
      "1": 25,
      "2": 26,
      "3": 27,
      "4": 28,
      "5": 29,
      "6": 30,
      "7": 31,
      "8": 32,
      "9": 33,
      ":": 34,
      ";": 35,
      "<": 36,
      "=": 37,
      ">": 38,
      "?": 39,
      "@": 40,
      "A": 41,
      "B": 42,
      "C": 43,
      "D": 44,
      "E": 45,
      "F": 46,
      "G": 47,
      "H": 48,
      "I": 49,
      "J": 50,
      "K": 51,
      "L": 52,
      "M": 53,
      "N": 54,
      "O": 55,
      "P": 56,
      "Q": 57,
      "R": 58,
      "S": 59,
      "T": 60,
      "U": 61,
      "V": 62,
      "W": 63,
      "X": 64,
      "Y": 65,
      "Z": 66,
      "[": 67,
      "\\": 68,
      "]": 69,
      "^": 70,
      "_": 71,
      "`": 72,
      "a": 73,
      "b": 74,
      "c": 75,
      "d": 76,
      "e": 77,
      "f": 78,
      "g": 79,
      "h": 80,
      "i": 81,
      "j": 82,
      "k": 83,
      "l": 84,
      "m": 85,
      "n": 86,
      "o": 87,
      "p": 88,
      "q": 89,
      "r": 90,
      "s": 91,
      "t": 92,
      "u": 93,
      "v": 94,
      "w": 95,
      "x": 96,
      "y": 97,
      "z": 98,
      "{": 99,
      "|": 100,
      "}": 101,
      "~": 102,
      " ": 103,
      "±": 104,
      "×": 105,
      "Σ": 106,
      " ": 107,
      " ": 108,
      "​": 109,
      "’": 110,
      "“": 111,
      "”": 112,
      "…": 113,
      "←": 114,
      "↑": 115,
      "→": 116,
      "∅": 117,
      "−": 118,
      "√": 119,
      "∞": 120,
      "∩": 121,
      "∪": 122,
      "≈": 123,
      "≠": 124,
      "≤": 125,
      "⊕": 126,
      "⌊": 127,
      "⌋": 128,
      "➝": 129,
      "⟶": 130,
      "一": 131,
      "个": 132,
      "中": 133,
      "介": 134,
      "优": 135,
      "但": 136,
      "先": 137,
      "入": 138,
      "内": 139,
      "到": 140,
      "前": 141,
      "加": 142,
      "匙": 143,
      "向": 144,
      "四": 145,
      "回": 146,
      "围": 147,
      "在": 148,
      "墙": 149,
      "对": 150,
      "应": 151,
      "度": 152,
      "当": 153,
      "往": 154,
      "态": 155,
      "或": 156,
      "所": 157,
      "找": 158,
      "搜": 159,
      "数": 160,
      "新": 161,
      "方": 162,
      "无": 163,
      "时": 164,
      "是": 165,
      "更": 166,
      "最": 167,
      "有": 168,
      "未": 169,
      "此": 170,
      "步": 171,
      "没": 172,
      "法": 173,
      "深": 174,
      "点": 175,
      "状": 176,
      "界": 177,
      "的": 178,
      "索": 179,
      "终": 180,
      "统": 181,
      "者": 182,
      "范": 183,
      "计": 184,
      "访": 185,
      "起": 186,
      "边": 187,
      "过": 188,
      "返": 189,
      "通": 190,
      "量": 191,
      "钥": 192,
      "锁": 193,
      "问": 194,
      "队": 195,
      "，": 196,
      "## ": 197,
      "##i": 198,
      "##f": 199,
      "##a": 200,
      "##g": 201,
      "##e": 202,
      "##>": 203,
      "##6": 204,
      "##0": 205,
      "##:": 206,
      "##\r": 207,
      "##\n": 208,
      "##o": 209,
      "##u": 210,
      "##r": 211,
      "##v": 212,
      "##n": 213,
      "##m": 214,
      "##x": 215,
      "##b": 216,
      "##y": 217,
      "##t": 218,
      "##d": 219,
      "##S": 220,
      "##l": 221,
      "##c": 222,
      "##.": 223,
      "##h": 224,
      "##s": 225,
      "##p": 226,
      "##(": 227,
      "##,": 228,
      "##j": 229,
      "##)": 230,
      "##w": 231,
      "##<": 232,
      "##k": 233,
      "##`": 234,
      "##[": 235,
      "##]": 236,
      "##q": 237,
      "##I": 238,
      "##T": 239,
      "##O": 240,
      "##^": 241,
      "##2": 242,
      "##G": 243,
      "##=": 244,
      "##1": 245,
      "##3": 246,
      "##+": 247,
      "##4": 248,
      "##W": 249,
      "##\"": 250,
      "##z": 251,
      "##-": 252,
      "##_": 253,
      "##*": 254,
      "##C": 255,
      "##5": 256,
      "##\\": 257,
      "##9": 258,
      "##7": 259,
      "###": 260,
      "##P": 261,
      "##A": 262,
      "##L": 263,
      "##8": 264,
      "##U": 265,
      "##B": 266,
      "##F": 267,
      "## ": 268,
      "##H": 269,
      "##E": 270,
      "##'": 271,
      "##|": 272,
      "##V": 273,
      "##R": 274,
      "##N": 275,
      "##M": 276,
      "##D": 277,
      "##Y": 278,
      "##Q": 279,
      "##!": 280,
      "##K": 281,
      "##?": 282,
      "##/": 283,
      "##$": 284,
      "##%": 285,
      "##;": 286,
      "##≤": 287,
      "##Z": 288,
      "##X": 289,
      "##&": 290,
      "##{": 291,
      "##}": 292,
      "##J": 293,
      "##→": 294,
      "##​": 295,
      "##是": 296,
      "##钥": 297,
      "##匙": 298,
      "##∞": 299,
      "##↑": 300,
      "##⌊": 301,
      "##⌋": 302,
      "##√": 303,
      "##’": 304,
      "##@": 305,
      "##⊕": 306,
      "##×": 307,
      "##⟶": 308,
      "##…": 309,
      "##Σ": 310,
      "##∩": 311,
      "##➝": 312,
      "##~": 313,
      "##−": 314,
      "##墙": 315,
      "##，": 316,
      "##或": 317,
      "##者": 318,
      "##锁": 319,
      "##但": 320,
      "##此": 321,
      "##时": 322,
      "##没": 323,
      "##有": 324,
      "##对": 325,
      "##应": 326,
      "##的": 327,
      "##无": 328,
      "##法": 329,
      "##通": 330,
      "##过": 331,
      "##统": 332,
      "##计": 333,
      "##数": 334,
      "##量": 335,
      "##在": 336,
      "##边": 337,
      "##界": 338,
      "##范": 339,
      "##围": 340,
      "##内": 341,
      "##状": 342,
      "##态": 343,
      "##未": 344,
      "##访": 345,
      "##问": 346,
      "##入": 347,
      "##队": 348,
      "##“": 349,
      "##”": 350,
      "##找": 351,
      "##到": 352,
      "##所": 353,
      "##返": 354,
      "##回": 355,
      "##当": 356,
      "##前": 357,
      "##步": 358,
      "##←": 359,
      "##中": 360,
      "##介": 361,
      "##∪": 362,
      "##加": 363,
      "##一": 364,
      "##起": 365,
      "##点": 366,
      "## ": 367,
      "##\t": 368,
      "##∅": 369,
      "##≠": 370,
      "##往": 371,
      "##四": 372,
      "##个": 373,
      "##方": 374,
      "##向": 375,
      "##搜": 376,
      "##索": 377,
      "##≈": 378,
      "##最": 379,
      "##终": 380,
      "##深": 381,
      "##度": 382,
      "##±": 383,
      "##更": 384,
      "##新": 385,
      "##优": 386,
      "##先": 387,
      "## ": 388,
      "##  ": 389,
      "##    ": 390,
      "##e ": 391,
      "##\r\n": 392,
      "##th": 393,
      "##s ": 394,
      "##in": 395,
      "##t ": 396,
      "##er": 397,
      "##the ": 398,
      "##, ": 399,
      "##   ": 400,
      "##on": 401,
      "##an": 402,
      "##= ": 403,
      "     ": 404,
      "##en": 405,
      "##d ": 406,
      "##f ": 407,
      "##re": 408,
      "\r\n": 409,
      "##ar": 410,
      "##or": 411,
      "##ti": 412,
      "##um": 413,
      "##st": 414,
      "##al": 415,
      "##:\r\n": 416,
      "##.\r\n": 417,
      "##o ": 418,
      "##y ": 419,
      "##: ": 420,
      "        ": 421,
      "##of ": 422,
      "         ": 423,
      "##ing": 424,
      "##tion": 425,
      "##is ": 426,
      "##ut": 427,
      "##num": 428,
      "##le": 429,
      "## the ": 430,
      "##ch": 431,
      "##ro": 432,
      "##se": 433,
      "##de": 434,
      "##er ": 435,
      "##ur": 436,
      "##to ": 437,
      "##co": 438,
      "##pl": 439,
      "##ing ": 440,
      "##ra": 441,
      "##and ": 442,
      "##int": 443,
      "##n ": 444,
      "##. ": 445,
      "##a ": 446,
      "##at": 447,
      "##] ": 448,
      "##put": 449,
      "            ": 450,
      "##di": 451,
      "##put: ": 452,
      "##or ": 453,
      "##th ": 454,
      "##in ": 455,
      "##un": 456,
      "##<= ": 457,
      "##ma": 458,
      "##st ": 459,
      "##si": 460,
      "##es ": 461,
      "             ": 462,
      "Ex": 463,
      "##su": 464,
      "##ri": 465,
      "##ation": 466,
      "##am": 467,
      "##at ": 468,
      "##an ": 469,
      "##tur": 470,
      "##ch ": 471,
      "##ent": 472,
      "##) ": 473,
      "##ed ": 474,
      "##qu": 475,
      "##len": 476,
      "## = ": 477,
      "##im": 478,
      "##it": 479,
      "##ol": 480,
      "##[i": 481,
      "##ac": 482,
      "### ": 483,
      "##ge": 484,
      "##no": 485,
      "##)\r\n": 486,
      "##wi": 487,
      "##if ": 488,
      "##nums": 489,
      "##+ ": 490,
      "##po": 491,
      "##he ": 492,
      "##retur": 493,
      "##]\r\n": 494,
      "##10": 495,
      "##1,": 496,
      "##m ": 497,
      "##numb": 498,
      "##con": 499,
      "##es": 500,
      "##l ": 501,
      "##gh": 502,
      "##ou": 503,
      "##en ": 504,
      "##val": 505,
      "##are ": 506,
      "##str": 507,
      "##ea": 508,
      "                ": 509,
      "##for ": 510,
      "##arra": 511,
      "##fi": 512,
      "##um ": 513,
      "##leng": 514,
      "##ple ": 515,
      "## <= ": 516,
      "##e the ": 517,
      "##that ": 518,
      "##ist": 519,
      "##max": 520,
      "##- ": 521,
      "##as": 522,
      "In": 523,
      "##utput: ": 524,
      "##of the ": 525,
      "##ample ": 526,
      "##lo": 527,
      "##= [": 528,
      "Example ": 529,
      "Input: ": 530,
      "Output: ": 531,
      "##return ": 532,
      "##ne": 533,
      "        \r\n": 534,
      "##ent ": 535,
      "##wh": 536,
      "##` ": 537,
      "##plan": 538,
      "##number ": 539,
      "##le ": 540,
      "##min": 541,
      "##ord": 542,
      "##sub": 543,
      "##1 ": 544,
      "##2,": 545,
      "##planation": 546,
      "##coun": 547,
      "##it ": 548,
      "##], ": 549,
      "##k ": 550,
      "##el": 551,
      "##ve ": 552,
      "##al ": 553,
      "##length ": 554,
      " \r\n": 555,
      "##ution": 556,
      "##ter": 557,
      "##The ": 558,
      "##ul": 559,
      "##lem": 560,
      "##olution": 561,
      "##ce ": 562,
      "##mo": 563,
      "Explanation": 564,
      "##cur": 565,
      "##x ": 566,
      "##ap": 567,
      "##can ": 568,
      "``": 569,
      "```": 570,
      "##ot": 571,
      "##List": 572,
      "##> ": 573,
      "##pre": 574,
      "##0,": 575,
      "##in the ": 576,
      "        # ": 577,
      "##rom ": 578,
      "##**": 579,
      "##ed": 580,
      "##array ": 581,
      "##each ": 582,
      "##pro": 583,
      "##we ": 584,
      "##ere ": 585,
      "##iv": 586,
      "##0\r\n": 587,
      "##ran": 588,
      "##ly ": 589,
      "##ou ": 590,
      "##1, ": 591,
      "##== ": 592,
      "##ab": 593,
      "##imum ": 594,
      "##per": 595,
      "##1\r\n": 596,
      "##curr": 597,
      "##ver": 598,
      "##number of ": 599,
      "##sel": 600,
      "##2 ": 601,
      "##[i] ": 602,
      "##i ": 603,
      "##):\r\n": 604,
      "##eg": 605,
      "##ec": 606,
      "##3,": 607,
      "##li": 608,
      "##com": 609,
      "##],": 610,
      "##self": 611,
      "##elem": 612,
      "##as ": 613,
      "                 ": 614,
      "##s:\r\n": 615,
      "##inde": 616,
      "##lef": 617,
      "##ex": 618,
      "##valu": 619,
      "##],[": 620,
      "##be ": 621,
      "##s.\r\n": 622,
      "##tw": 623,
      "##-> ": 624,
      "##p ": 625,
      "##se ": 626,
      "##ct": 627,
      "##righ": 628,
      "##def ": 629,
      "##integ": 630,
      "##iven ": 631,
      "Explanation: ": 632,
      "##by ": 633,
      "##sh": 634,
      "##for": 635,
      "##with ": 636,
      "##char": 637,
      "1 <= ": 638,
      "##ir": 639,
      "##pa": 640,
      "##tim": 641,
      "##stra": 642,
      "##all ": 643,
      "##ction": 644,
      "##low": 645,
      "##not ": 646,
      "##s = [": 647,
      "##node": 648,
      "##his ": 649,
      "##ad": 650,
      "##fin": 651,
      "##\",": 652,
      "##s, ": 653,
      "##s the ": 654,
      "##List[": 655,
      "##1:\r\n": 656,
      "##\",\"": 657,
      "##bo": 658,
      "##straint": 659,
      "##sul": 660,
      "##][": 661,
      "##. The ": 662,
      "                    ": 663,
      "##* ": 664,
      "##whi": 665,
      "##end": 666,
      "##sib": 667,
      "##ce": 668,
      "##resul": 669,
      "##range": 670,
      "##string ": 671,
      "##be": 672,
      "##las": 673,
      "##count": 674,
      "##ort ": 675,
      "##<= 10": 676,
      "##igh": 677,
      "##(self": 678,
      "##star": 679,
      "##vi": 680,
      "##to the ": 681,
      "##ing the ": 682,
      "##lass ": 683,
      "The ": 684,
      "##.length ": 685,
      "##(self, ": 686,
      "    ": 687,
      "##0 ": 688,
      "##) -> ": 689,
      "##ers ": 690,
      "- ": 691,
      "##word": 692,
      "##arge": 693,
      "##2:\r\n": 694,
      "##from ": 695,
      "##de ": 696,
      "##ter ": 697,
      "##. I": 698,
      "##yth": 699,
      "##given ": 700,
      "##imp": 701,
      "##fir": 702,
      "##ow": 703,
      "##sum ": 704,
      "Con": 705,
      "##col": 706,
      "##range(": 707,
      "##Solution": 708,
      "##il": 709,
      "    def ": 710,
      "##ython": 711,
      "##ta": 712,
      "##array": 713,
      "Constraint": 714,
      "##pos": 715,
      "##in range(": 716,
      "##t = ": 717,
      "Constraints:\r\n": 718,
      "##element": 719,
      "##sum": 720,
      "Example 2:\r\n": 721,
      "Example 1:\r\n": 722,
      "class ": 723,
      "##4,": 724,
      "## + ": 725,
      "##solution": 726,
      "##python": 727,
      "class Solution": 728,
      "```\r\n": 729,
      "```python": 730,
      "class Solution:\r\n": 731,
      "```python\r\n": 732,
      "##n the ": 733,
      "##ort": 734,
      "##one ": 735,
      "        return ": 736,
      "##len(": 737,
      "##possib": 738,
      "##ay": 739,
      "##maximum ": 740,
      "##two ": 741,
      "##[0": 742,
      "##charac": 743,
      "##quen": 744,
      "##pres": 745,
      "##s of ": 746,
      "##, and ": 747,
      "##ru": 748,
      "##integer ": 749,
      "##is the ": 750,
      "##app": 751,
      "##all": 752,
      "##up": 753,
      "##rom": 754,
      "##ty": 755,
      "##with": 756,
      "This ": 757,
      "##< ": 758,
      "##solution ": 759,
      "##, we ": 760,
      "##let": 761,
      "##tra": 762,
      "##any ": 763,
      "##s = ": 764,
      "##the": 765,
      "##ke": 766,
      "##max_": 767,
      "##first ": 768,
      "##import ": 769,
      "        for ": 770,
      "##dist": 771,
      "##ll ": 772,
      "##on ": 773,
      "##string": 774,
      "##cul": 775,
      "##-1": 776,
      "##List[int": 777,
      "##2, ": 778,
      "##tot": 779,
      "##dp": 780,
      "##left": 781,
      "##possible ": 782,
      "##gri": 783,
      "##ate ": 784,
      "##peration": 785,
      "##ge ": 786,
      "##posi": 787,
      "from ": 788,
      "            if ": 789,
      "##+= ": 790,
      "##ces": 791,
      "##me": 792,
      "##\" ": 793,
      "##\", ": 794,
      "##tre": 795,
      "##5,": 796,
      "##2\r\n": 797,
      "##0, ": 798,
      "##3 ": 799,
      "##inc": 800,
      "##ic": 801,
      "##ha": 802,
      "##sw": 803,
      "##typ": 804,
      "##dig": 805,
      "##alcul": 806,
      "##right": 807,
      "##par": 808,
      "##mov": 809,
      "##ff": 810,
      "##s\r\n": 811,
      "You ": 812,
      "##\"\r\n": 813,
      "##row": 814,
      "##current ": 815,
      "##its ": 816,
      "##**: ": 817,
      "##00": 818,
      "##arr": 819,
      "##We ": 820,
      "##index": 821,
      "##oun": 822,
      "##gra": 823,
      "##etur": 824,
      "##index ": 825,
      "##id ": 826,
      "##so ": 827,
      "            # ": 828,
      "##minimum ": 829,
      "##sp": 830,
      "##length": 831,
      "##ces ": 832,
      "##mat": 833,
      "##start": 834,
      "##operation": 835,
      "This solution ": 836,
      "##iz": 837,
      "##[1,": 838,
      "##e\r\n": 839,
      "##. **": 840,
      "##ary ": 841,
      "##sort": 842,
      "##5\r\n": 843,
      "##targe": 844,
      "##you ": 845,
      "##current": 846,
      "##id": 847,
      "##d the ": 848,
      "##can be ": 849,
      "##to": 850,
      "##this ": 851,
      "##where ": 852,
      "##equ": 853,
      "##sequen": 854,
      "##] = ": 855,
      "##point": 856,
      "##value ": 857,
      "##count ": 858,
      "##em": 859,
      "##ore ": 860,
      "##- 1": 861,
      "##node ": 862,
      "##which ": 863,
      "##].\r\n": 864,
      "##s to ": 865,
      "##ates ": 866,
      "##bin": 867,
      "##), ": 868,
      "##will ": 869,
      "##nums = [": 870,
      "##ci": 871,
      "##s[": 872,
      "##result": 873,
      "##wor": 874,
      "##n = ": 875,
      "##us": 876,
      "##List[int]": 877,
      "##from": 878,
      "Retur": 879,
      "##typing ": 880,
      "##hea": 881,
      "from typing ": 882,
      "from typing import ": 883,
      "##0,0,": 884,
      "##'s ": 885,
      "##ach ": 886,
      "##repres": 887,
      "##int:\r\n": 888,
      "##List\r\n": 889,
      "##diff": 890,
      "##) -> int:\r\n": 891,
      "##nums[": 892,
      "##ind": 893,
      "##only ": 894,
      "from typing import List\r\n": 895,
      "##+ 1": 896,
      "##ph": 897,
      "##' ": 898,
      "##no ": 899,
      "##use": 900,
      "##: int": 901,
      "##ffi": 902,
      "##que": 903,
      "##can": 904,
      "##consi": 905,
      "##oo": 906,
      "##[i]": 907,
      "##s that ": 908,
      "##position": 909,
      "##is a ": 910,
      "##quer": 911,
      "You are ": 912,
      "##ther ": 913,
      "##from the ": 914,
      "##ple": 915,
      "##current_": 916,
      "##there ": 917,
      "##has ": 918,
      "##ate the ": 919,
      "##eigh": 920,
      "##have ": 921,
      "##tive ": 922,
      "##answ": 923,
      "##ev": 924,
      "##element ": 925,
      "##pair": 926,
      "##elements ": 927,
      "##time ": 928,
      "##ast ": 929,
      "##grid": 930,
      "##nex": 931,
      "##left ": 932,
      "##pri": 933,
      "##j ": 934,
      "##our": 935,
      "##represent": 936,
      "##. If ": 937,
      "##indi": 938,
      "##ame ": 939,
      "Input: nums = [": 940,
      "Explanation:\r\n": 941,
      "##character": 942,
      "##cel": 943,
      "##s(": 944,
      "##i, ": 945,
      "##use ": 946,
      "##ation ": 947,
      "##list ": 948,
      "##ach": 949,
      "##. T": 950,
      "##than ": 951,
      "##s and ": 952,
      "##ed to ": 953,
      "##is": 954,
      "##, the ": 955,
      "##iti": 956,
      "##[i][": 957,
      "##secon": 958,
      "##ep": 959,
      "##gre": 960,
      "##sol": 961,
      "##4\r\n": 962,
      "            \r\n": 963,
      "##such ": 964,
      "##ction ": 965,
      "##s are ": 966,
      "##ollow": 967,
      "            return ": 968,
      "##]]\r\n": 969,
      "##r\r\n": 970,
      "##bu": 971,
      "##prefi": 972,
      "##with the ": 973,
      "##sm": 974,
      "##ct ": 975,
      "##i in range(": 976,
      "##du": 977,
      "You are given ": 978,
      "##differ": 979,
      "##e.\r\n": 980,
      "##3, ": 981,
      "##list": 982,
      "##om": 983,
      "##k = ": 984,
      "##then ": 985,
      "##If ": 986,
      "                if ": 987,
      "##total ": 988,
      "##ase ": 989,
      "##.length <= 10": 990,
      "##calcul": 991,
      "##graph": 992,
      "##alse": 993,
      "##valid ": 994,
      "##3\r\n": 995,
      "##right ": 996,
      "##s in ": 997,
      "##sc": 998,
      "##chec": 999,
      "##3:\r\n": 1000,
      "##here ": 1001,
      "##ep ": 1002,
      "##).\r\n": 1003,
      "##append": 1004,
      "##ffici": 1005,
      "##follow": 1006,
      "##distan": 1007,
      "##appro": 1008,
      "Return the ": 1009,
      "##alle": 1010,
      "##+= 1\r\n": 1011,
      "##s[i] ": 1012,
      "##while ": 1013,
      "##rou": 1014,
      "##equal ": 1015,
      "##same ": 1016,
      "## in ": 1017,
      "##binary ": 1018,
      "##effici": 1019,
      "##s: ": 1020,
      "Example 3:\r\n": 1021,
      "            for ": 1022,
      "##form": 1023,
      "##j] ": 1024,
      "##e, ": 1025,
      "##ob": 1026,
      "##fun": 1027,
      "##cost ": 1028,
      "##.append": 1029,
      "##4 ": 1030,
      "##result ": 1031,
      "Output: [": 1032,
      "##.append(": 1033,
      "##.length": 1034,
      "##fter ": 1035,
      "##siz": 1036,
      "##ity ": 1037,
      "##number": 1038,
      "        # C": 1039,
      "##trac": 1040,
      "##1,2,": 1041,
      "##are": 1042,
      "##an integer ": 1043,
      "##twe": 1044,
      "##tree ": 1045,
      "##fre": 1046,
      "##plac": 1047,
      "##betwe": 1048,
      "##ks ": 1049,
      "##conta": 1050,
      "##, it ": 1051,
      "##new": 1052,
      "##character ": 1053,
      "##1] ": 1054,
      "##ded ": 1055,
      "##6,": 1056,
      "##prob": 1057,
      "##act": 1058,
      "## = [": 1059,
      "##ence ": 1060,
      "##In": 1061,
      "##5 ": 1062,
      "##iter": 1063,
      "##s a ": 1064,
      "##ke ": 1065,
      "##ang": 1066,
      "##]:\r\n": 1067,
      "Explanation: The ": 1068,
      "##t the ": 1069,
      "##order": 1070,
      "##sequence ": 1071,
      "##))\r\n": 1072,
      "##target": 1073,
      "##stac": 1074,
      "##numbers ": 1075,
      "##et": 1076,
      "##and": 1077,
      "##set": 1078,
      "##root": 1079,
      "##min_": 1080,
      "##self.": 1081,
      "##ear": 1082,
      "##ase": 1083,
      "##non": 1084,
      "##uni": 1085,
      "##s = \"": 1086,
      "##matri": 1087,
      "##op": 1088,
      "##letter": 1089,
      "##For ": 1090,
      "##nums[i] ": 1091,
      "##end ": 1092,
      "##        ": 1093,
      "##\", \"": 1094,
      "##en the ": 1095,
      "##ori": 1096,
      "0 <= ": 1097,
      "##heigh": 1098,
      "##smalle": 1099,
      "##/ ": 1100,
      "##way": 1101,
      "##max(": 1102,
      "##. It ": 1103,
      "##divi": 1104,
      "##function ": 1105,
      "##rema": 1106,
      "##11": 1107,
      "##7,": 1108,
      "##zer": 1109,
      "##itial": 1110,
      "##ere": 1111,
      "Given ": 1112,
      "##digit": 1113,
      "##set ": 1114,
      "##if the ": 1115,
      "##1,1,": 1116,
      "##])\r\n": 1117,
      "##cre": 1118,
      "##ay ": 1119,
      "##ed by ": 1120,
      "## and ": 1121,
      "##oc": 1122,
      "        for i in range(": 1123,
      "##total": 1124,
      "##values ": 1125,
      "##dire": 1126,
      "##comp": 1127,
      "##heap": 1128,
      "##answer ": 1129,
      "##emp": 1130,
      "##ard": 1131,
      "##find the ": 1132,
      "##return the ": 1133,
      "##tru": 1134,
      "##1 and ": 1135,
      "##`.\r\n": 1136,
      "##red ": 1137,
      "##return": 1138,
      "##roo": 1139,
      "##on the ": 1140,
      "##smallest ": 1141,
      "##pu": 1142,
      "## == ": 1143,
      "##ding ": 1144,
      "##do": 1145,
      "##ate": 1146,
      "##lon": 1147,
      "##move ": 1148,
      "   ": 1149,
      "##cor": 1150,
      "##efficient": 1151,
      "##ve": 1152,
      "##subarray ": 1153,
      "##..": 1154,
      "##large": 1155,
      "##non-": 1156,
      "##ld ": 1157,
      "##ould ": 1158,
      "##es the ": 1159,
      "##subarray": 1160,
      "##approach ": 1161,
      "##case ": 1162,
      "##_sum": 1163,
      "##lu": 1164,
      "##od": 1165,
      "##ther": 1166,
      "   - ": 1167,
      "##rough": 1168,
      "##lin": 1169,
      "##path ": 1170,
      "##% ": 1171,
      "##No": 1172,
      "##  # ": 1173,
      "##!= ": 1174,
      "##()\r\n": 1175,
      "##through": 1176,
      "##sum of ": 1177,
      "##vel": 1178,
      "##ater ": 1179,
      "# ": 1180,
      "##der": 1181,
      "##\".\r\n": 1182,
      "##[0] ": 1183,
      "##step": 1184,
      "##ir ": 1185,
      "##track ": 1186,
      "##sit": 1187,
      "##nodes ": 1188,
      "        def ": 1189,
      "##1.\r\n": 1190,
      "##x, ": 1191,
      "##nums ": 1192,
      "##second ": 1193,
      "##contain": 1194,
      "##into ": 1195,
      "##les": 1196,
      "##integers ": 1197,
      "##for the ": 1198,
      "##and the ": 1199,
      "##else": 1200,
      "##You ": 1201,
      "##our ": 1202,
      "##queri": 1203,
      "##alse\r\n": 1204,
      "##tri": 1205,
      "##need to ": 1206,
      "##       ": 1207,
      "##indices ": 1208,
      "##between ": 1209,
      "##0:\r\n": 1210,
      "##other ": 1211,
      "##ty ": 1212,
      "##word ": 1213,
      "##last ": 1214,
      "##.length\r\n": 1215,
      "##cu": 1216,
      "##that the ": 1217,
      "##most ": 1218,
      "##starting ": 1219,
      "##2 = ": 1220,
      "##spec": 1221,
      "A ": 1222,
      "##00\r\n": 1223,
      "##1],[": 1224,
      "##order ": 1225,
      "##else:\r\n": 1226,
      "##y.\r\n": 1227,
      "##st_": 1228,
      "##n\r\n": 1229,
      "##lower": 1230,
      "##consist": 1231,
      "##all the ": 1232,
      "##size ": 1233,
      "##incre": 1234,
      "##tic": 1235,
      "##0.\r\n": 1236,
      "Input: s = \"": 1237,
      "##\\r\r\n": 1238,
      "##n - ": 1239,
      "##an array ": 1240,
      "##ag": 1241,
      "        if ": 1242,
      "##y, ": 1243,
      "## is ": 1244,
      "##Tru": 1245,
      "##able ": 1246,
      "                # ": 1247,
      "##abc": 1248,
      "##itializ": 1249,
      "##1]\r\n": 1250,
      "##ser": 1251,
      "##aa": 1252,
      "##one": 1253,
      "##of a ": 1254,
      "##est ": 1255,
      "##score ": 1256,
      "##queu": 1257,
      "##cell": 1258,
      "##df": 1259,
      "##both ": 1260,
      "##9\r\n": 1261,
      "##dition": 1262,
      "##. This ": 1263,
      "                        ": 1264,
      "##sh ": 1265,
      "##after ": 1266,
      "##Re": 1267,
      "##roup": 1268,
      "##substring": 1269,
      "##find": 1270,
      "##range ": 1271,
      "##pe": 1272,
      "##prefix": 1273,
      "##inter": 1274,
      "##4, ": 1275,
      "##cost": 1276,
      "##Node": 1277,
      "##start ": 1278,
      "##pi": 1279,
      "##Ch": 1280,
      "##at the ": 1281,
      "##ment": 1282,
      "##ated ": 1283,
      "##2.\r\n": 1284,
      "##requ": 1285,
      "##En": 1286,
      "##remov": 1287,
      "##Ex": 1288,
      "##s(self, ": 1289,
      "##ow ": 1290,
      "##Fin": 1291,
      "##.length == ": 1292,
      "##their ": 1293,
      "##form ": 1294,
      "Input: n = ": 1295,
      "##zero": 1296,
      "##becom": 1297,
      "##mul": 1298,
      "##Coun": 1299,
      "##_count": 1300,
      "##sa": 1301,
      "##for each ": 1302,
      "##grid ": 1303,
      "##('": 1304,
      "##ust ": 1305,
      "##St": 1306,
      "##s. ": 1307,
      "##sorted ": 1308,
      "##2] ": 1309,
      "##.length <= ": 1310,
      "##efficiently ": 1311,
      "                return ": 1312,
      "##av": 1313,
      "##equal to ": 1314,
      "##OR": 1315,
      "##D ": 1316,
      "##nums1": 1317,
      "##ic ": 1318,
      "##group": 1319,
      "##longe": 1320,
      "##requi": 1321,
      "This solution use": 1322,
      "##loc": 1323,
      "##visit": 1324,
      "##very ": 1325,
      "##es.\r\n": 1326,
      "##min(": 1327,
      "##next": 1328,
      "##2],[": 1329,
      "##eca": 1330,
      "##For each ": 1331,
      "##6\r\n": 1332,
      "##n = len(": 1333,
      "##next ": 1334,
      "##**: We ": 1335,
      "##remain": 1336,
      "##bit": 1337,
      "##8,": 1338,
      "##substring ": 1339,
      "##colum": 1340,
      "##following ": 1341,
      "##`k": 1342,
      "##5, ": 1343,
      "##` and ": 1344,
      "##day": 1345,
      "##-index": 1346,
      "##sear": 1347,
      "##colle": 1348,
      "##adj": 1349,
      "##empty ": 1350,
      "##ild": 1351,
      "##edge": 1352,
      "##exam": 1353,
      "##cell ": 1354,
      "##O(": 1355,
      "##ener": 1356,
      "##there are ": 1357,
      "##greater ": 1358,
      "##te": 1359,
      "##[0,": 1360,
      "##is not ": 1361,
      "##distance ": 1362,
      "##n):\r\n": 1363,
      "##more ": 1364,
      "##beca": 1365,
      "##` to ": 1366,
      "##thre": 1367,
      "##of each ": 1368,
      "##ei": 1369,
      "##path": 1370,
      "##total_": 1371,
      "##def": 1372,
      "##2,3,": 1373,
      "##proces": 1374,
      "##here are ": 1375,
      "##List[List[int]": 1376,
      "##alind": 1377,
      "##digit ": 1378,
      "##alindrom": 1379,
      "##track of the ": 1380,
      "##mid": 1381,
      "##ence": 1382,
      "##using ": 1383,
      "##foun": 1384,
      "##conne": 1385,
      "##squ": 1386,
      "##1], ": 1387,
      "##root ": 1388,
      "##example": 1389,
      "##(0, ": 1390,
      "##int ": 1391,
      "##neigh": 1392,
      "##ates the ": 1393,
      "##neighb": 1394,
      "##least ": 1395,
      "##produ": 1396,
      "##nums2": 1397,
      "##position ": 1398,
      "##termin": 1399,
      "##dfs(": 1400,
      "##gli": 1401,
      "##in a ": 1402,
      "##Engli": 1403,
      "##English ": 1404,
      "##: List[int]": 1405,
      "For ": 1406,
      "##problem": 1407,
      "##OR ": 1408,
      "##make ": 1409,
      "##largest ": 1410,
      "##: int, ": 1411,
      "##wind": 1412,
      "##node.": 1413,
      "##frequen": 1414,
      "##: int) -> int:\r\n": 1415,
      "##nam": 1416,
      "##upd": 1417,
      "##d.\r\n": 1418,
      "##cted ": 1419,
      "##with a ": 1420,
      "##own ": 1421,
      "##ver ": 1422,
      "##bac": 1423,
      "##cy ": 1424,
      "##minimum number of ": 1425,
      "Not": 1426,
      "##flo": 1427,
      "##es = [": 1428,
      "##corre": 1429,
      "##sure": 1430,
      "##count = ": 1431,
      "You are given a ": 1432,
      "##ince ": 1433,
      "##add": 1434,
      "##lowercase ": 1435,
      "##ve the ": 1436,
      "##target ": 1437,
      "##gin": 1438,
      "##up ": 1439,
      "##they ": 1440,
      "##prefix ": 1441,
      "##difference ": 1442,
      "##// ": 1443,
      "##tion ": 1444,
      "##ous ": 1445,
      "##s in the ": 1446,
      "##ensure": 1447,
      "##ese ": 1448,
      "##ending ": 1449,
      "##you can ": 1450,
      "##) and ": 1451,
      "##palindrom": 1452,
      "##3.\r\n": 1453,
      "##becomes ": 1454,
      "##que ": 1455,
      "##nee": 1456,
      "##1 + ": 1457,
      "##2,3": 1458,
      "##keep ": 1459,
      "Output: 2\r\n": 1460,
      "##0-index": 1461,
      "##>= ": 1462,
      "##s)\r\n": 1463,
      "##longest ": 1464,
      "##FS": 1465,
      "##also ": 1466,
      "##) = ": 1467,
      "##', ": 1468,
      "##stru": 1469,
      "##g ": 1470,
      "##king ": 1471,
      "##List[int], ": 1472,
      "##such that ": 1473,
      "##10,": 1474,
      "##e that ": 1475,
      "##ensures that ": 1476,
      "##ga": 1477,
      "##tas": 1478,
      "##, return ": 1479,
      "##rever": 1480,
      "##we can ": 1481,
      "##length of the ": 1482,
      "##high": 1483,
      "##1 = ": 1484,
      "##. You ": 1485,
      "##* (": 1486,
      "##subsequence ": 1487,
      "##lice ": 1488,
      "##exact": 1489,
      "##ctions ": 1490,
      "##search ": 1491,
      "##bi": 1492,
      "##height": 1493,
      "##[i ": 1494,
      "##mas": 1495,
      "##sig": 1496,
      "\\r\r\n": 1497,
      "##play": 1498,
      "##2]\r\n": 1499,
      "##. A": 1500,
      "##ull": 1501,
      "##int(": 1502,
      "##exactly ": 1503,
      "##ating ": 1504,
      "##alculate the ": 1505,
      "##English letter": 1506,
      "##.length <= 105\r\n": 1507,
      "##less ": 1508,
      "##multi": 1509,
      "##core": 1510,
      "##cannot ": 1511,
      "##Initializ": 1512,
      "##sing": 1513,
      "##constraint": 1514,
      "##-1\r\n": 1515,
      "##must ": 1516,
      "##sur": 1517,
      "##2], ": 1518,
      "##9,": 1519,
      "##these ": 1520,
      "##comput": 1521,
      "##spac": 1522,
      "##determin": 1523,
      "##new ": 1524,
      "##wise": 1525,
      "##ally ": 1526,
      "##ith ": 1527,
      "##condition": 1528,
      "##ed.\r\n": 1529,
      "##which is ": 1530,
      "##d_": 1531,
      "##dp[": 1532,
      "##all possible ": 1533,
      "##speci": 1534,
      "##k\r\n": 1535,
      "##] == ": 1536,
      "##eck ": 1537,
      "##at least ": 1538,
      "##sum of the ": 1539,
      "##0],[": 1540,
      "##answer": 1541,
      "##[i][j] ": 1542,
      "##comple": 1543,
      "##adjac": 1544,
      "To ": 1545,
      "        n = len(": 1546,
      "##positive ": 1547,
      "##ked ": 1548,
      "##dict": 1549,
      "##spl": 1550,
      "##\"a": 1551,
      "        while ": 1552,
      "##lement": 1553,
      "##put ": 1554,
      "##origin": 1555,
      "##s[i]": 1556,
      "##out ": 1557,
      "##through the ": 1558,
      "##n, ": 1559,
      "##reach": 1560,
      "##because ": 1561,
      "##occurr": 1562,
      "##if": 1563,
      "##False\r\n": 1564,
      "## <= 10": 1565,
      "##stor": 1566,
      "##bot": 1567,
      "##, we can ": 1568,
      "##characters ": 1569,
      "##complex": 1570,
      "##gu": 1571,
      "##ment ": 1572,
      "##[1, ": 1573,
      "##-= ": 1574,
      "Output: 3\r\n": 1575,
      "1. **": 1576,
      "2. **": 1577,
      "##atter": 1578,
      "##operations ": 1579,
      "##ove ": 1580,
      "##pers": 1581,
      "##sion": 1582,
      "##la": 1583,
      "##may ": 1584,
      "##]], ": 1585,
      "##should ": 1586,
      "##tak": 1587,
      "##. We ": 1588,
      "## in range(": 1589,
      "##n <= 10": 1590,
      "##iven the ": 1591,
      "##choo": 1592,
      "##pop": 1593,
      "##null": 1594,
      "##either ": 1595,
      "It ": 1596,
      "##s` ": 1597,
      "##integer": 1598,
      "##0 and ": 1599,
      "##to find the ": 1600,
      "##match": 1601,
      "##bre": 1602,
      "##matrix ": 1603,
      "##gram": 1604,
      "##s. The ": 1605,
      "##diction": 1606,
      "##s of the ": 1607,
      "##asing ": 1608,
      "##ed_": 1609,
      "##inclu": 1610,
      "##queries": 1611,
      "##inct ": 1612,
      "##iterates ": 1613,
      "##hou": 1614,
      "##ree": 1615,
      "##exist": 1616,
      "##appear": 1617,
      "Here": 1618,
      "##edg": 1619,
      "##goo": 1620,
      "##ari": 1621,
      "##distinct ": 1622,
      "##aul": 1623,
      "##inf": 1624,
      "##0] ": 1625,
      "##[1": 1626,
      "##         ": 1627,
      "##": 1628,
      "##ctly ": 1629,
      "##there is ": 1630,
      "##pr": 1631,
      "##pow": 1632,
      "##neighbor": 1633,
      "##l the ": 1634,
      "##))": 1635,
      "##: List[int], ": 1636,
      "##2 + ": 1637,
      "##s_": 1638,
      "##, so ": 1639,
      "##defaul": 1640,
      "##null,": 1641,
      "##Su": 1642,
      "            else:\r\n": 1643,
      "##remaining ": 1644,
      "3. **": 1645,
      "##every ": 1646,
      "##), (": 1647,
      "##default": 1648,
      "##6 ": 1649,
      "##s is ": 1650,
      "Output: 1\r\n": 1651,
      "##perm": 1652,
      "##consider": 1653,
      "##lowercase English letter": 1654,
      "##cy": 1655,
      "##und": 1656,
      "##digits ": 1657,
      "##candi": 1658,
      "##'s the ": 1659,
      "##chan": 1660,
      "##i = ": 1661,
      "#         ": 1662,
      "##sing ": 1663,
      "##calculates the ": 1664,
      "##stack": 1665,
      "##0-indexed ": 1666,
      "##score": 1667,
      "##of length ": 1668,
      "Output: \"": 1669,
      "##prev": 1670,
      "##required ": 1671,
      "#         self.": 1672,
      "##3,4,": 1673,
      "##solve ": 1674,
      "##7\r\n": 1675,
      "##interval": 1676,
      "##\"]\r\n": 1677,
      "##Di": 1678,
      "##.\",\"": 1679,
      "##unique ": 1680,
      "##three ": 1681,
      "##pp": 1682,
      "##color": 1683,
      "##True\r\n": 1684,
      "##hel": 1685,
      "##at most ": 1686,
      "##therwise": 1687,
      "##defaultdict": 1688,
      "##\\(": 1689,
      "##new_": 1690,
      "##it is ": 1691,
      "##vers": 1692,
      "##i < ": 1693,
      "##over": 1694,
      "##enti": 1695,
      "##tis": 1696,
      "##secu": 1697,
      "##[i][j": 1698,
      "##comm": 1699,
      "##ome ": 1700,
      "##`n": 1701,
      "##= 0\r\n": 1702,
      "##an integer array ": 1703,
      "##matrix": 1704,
      "##__": 1705,
      "##e.": 1706,
      "##ard ": 1707,
      "##j in range(": 1708,
      "##base": 1709,
      "##point ": 1710,
      "##check ": 1711,
      "##) + ": 1712,
      "##* 10": 1713,
      "##If the ": 1714,
      "##cat": 1715,
      "##values": 1716,
      "##satis": 1717,
      "##XOR ": 1718,
      "##0 <= ": 1719,
      "##​​": 1720,
      "##consecu": 1721,
      "##ity": 1722,
      "##9 + ": 1723,
      "Return ": 1724,
      "##0,0,0,0,": 1725,
      "##use a ": 1726,
      "##mar": 1727,
      "##-1, ": 1728,
      "##ant ": 1729,
      "##per ": 1730,
      "##ally": 1731,
      "##does ": 1732,
      "##less than ": 1733,
      "##ensur": 1734,
      "##replac": 1735,
      "##child": 1736,
      "##will be ": 1737,
      "##`nums": 1738,
      "##s (": 1739,
      "##array.\r\n": 1740,
      "##12": 1741,
      "##allow": 1742,
      "##minim": 1743,
      "##list of ": 1744,
      "##n - 1": 1745,
      "##checks ": 1746,
      "##fli": 1747,
      "##Alice ": 1748,
      "##Bob": 1749,
      "##dep": 1750,
      "##`dp": 1751,
      "### Ex": 1752,
      "Output: 0\r\n": 1753,
      "### Explanation": 1754,
      "        max_": 1755,
      "1 <= nums": 1756,
      "##key": 1757,
      "##code": 1758,
      "##i + ": 1759,
      "##: List[int]) -> int:\r\n": 1760,
      "##mod": 1761,
      "Explanation: T": 1762,
      "##even ": 1763,
      "##in the range ": 1764,
      "##row ": 1765,
      "##defin": 1766,
      "##(self, nums": 1767,
      "##s.": 1768,
      "##, and the ": 1769,
      "Here's the ": 1770,
      "### Explanation:\r\n": 1771,
      "##dy": 1772,
      "##as the ": 1773,
      "##even": 1774,
      "##consists of ": 1775,
      "##possible to ": 1776,
      "n == ": 1777,
      "##frequency ": 1778,
      "##store the ": 1779,
      "##solve this ": 1780,
      "##ud": 1781,
      "##step ": 1782,
      "##coin": 1783,
      "##. S": 1784,
      "##ext": 1785,
      "##pair ": 1786,
      "##collections ": 1787,
      "##collections import ": 1788,
      "##)]\r\n": 1789,
      "##[2,": 1790,
      "##able": 1791,
      "##mean": 1792,
      "##does not ": 1793,
      "##right = ": 1794,
      "##nums[i] <= 10": 1795,
      "##Sub": 1796,
      "##patter": 1797,
      "##ston": 1798,
      "##nega": 1799,
      "##greater than ": 1800,
      "##ute ": 1801,
      "##subsequen": 1802,
      "##3,4": 1803,
      "##needed ": 1804,
      "##shown ": 1805,
      "##ni": 1806,
      "##perform": 1807,
      "##3]\r\n": 1808,
      "##) - ": 1809,
      "##[i], ": 1810,
      "##second": 1811,
      "##`, ": 1812,
      "##example, ": 1813,
      "##bal": 1814,
      "##: str": 1815,
      "##left_": 1816,
      "##float": 1817,
      "##Tim": 1818,
      "##them ": 1819,
      "##. \r\n": 1820,
      "##integer array ": 1821,
      "##m, ": 1822,
      "##1 to ": 1823,
      "##` is ": 1824,
      "##clo": 1825,
      "##some ": 1826,
      "##weigh": 1827,
      "        # Initializ": 1828,
      "##times ": 1829,
      "##gener": 1830,
      "##decre": 1831,
      "##sion ": 1832,
      "##cont": 1833,
      "##bb": 1834,
      "##time complex": 1835,
      "##do ": 1836,
      "##time": 1837,
      "##`i": 1838,
      "##maximum number of ": 1839,
      "##work": 1840,
      "##represents the ": 1841,
      "##keep track of the ": 1842,
      "##stri": 1843,
      "##valid": 1844,
      "##Counter": 1845,
      "We ": 1846,
      "##2D ": 1847,
      "##. Th": 1848,
      "##true\r\n": 1849,
      "##ming ": 1850,
      "##parti": 1851,
      "##moves ": 1852,
      "##lar": 1853,
      "Output: true\r\n": 1854,
      "##Tree": 1855,
      "##lem ": 1856,
      "##hand": 1857,
      "##different ": 1858,
      "##e if ": 1859,
      "##is_": 1860,
      "##', '": 1861,
      "To solve this ": 1862,
      "##3],[": 1863,
      "##operation ": 1864,
      "##complet": 1865,
      "##List[List[int]]": 1866,
      "##namic ": 1867,
      "##4.\r\n": 1868,
      "##combin": 1869,
      "##implement": 1870,
      "##height ": 1871,
      "##edge ": 1872,
      "##contains ": 1873,
      "##calculate the ": 1874,
      "##direction": 1875,
      "##over ": 1876,
      "##3], ": 1877,
      "##[i + ": 1878,
      "##+ 1):\r\n": 1879,
      "##[i - 1": 1880,
      "##input ": 1881,
      "##problem ": 1882,
      "##consecutive ": 1883,
      "##0]\r\n": 1884,
      "##den": 1885,
      "##(i": 1886,
      "##k.\r\n": 1887,
      "##3] ": 1888,
      "##repe": 1889,
      "##rans": 1890,
      "##product ": 1891,
      "##age": 1892,
      "##conver": 1893,
      "##0 to ": 1894,
      "##unique": 1895,
      "##) for ": 1896,
      "##previ": 1897,
      "##ways to ": 1898,
      "##inu": 1899,
      "##ences ": 1900,
      "##3,2,": 1901,
      "##ore": 1902,
      "##read": 1903,
      "- **": 1904,
      "##rect": 1905,
      "##short": 1906,
      "##equal": 1907,
      "##ts ": 1908,
      "##lim": 1909,
      "##cd": 1910,
      "##[\"": 1911,
      "##is to ": 1912,
      "##wise ": 1913,
      "##fact": 1914,
      "##optim": 1915,
      "##brea": 1916,
      "##xi": 1917,
      "##maxim": 1918,
      "This solution uses a ": 1919,
      "##person ": 1920,
      "##item": 1921,
      "If ": 1922,
      "##ses ": 1923,
      "##count_": 1924,
      "##` and `": 1925,
      "##num ": 1926,
      "##parent": 1927,
      "##used ": 1928,
      "##back": 1929,
      "##bea": 1930,
      "##)):\r\n": 1931,
      "##case": 1932,
      "##1) ": 1933,
      "##= \"": 1934,
      "##strings ": 1935,
      "##coord": 1936,
      "##ulo ": 1937,
      "2 <= ": 1938,
      "##board": 1939,
      "##permut": 1940,
      "##go": 1941,
      "##ar ": 1942,
      "##cursi": 1943,
      "##way ": 1944,
      "##above ": 1945,
      "##has a ": 1946,
      "##rectang": 1947,
      "##'.\r\n": 1948,
      "##swap": 1949,
      "##prim": 1950,
      "##key ": 1951,
      "##ate(": 1952,
      "##y the ": 1953,
      "##for a ": 1954,
      "##day ": 1955,
      "##-b": 1956,
      "##returns ": 1957,
      "##, return the ": 1958,
      "##stud": 1959,
      "##bool": 1960,
      "                    if ": 1961,
      "##program": 1962,
      "##fter": 1963,
      "##a, ": 1964,
      "##chang": 1965,
      "##left = ": 1966,
      "##than": 1967,
      "##es\r\n": 1968,
      "##left, ": 1969,
      "##Con": 1970,
      "##None": 1971,
      "##De": 1972,
      "##n <= ": 1973,
      "##a string ": 1974,
      "##sum(": 1975,
      "##sed ": 1976,
      "Output: 4\r\n": 1977,
      "##) % ": 1978,
      "##nums)\r\n": 1979,
      "##: int) -> ": 1980,
      "##balan": 1981,
      "##Sum": 1982,
      "##sible ": 1983,
      "##without ": 1984,
      "##Check ": 1985,
      "##_ in range(": 1986,
      "##== 0:\r\n": 1987,
      "##s: str": 1988,
      "##adjacent ": 1989,
      "##original ": 1990,
      "##-= 1\r\n": 1991,
      "##since ": 1992,
      "##degre": 1993,
      "##box": 1994,
      "##good ": 1995,
      "##i, j": 1996,
      "##ways ": 1997,
      "##namic program": 1998,
      "##y-": 1999,
      "##Op": 2000,
      "##final ": 2001,
      "##here is ": 2002,
      "##odd ": 2003,
      "##5]\r\n": 2004,
      "##`k` ": 2005,
      "##Iter": 2006,
      "##amoun": 2007,
      "##words": 2008,
      "##right_": 2009,
      "##roup ": 2010,
      "##single ": 2011,
      "## = 0\r\n": 2012,
      "Output: 1": 2013,
      "##, we need to ": 2014,
      "##keep": 2015,
      "##run": 2016,
      "##cle": 2017,
      "##5.\r\n": 2018,
      "##unti": 2019,
      "from collections import ": 2020,
      "##dynamic program": 2021,
      "##cap": 2022,
      "##t of ": 2023,
      "##1,0,": 2024,
      "##remove ": 2025,
      "##achi": 2026,
      "##visited": 2027,
      "##modulo ": 2028,
      "##jum": 2029,
      "##] + ": 2030,
      "##letter ": 2031,
      "##points ": 2032,
      "##using the ": 2033,
      "##compon": 2034,
      "##botto": 2035,
      "##DFS": 2036,
      "##order.\r\n": 2037,
      "##multiple ": 2038,
      "##b ": 2039,
      "##Retur": 2040,
      "##acc": 2041,
      "        # S": 2042,
      "##than the ": 2043,
      "##ate a ": 2044,
      "It can be ": 2045,
      "##dictionary ": 2046,
      "##coordin": 2047,
      "##get ": 2048,
      "##expres": 2049,
      "##result\r\n": 2050,
      "##works ": 2051,
      "##total number of ": 2052,
      "##lowercase English letters.\r\n": 2053,
      "To solve this problem": 2054,
      "##bool:\r\n": 2055,
      "##mak": 2056,
      "##continu": 2057,
      "##trans": 2058,
      "##[i] = ": 2059,
      "##first": 2060,
      "##tivel": 2061,
      "##ing a ": 2062,
      "##ild ": 2063,
      "##0000": 2064,
      "##resulting ": 2065,
      "##distance": 2066,
      "##max(max_": 2067,
      "##mid ": 2068,
      "##desc": 2069,
      "##inf'": 2070,
      "##float('": 2071,
      "##previous ": 2072,
      "##gori": 2073,
      "##approach": 2074,
      "##through ": 2075,
      "##MO": 2076,
      "##seg": 2077,
      "##add ": 2078,
      "##find ": 2079,
      "##heapq": 2080,
      "##value of ": 2081,
      "##TreeNode": 2082,
      "##pas": 2083,
      "##k the ": 2084,
      "##\"abc": 2085,
      "##2,2,": 2086,
      "##else ": 2087,
      "##window ": 2088,
      "##based ": 2089,
      "##sent": 2090,
      "##jo": 2091,
      "##would ": 2092,
      "            while ": 2093,
      "##gorith": 2094,
      "##x = ": 2095,
      "##elif ": 2096,
      "##fini": 2097,
      "##but ": 2098,
      "##column ": 2099,
      "##6, ": 2100,
      "##[j": 2101,
      "            for j in range(": 2102,
      "##common ": 2103,
      "##Iterate ": 2104,
      "##fu": 2105,
      "##Pa": 2106,
      "##travers": 2107,
      "##spon": 2108,
      "##indices": 2109,
      "Explanation: We ": 2110,
      "##top": 2111,
      "##count the ": 2112,
      "##\"],[": 2113,
      "##'a": 2114,
      "##eng": 2115,
      "##List[str": 2116,
      "##-1.\r\n": 2117,
      "##have the ": 2118,
      "##to_": 2119,
      "##List[int]:\r\n": 2120,
      "##shortest ": 2121,
      "4. **": 2122,
      "##les ": 2123,
      "##2 and ": 2124,
      "-10": 2125,
      "##group ": 2126,
      "##out": 2127,
      "##.val": 2128,
      "##\"ab": 2129,
      "Output: f": 2130,
      "##query": 2131,
      "##i\r\n": 2132,
      "##use the ": 2133,
      "##prefix_sum": 2134,
      "##hal": 2135,
      "##edges ": 2136,
      "##MOD": 2137,
      "##umer": 2138,
      "- The ": 2139,
      "Output: false\r\n": 2140,
      "##ary": 2141,
      "##ba": 2142,
      "##Val": 2143,
      "##divis": 2144,
      "##square": 2145,
      "##negative ": 2146,
      "##ince the ": 2147,
      "##square ": 2148,
      "##time complexity ": 2149,
      "##8\r\n": 2150,
      "##binary search ": 2151,
      "##. It then ": 2152,
      "##queue": 2153,
      "##vow": 2154,
      "##4],[": 2155,
      "##ect": 2156,
      "Explanation: \r\n": 2157,
      "##window": 2158,
      "##pic": 2159,
      "##7.\r\n": 2160,
      "##O(n": 2161,
      "##dynamic programming ": 2162,
      "##Po": 2163,
      "##Each ": 2164,
      "##wher": 2165,
      "##\" and ": 2166,
      "##an array of ": 2167,
      "##your ": 2168,
      "##, c": 2169,
      "##2 * ": 2170,
      "##lexi": 2171,
      "##inta": 2172,
      "##mon": 2173,
      "##7 ": 2174,
      "##sele": 2175,
      "##enumer": 2176,
      "##tree": 2177,
      "##small": 2178,
      "##approach ensures that ": 2179,
      "##many ": 2180,
      "##-1,": 2181,
      "##correspon": 2182,
      "##enumerate(": 2183,
      "##get": 2184,
      "##when ": 2185,
      "##array is ": 2186,
      "There are ": 2187,
      "##+ 1)\r\n": 2188,
      "##queue ": 2189,
      "##3 + ": 2190,
      "##Ad": 2191,
      "##delet": 2192,
      "##befor": 2193,
      "##query ": 2194,
      "##us ": 2195,
      "##count of ": 2196,
      "##between the ": 2197,
      "##Finally": 2198,
      "##choose ": 2199,
      "##Bob ": 2200,
      "##\"],[\"": 2201,
      "##s):\r\n": 2202,
      "##[3,": 2203,
      "##4]\r\n": 2204,
      "##Co": 2205,
      "##8 ": 2206,
      "##s of length ": 2207,
      "##ful": 2208,
      "##alread": 2209,
      "##algorith": 2210,
      "##cograph": 2211,
      "##event": 2212,
      "##Find the ": 2213,
      "##ort the ": 2214,
      "##lexicograph": 2215,
      "##sk": 2216,
      "##reach ": 2217,
      "##mainta": 2218,
      "This solution works ": 2219,
      "##obta": 2220,
      "##grid = [": 2221,
      "##count = 0\r\n": 2222,
      "##'1": 2223,
      "##y = ": 2224,
      "##ing_": 2225,
      "##100": 2226,
      "##sorted": 2227,
      "##next_": 2228,
      "Note that ": 2229,
      "##Calculate the ": 2230,
      "##ation of the ": 2231,
      "##ed as ": 2232,
      "##constru": 2233,
      "##minut": 2234,
      "##lock": 2235,
      "##age ": 2236,
      "##Up": 2237,
      "##in `": 2238,
      "##last_": 2239,
      "##denot": 2240,
      "##.e.": 2241,
      "##Output: ": 2242,
      "##n and ": 2243,
      "##log": 2244,
      "##shif": 2245,
      "##ly": 2246,
      "##) to ": 2247,
      "##], k = ": 2248,
      "##[0][": 2249,
      "##True": 2250,
      "num": 2251,
      "##99": 2252,
      "##tional": 2253,
      "##num in ": 2254,
      "##side ": 2255,
      "##.length <= 100\r\n": 2256,
      "This solution uses ": 2257,
      "##up to ": 2258,
      "##how ": 2259,
      "##[i]\r\n": 2260,
      "##abs(": 2261,
      "##found ": 2262,
      "##already ": 2263,
      "##plic": 2264,
      "##ation of ": 2265,
      "##stack ": 2266,
      "##ip": 2267,
      "##c ": 2268,
      "##'0": 2269,
      "##answer is ": 2270,
      "##childr": 2271,
      "##prime ": 2272,
      "##lexicographic": 2273,
      "##Upd": 2274,
      "##Non": 2275,
      "##op ": 2276,
      "##ting ": 2277,
      "##s with ": 2278,
      "##at index ": 2279,
      "##1 - ": 2280,
      "##value": 2281,
      "##fter the ": 2282,
      "##where the ": 2283,
      "##1]": 2284,
      "##sect": 2285,
      "##. H": 2286,
      "Input: grid = [": 2287,
      "##price ": 2288,
      "##column": 2289,
      "##add(": 2290,
      "##sign": 2291,
      "##fore": 2292,
      "##level": 2293,
      "##code ": 2294,
      "##10\r\n": 2295,
      "##has": 2296,
      "##1: ": 2297,
      "##rot": 2298,
      "1 <= s": 2299,
      "##. If the ": 2300,
      "##iterate ": 2301,
      "##inn": 2302,
      "##to store the ": 2303,
      "##* n\r\n": 2304,
      "##indic": 2305,
      "##root = [": 2306,
      "##ide": 2307,
      "##respec": 2308,
      "##times": 2309,
      "##meet": 2310,
      "##**: For each ": 2311,
      "##graph[": 2312,
      "##city ": 2313,
      "##a, b": 2314,
      "##23": 2315,
      "##) // ": 2316,
      "##val = ": 2317,
      "Input: root = [": 2318,
      "##counter": 2319,
      "##we return ": 2320,
      "##vel ": 2321,
      "##print(": 2322,
      "##Optional": 2323,
      "##float('inf'": 2324,
      "##now": 2325,
      "##cost of ": 2326,
      "        # Calculate the ": 2327,
      "##9 ": 2328,
      "##att": 2329,
      "# print(": 2330,
      "##or equal to ": 2331,
      "##[0, ": 2332,
      "##freq": 2333,
      "##fru": 2334,
      "##_index": 2335,
      "##e a ": 2336,
      "##**:\r\n": 2337,
      "##shown that ": 2338,
      "1 <= n <= 10": 2339,
      "##string.\r\n": 2340,
      "                for ": 2341,
      "##count\r\n": 2342,
      "##line ": 2343,
      "##split ": 2344,
      "##.\",\".\",\"": 2345,
      "s ": 2346,
      "##d\r\n": 2347,
      "##ll the ": 2348,
      "##reverse": 2349,
      "##smaller ": 2350,
      "##aver": 2351,
      "##2: ": 2352,
      "##thir": 2353,
      "##increasing ": 2354,
      "##(1, ": 2355,
      "##`s": 2356,
      "##[j] ": 2357,
      "Input: nums = [1,2,": 2358,
      "##close": 2359,
      "##strictly ": 2360,
      "##On": 2361,
      "##bound": 2362,
      "Explanation: There are ": 2363,
      "##fri": 2364,
      "##ger ": 2365,
      "##A ": 2366,
      "##target = ": 2367,
      "##be the ": 2368,
      "##t is ": 2369,
      "##recursi": 2370,
      "##or the ": 2371,
      "##always ": 2372,
      "##cho": 2373,
      "##efficient ": 2374,
      "##returns the ": 2375,
      "##task": 2376,
      "##lead": 2377,
      "##[i] <= 10": 2378,
      "##ce.\r\n": 2379,
      "##possible": 2380,
      "##solute ": 2381,
      "##. You are ": 2382,
      "##component": 2383,
      "##False": 2384,
      "##graph ": 2385,
      "For example, ": 2386,
      "##leet": 2387,
      "##vowel": 2388,
      "##5],[": 2389,
      "##initi": 2390,
      "##ant": 2391,
      "##led ": 2392,
      "##that can be ": 2393,
      "##absolute ": 2394,
      "##medi": 2395,
      "##form a ": 2396,
      "You are given a 0-indexed ": 2397,
      "Th": 2398,
      "##k <= ": 2399,
      "##'\r\n": 2400,
      "        dp": 2401,
      "##room": 2402,
      "##dif": 2403,
      "        # F": 2404,
      "##visited ": 2405,
      "##ail": 2406,
      "##dest": 2407,
      "##color ": 2408,
      "##divisible ": 2409,
      "##connect": 2410,
      "##uti": 2411,
      "##bc": 2412,
      "##arrays ": 2413,
      "##s = 0\r\n": 2414,
      "##partition": 2415,
      "##until ": 2416,
      "##7, ": 2417,
      "##lea": 2418,
      "##10 ": 2419,
      "##them": 2420,
      "##**: The ": 2421,
      "##follows:\r\n": 2422,
      "##1]]\r\n": 2423,
      "##0 or ": 2424,
      "##ket": 2425,
      "##remaind": 2426,
      "##of": 2427,
      "##cir": 2428,
      "##k, ": 2429,
      "##':\r\n": 2430,
      "##sim": 2431,
      "##suffi": 2432,
      "##that is ": 2433,
      "##= []\r\n": 2434,
      "        return result\r\n": 2435,
      "##binary tree ": 2436,
      "##defaultdict(": 2437,
      "##gi": 2438,
      "##exce": 2439,
      "##from 0 to ": 2440,
      "##[0]": 2441,
      "##area ": 2442,
      "##power ": 2443,
      "##))  # ": 2444,
      "##caten": 2445,
      "##approach:\r\n": 2446,
      "##class ": 2447,
      "##BFS": 2448,
      "##cover": 2449,
      "##if it ": 2450,
      "        # Iterate ": 2451,
      "##i and ": 2452,
      "##linked ": 2453,
      "##Use ": 2454,
      "##of size ": 2455,
      "## = 1": 2456,
      "##it's ": 2457,
      "##zero ": 2458,
      "        for i in range(1, ": 2459,
      "##factor": 2460,
      "##-by-": 2461,
      "##text": 2462,
      "##s) ": 2463,
      "##[-1": 2464,
      "##th-": 2465,
      "##an empty ": 2466,
      "##equal to the ": 2467,
      "##push": 2468,
      "##step-by-": 2469,
      "##corresponding ": 2470,
      "##0)\r\n": 2471,
      "##cn": 2472,
      "##[x": 2473,
      "##. For each ": 2474,
      "##ating the ": 2475,
      "##top ": 2476,
      "##...": 2477,
      "##peo": 2478,
      "##special ": 2479,
      "##change": 2480,
      "##step-by-step ": 2481,
      "##ry ": 2482,
      "##bit ": 2483,
      "##d, ": 2484,
      "##This ": 2485,
      "##are the ": 2486,
      "##sol.": 2487,
      "##2]": 2488,
      "##cour": 2489,
      "##len(nums": 2490,
      "##right\r\n": 2491,
      "##occur": 2492,
      "##occurrences ": 2493,
      "##divisible by ": 2494,
      "##et ": 2495,
      "##Of": 2496,
      "##ing of ": 2497,
      "##ame": 2498,
      "##1,3,": 2499,
      "##rang": 2500,
      "##ally, ": 2501,
      "##needed to ": 2502,
      "        # Initialize the ": 2503,
      "##2) ": 2504,
      "##rib": 2505,
      "        # St": 2506,
      "##not in ": 2507,
      "##nodes in the ": 2508,
      "##Optional[": 2509,
      "##}\r\n": 2510,
      "##ates": 2511,
      "##. The `": 2512,
      "##within the ": 2513,
      "##part": 2514,
      "##head ": 2515,
      "##third ": 2516,
      "##given the ": 2517,
      "##otherwise": 2518,
      "##ball": 2519,
      "##to a ": 2520,
      "##from 1 to ": 2521,
      "##required to ": 2522,
      "##Ar": 2523,
      "##node.\r\n": 2524,
      "##sequence of ": 2525,
      "##_count[": 2526,
      "##avo": 2527,
      "##require": 2528,
      "##connected ": 2529,
      "##fe": 2530,
      "##mer": 2531,
      "##Pro": 2532,
      "##nums.\r\n": 2533,
      "##s, and ": 2534,
      "##sum is ": 2535,
      "##s[i] = [": 2536,
      "##place ": 2537,
      "##satisf": 2538,
      "##tho": 2539,
      "##appl": 2540,
      "##is the number of ": 2541,
      "##tree.\r\n": 2542,
      "##buil": 2543,
      "##trip": 2544,
      "##subsequences ": 2545,
      "##heap ": 2546,
      "##ct the ": 2547,
      "##set of ": 2548,
      "##beauti": 2549,
      "##\"], ": 2550,
      "##inser": 2551,
      "##board ": 2552,
      "##have a ": 2553,
      "##List[List[int]]) -> int:\r\n": 2554,
      "##& ": 2555,
      "##memo": 2556,
      "##pattern": 2557,
      "# print(sol.": 2558,
      "##leading ": 2559,
      "##(`": 2560,
      "##mask ": 2561,
      "##* 104\r\n": 2562,
      "##means ": 2563,
      "##))  # Output: ": 2564,
      "##se the ": 2565,
      "##k: int) -> int:\r\n": 2566,
      "##50\r\n": 2567,
      "##, which ": 2568,
      "##left\r\n": 2569,
      "##(i.e.": 2570,
      "##1)": 2571,
      "##subtree ": 2572,
      "##approach to ": 2573,
      "##task ": 2574,
      "##way to ": 2575,
      "##(x": 2576,
      "##-1 ": 2577,
      "##'.": 2578,
      "##inct": 2579,
      "##ong ": 2580,
      "##. N": 2581,
      "##s, the ": 2582,
      "##) -> bool:\r\n": 2583,
      "##take ": 2584,
      "##student": 2585,
      "##ax": 2586,
      "        for i in range(n):\r\n": 2587,
      "##player ": 2588,
      "##map": 2589,
      "##) -> List[int]:\r\n": 2590,
      "##' and ": 2591,
      "##.length <= 1000\r\n": 2592,
      "##more than ": 2593,
      "##make the ": 2594,
      "##heapq.": 2595,
      "##].append(": 2596,
      "##, you ": 2597,
      "            max_": 2598,
      "##bitwise ": 2599,
      "##determine the ": 2600,
      "##0.": 2601,
      "##ok": 2602,
      "##[1] ": 2603,
      "##val\r\n": 2604,
      "                \r\n": 2605,
      "##starting from ": 2606,
      "##sli": 2607,
      "##it.\r\n": 2608,
      "##result.append(": 2609,
      "            for i in range(": 2610,
      "##space ": 2611,
      "##overl": 2612,
      "##nd ": 2613,
      "##4] ": 2614,
      "##Calcul": 2615,
      "##] += 1\r\n": 2616,
      "            current_": 2617,
      "##length of ": 2618,
      "                         ": 2619,
      "##left and ": 2620,
      "##initial ": 2621,
      "##hour": 2622,
      "##P ": 2623,
      "##e that the ": 2624,
      "##i - ": 2625,
      "##array\r\n": 2626,
      "        # Cre": 2627,
      "##.length == 2\r\n": 2628,
      "##constraints.\r\n": 2629,
      "##ful ": 2630,
      "##before ": 2631,
      "##e(": 2632,
      "##'t ": 2633,
      "##contain ": 2634,
      "##ed by the ": 2635,
      "##Return the ": 2636,
      "In ": 2637,
      "##tive": 2638,
      "##to keep track of the ": 2639,
      "##(self, s: str": 2640,
      "##complete ": 2641,
      "##how many ": 2642,
      "##lexicographically ": 2643,
      "##     ": 2644,
      "        # The ": 2645,
      "The number of ": 2646,
      "To solve this problem, we need to ": 2647,
      "##Valu": 2648,
      "##cach": 2649,
      "##Num": 2650,
      "##s by ": 2651,
      "##another ": 2652,
      "##diag": 2653,
      "1 <= nums[i] <= 10": 2654,
      "##4,5,": 2655,
      "##[0] = ": 2656,
      "##, we return ": 2657,
      "##corn": 2658,
      "##satisfi": 2659,
      "##decreasing ": 2660,
      "##list.\r\n": 2661,
      "##ure": 2662,
      "##s for ": 2663,
      "##ater": 2664,
      "##solve the ": 2665,
      "##such that the ": 2666,
      "##do not ": 2667,
      "##ing.\r\n": 2668,
      "Explanation: I": 2669,
      "##been ": 2670,
      "        return max_": 2671,
      "##true if ": 2672,
      "##avail": 2673,
      "##found": 2674,
      "##minimum": 2675,
      "##`dp` ": 2676,
      "##heapq.heap": 2677,
      "##6.\r\n": 2678,
      "##ont": 2679,
      "##side": 2680,
      "##es a ": 2681,
      "##wid": 2682,
      "        # If ": 2683,
      "##as follows:\r\n": 2684,
      "##break\r\n": 2685,
      "##redu": 2686,
      "                    # ": 2687,
      "                    return ": 2688,
      "##string is ": 2689,
      "This solution efficiently ": 2690,
      "        # Ch": 2691,
      "##subarrays ": 2692,
      "##should be ": 2693,
      "##per function ": 2694,
      "##3 = ": 2695,
      "##4], ": 2696,
      "        result ": 2697,
      "##concaten": 2698,
      "##length = ": 2699,
      "##0,1,": 2700,
      "##el ": 2701,
      "##mp": 2702,
      "##init": 2703,
      "##`n` ": 2704,
      "##__init": 2705,
      "##unique.\r\n": 2706,
      "##bottom": 2707,
      "##__init__": 2708,
      "##man": 2709,
      "##cent": 2710,
      "##he": 2711,
      "##(i, j": 2712,
      "##5], ": 2713,
      "##child ": 2714,
      "##+ 1\r\n": 2715,
      "##str:\r\n": 2716,
      "##profi": 2717,
      "    def min": 2718,
      "##where each ": 2719,
      "##prime": 2720,
      "##team": 2721,
      "##midd": 2722,
      "##bisect": 2723,
      "##optimal ": 2724,
      "Output: [1,": 2725,
      "Output: 5\r\n": 2726,
      "##][c": 2727,
      "This approach ensures that ": 2728,
      "##achiev": 2729,
      "##algorithm ": 2730,
      "##s2": 2731,
      "##s.append(": 2732,
      "##4 + ": 2733,
      "##elements in the ": 2734,
      "##must be ": 2735,
      "##house": 2736,
      "  ": 2737,
      "Given the ": 2738,
      "##\"0": 2739,
      "##sorted_": 2740,
      "##iterates through the ": 2741,
      "##returns `": 2742,
      "##lab": 2743,
      "##happ": 2744,
      "##initializ": 2745,
      "##num_": 2746,
      "##prefix_": 2747,
      "##house ": 2748,
      "##there is no ": 2749,
      "##join": 2750,
      "##ly.\r\n": 2751,
      "##(n": 2752,
      "##ties ": 2753,
      "##(self, n": 2754,
      "##grid[": 2755,
      "##<< ": 2756,
      "##x n ": 2757,
      "##distinct": 2758,
      "##check if ": 2759,
      "##far": 2760,
      "##mis": 2761,
      "##robo": 2762,
      "                else:\r\n": 2763,
      "##expl": 2764,
      "##s = [[1,": 2765,
      "    def max": 2766,
      "##guar": 2767,
      "##backtrac": 2768,
      "##other": 2769,
      "##.add(": 2770,
      "##(1 ": 2771,
      "##) == ": 2772,
      "##count += 1\r\n": 2773,
      "##build": 2774,
      "##non-empty ": 2775,
      "##specifi": 2776,
      "##false": 2777,
      "##Sort": 2778,
      "##sti": 2779,
      "##sour": 2780,
      "##2)": 2781,
      "##old": 2782,
      "##cess": 2783,
      "##consist ": 2784,
      "##compute the ": 2785,
      "##split": 2786,
      "##occurrence ": 2787,
      "##respectivel": 2788,
      "##.next": 2789,
      "##1].\r\n": 2790,
      "##subset": 2791,
      "##we have ": 2792,
      "##yi": 2793,
      "##oriz": 2794,
      "##appears ": 2795,
      "##have the same ": 2796,
      "##Arra": 2797,
      "Each ": 2798,
      "##re ": 2799,
      "##dur": 2800,
      "##> 0:\r\n": 2801,
      "    def find": 2802,
      "##2, 3, ": 2803,
      "##pointer ": 2804,
      "##reach the ": 2805,
      "##jump": 2806,
      "It can be shown that ": 2807,
      "##__init__(self, ": 2808,
      "##`x": 2809,
      "##Otherwise": 2810,
      "##1 <= ": 2811,
      "##that": 2812,
      "##within ": 2813,
      "##change ": 2814,
      "##keeps ": 2815,
      "##ll": 2816,
      "##ward": 2817,
      "##tern": 2818,
      "##maximum possible ": 2819,
      "            # Check ": 2820,
      "##there are no ": 2821,
      "##also given ": 2822,
      "##limit": 2823,
      "##Operation": 2824,
      "##Com": 2825,
      "##tigu": 2826,
      "##dec": 2827,
      "##) is ": 2828,
      "Input: arr": 2829,
      "##char in ": 2830,
      "##ize the ": 2831,
      "##.length, ": 2832,
      "##at least one ": 2833,
      "##0], ": 2834,
      "##5 + ": 2835,
      "Output: 6\r\n": 2836,
      "##. In ": 2837,
      "##[0])\r\n": 2838,
      "##prices": 2839,
      "##x, y": 2840,
      "##cust": 2841,
      "##Update the ": 2842,
      "##2)\r\n": 2843,
      "## = \"": 2844,
      "##contigu": 2845,
      "##extra": 2846,
      "##end of the ": 2847,
      "##ensuring ": 2848,
      "##n.\r\n": 2849,
      "##0 + ": 2850,
      "##odd": 2851,
      "##flip": 2852,
      "Here's the implement": 2853,
      "##diagon": 2854,
      "##.\\r\r\n": 2855,
      "##ros": 2856,
      "##roun": 2857,
      "##2,1,": 2858,
      "##-1):\r\n": 2859,
      "##element in the ": 2860,
      "##mask": 2861,
      "##exactly one ": 2862,
      "This solution works by ": 2863,
      "##0]]\r\n": 2864,
      "##car": 2865,
      "##cle ": 2866,
      "##([": 2867,
      "##sort()\r\n": 2868,
      "##only one ": 2869,
      "##duplic": 2870,
      "##tical ": 2871,
      "##MOD\r\n": 2872,
      "##divisor": 2873,
      "After ": 2874,
      "##dis": 2875,
      "You are given an integer array ": 2876,
      "        n = len(nums)\r\n": 2877,
      "##lac": 2878,
      "##node, ": 2879,
      "##ill": 2880,
      "##energ": 2881,
      "##pair of ": 2882,
      "##based on the ": 2883,
      "##average ": 2884,
      "        # Check ": 2885,
      "##[4,": 2886,
      "##ante": 2887,
      "##oose ": 2888,
      "##pairs ": 2889,
      "##j - 1": 2890,
      "Return the number of ": 2891,
      "##giv": 2892,
      "##`. The ": 2893,
      "##Pre": 2894,
      "##are not ": 2895,
      "##result = ": 2896,
      "##obstac": 2897,
      "Given a ": 2898,
      "##into a ": 2899,
      "##accord": 2900,
      "##1st ": 2901,
      "##Wh": 2902,
      "##initial": 2903,
      "##seen": 2904,
      "##coul": 2905,
      "Output: -1\r\n": 2906,
      "##represent ": 2907,
      "##stones ": 2908,
      "##guarante": 2909,
      "##custom": 2910,
      "##uer": 2911,
      "##--": 2912,
      "##_to_": 2913,
      "##ance": 2914,
      "##level ": 2915,
      "##. For ": 2916,
      "##exp": 2917,
      "##s = [\"": 2918,
      "##\" -> ": 2919,
      "##server": 2920,
      "##sorted in ": 2921,
      "##product": 2922,
      "##destin": 2923,
      "All the ": 2924,
      "##Per": 2925,
      "##Uni": 2926,
      "##es, ": 2927,
      "##for _ in range(": 2928,
      "Explanation: A": 2929,
      "##segment": 2930,
      "##avoid ": 2931,
      "##contiguous ": 2932,
      "##dat": 2933,
      "##. Finally": 2934,
      "##added ": 2935,
      "##type ": 2936,
      "        # Coun": 2937,
      "##permutation": 2938,
      "##orizont": 2939,
      "##vari": 2940,
      "##dow": 2941,
      "##land": 2942,
      "##sy": 2943,
      "##2].\r\n": 2944,
      "##→ ": 2945,
      "## = [1,": 2946,
      "##cannot be ": 2947,
      "##`i` ": 2948,
      "##could ": 2949,
      "##gcd": 2950,
      "##=0, ": 2951,
      "##AN": 2952,
      "##1 is ": 2953,
      "##two": 2954,
      "##paren": 2955,
      "##process ": 2956,
      "##defaultdict\r\n": 2957,
      "##maximum": 2958,
      "##lam": 2959,
      "##2nd ": 2960,
      "##ster": 2961,
      "##is either ": 2962,
      "##` function ": 2963,
      "##empty": 2964,
      "##1],[1,": 2965,
      "##consisting of ": 2966,
      "##Resul": 2967,
      "##worker": 2968,
      "##n:\r\n": 2969,
      "##not": 2970,
      "                current_": 2971,
      "##part ": 2972,
      "You are given two ": 2973,
      "##k = 2\r\n": 2974,
      "##(0, 0": 2975,
      "##may be ": 2976,
      "##cycle": 2977,
      "##.pop": 2978,
      "##stic": 2979,
      "##we": 2980,
      "##moun": 2981,
      "##as a ": 2982,
      "##lower ": 2983,
      "##back ": 2984,
      "##edges = [": 2985,
      "Explanation: We can ": 2986,
      "##de the ": 2987,
      "##25": 2988,
      "##stat": 2989,
      "##. Each ": 2990,
      "##positive integer ": 2991,
      "##null,null,": 2992,
      "##(self, nums: List[int]) -> int:\r\n": 2993,
      "        # Create a ": 2994,
      "##Numb": 2995,
      "##Array": 2996,
      "##ima": 2997,
      "##cc": 2998,
      "##in_": 2999,
      "##of all ": 3000,
      "##2 is ": 3001,
      "##by the ": 3002,
      "##-1]\r\n": 3003,
      "##idea ": 3004,
      "##leetcode": 3005,
      "This approach ensures that we ": 3006,
      "##ad ": 3007,
      "##table ": 3008,
      "##horizont": 3009,
      "##32": 3010,
      "##3: ": 3011,
      "##4].\r\n": 3012,
      "##= (": 3013,
      "##[0]\r\n": 3014,
      "##move the ": 3015,
      "##j < ": 3016,
      "##vely ": 3017,
      "##pile": 3018,
      "This solution uses dynamic programming ": 3019,
      "##four ": 3020,
      "##so": 3021,
      "##]` ": 3022,
      "##subtre": 3023,
      "##000": 3024,
      "##form the ": 3025,
      "##Defini": 3026,
      "#     ": 3027,
      "##)` ": 3028,
      "##5] ": 3029,
      "##proper": 3030,
      "            if not ": 3031,
      "Return the minimum number of ": 3032,
      "# class ": 3033,
      "# Defini": 3034,
      "##neede": 3035,
      "##depth ": 3036,
      "##Time": 3037,
      "##generated ": 3038,
      "#     def ": 3039,
      "# Definition ": 3040,
      "##fit": 3041,
      "##beg": 3042,
      "##card": 3043,
      "##^ ": 3044,
      "##=None": 3045,
      "##DP ": 3046,
      "        min_": 3047,
      "            elif ": 3048,
      "##nums:\r\n": 3049,
      "#         self.val = ": 3050,
      "##frequency of each ": 3051,
      "##weight": 3052,
      "##children": 3053,
      "#     def __init__(self, ": 3054,
      "##Sear": 3055,
      "##1] = ": 3056,
      "##impossible to ": 3057,
      "                max_": 3058,
      "##upper": 3059,
      "##starts ": 3060,
      "##[5,": 3061,
      "##any number of ": 3062,
      "##track of ": 3063,
      "##increment": 3064,
      "        if not ": 3065,
      "##cells ": 3066,
      "##Str": 3067,
      "##[i][j] = ": 3068,
      "##in the range [1, ": 3069,
      "##balanc": 3070,
      "##count the number of ": 3071,
      "##diff ": 3072,
      "##middle ": 3073,
      "##join(": 3074,
      "##=None):\r\n": 3075,
      "##dge": 3076,
      "##lay": 3077,
      "##\"1": 3078,
      "##es to ": 3079,
      "    def count": 3080,
      "##minimum cost ": 3081,
      "##s that can be ": 3082,
      "##triang": 3083,
      "##large ": 3084,
      "                            ": 3085,
      "##s1": 3086,
      "##k-": 3087,
      "##[:": 3088,
      "##), len(": 3089,
      "##room ": 3090,
      "##non-decreasing ": 3091,
      "##prev_": 3092,
      "##through each ": 3093,
      "##idea is to ": 3094,
      "##fac": 3095,
      "##m = ": 3096,
      "##\\) ": 3097,
      "##ong": 3098,
      "##art ": 3099,
      "##simul": 3100,
      "##val=0, ": 3101,
      "##is the maximum ": 3102,
      "            # If ": 3103,
      "##sequence": 3104,
      "##elements in ": 3105,
      "##set to ": 3106,
      "##(self, nums: List[int], ": 3107,
      "##keeps track of the ": 3108,
      "#         self.val = val\r\n": 3109,
      "#     def __init__(self, val=0, ": 3110,
      "##6]\r\n": 3111,
      "##ying ": 3112,
      "##deque": 3113,
      "##[i-1": 3114,
      "##ous": 3115,
      "##set(": 3116,
      "##n - 1\r\n": 3117,
      "##using a ": 3118,
      "##sorted(": 3119,
      "##(i.e., ": 3120,
      "##game ": 3121,
      "##20": 3122,
      "##ency ": 3123,
      "##red": 3124,
      "##n == ": 3125,
      "##] - ": 3126,
      "##of the current ": 3127,
      "Input: word": 3128,
      "##number is ": 3129,
      "##show": 3130,
      "##words ": 3131,
      "##there is a ": 3132,
      "##power": 3133,
      "##closest ": 3134,
      "##was ": 3135,
      "##1:": 3136,
      "##'b": 3137,
      "##altern": 3138,
      "##nums and ": 3139,
      "##10, ": 3140,
      "##2,4,": 3141,
      "##ap ": 3142,
      "- We ": 3143,
      "##moving ": 3144,
      "##only of ": 3145,
      "##[i].length\r\n": 3146,
      "##checking ": 3147,
      "##binary represent": 3148,
      "        def dfs(": 3149,
      "##\\( ": 3150,
      "1 <= nums.length <= 105\r\n": 3151,
      "##beautiful ": 3152,
      "Ch": 3153,
      "##k:\r\n": 3154,
      "##Mo": 3155,
      "##rear": 3156,
      "##get the ": 3157,
      "##nums[0] ": 3158,
      "##assign": 3159,
      "##\" is ": 3160,
      "##representing the ": 3161,
      "##List[List[int]], ": 3162,
      "##neighbor ": 3163,
      "##i + 1, ": 3164,
      "##j, ": 3165,
      "##j = ": 3166,
      "##ones ": 3167,
      "##once ": 3168,
      "##d = ": 3169,
      "##arri": 3170,
      "##10^": 3171,
      "##asc": 3172,
      "##ely ": 3173,
      "        # Find the ": 3174,
      "##000\r\n": 3175,
      "##has the ": 3176,
      "##grid[i][j] ": 3177,
      "##Node.val": 3178,
      "##2,3],[": 3179,
      "##AND ": 3180,
      "##us the ": 3181,
      "##want ": 3182,
      "##store ": 3183,
      "##at each ": 3184,
      "##ends ": 3185,
      "##elements of ": 3186,
      "##start, ": 3187,
      "##check": 3188,
      "##: str, ": 3189,
      "m == ": 3190,
      "##ef": 3191,
      "##water ": 3192,
      "##To": 3193,
      "##addition": 3194,
      "        for i, ": 3195,
      "##row and ": 3196,
      "Input: nums = [1,": 3197,
      "##values of ": 3198,
      "##* (n ": 3199,
      "##. A ": 3200,
      "##candies ": 3201,
      "##entire ": 3202,
      "##Cost": 3203,
      "1\r\n": 3204,
      "All ": 3205,
      "##e: ": 3206,
      "##s.length <= ": 3207,
      "##ali": 3208,
      "##rac": 3209,
      "##ite": 3210,
      "##101": 3211,
      "##perform ": 3212,
      "##ight ": 3213,
      "##arr2": 3214,
      "##size": 3215,
      "##tree is ": 3216,
      "##erefore": 3217,
      "##inclusi": 3218,
      "##0,0,0,0,0,0,0,0,": 3219,
      "##\" and \"": 3220,
      "##th-first ": 3221,
      "##bd": 3222,
      "##ST": 3223,
      "##,\r\n": 3224,
      "##Bu": 3225,
      "##alse ": 3226,
      "##separ": 3227,
      "##in any ": 3228,
      "##subtra": 3229,
      "##head": 3230,
      "            return 0\r\n": 3231,
      "##if the current ": 3232,
      "   - We ": 3233,
      "##candid": 3234,
      "##help": 3235,
      "##less than or equal to ": 3236,
      "##blu": 3237,
      "##clu": 3238,
      "##s.length\r\n": 3239,
      "##2]]\r\n": 3240,
      "##--> ": 3241,
      "##7]\r\n": 3242,
      "##stone ": 3243,
      "##rid": 3244,
      "##ough": 3245,
      "Input: num": 3246,
      "##s in a ": 3247,
      "##s(self, nums": 3248,
      "##length of the longest ": 3249,
      "##checks if ": 3250,
      "##valid_": 3251,
      "##2D integer array ": 3252,
      "##capac": 3253,
      "##Optional[TreeNode": 3254,
      "imp": 3255,
      "##ever": 3256,
      "##s**: ": 3257,
      "##(2, ": 3258,
      "##to be ": 3259,
      "##mapp": 3260,
      "##) if ": 3261,
      "## = 10": 3262,
      "##number of ways to ": 3263,
      "##s = []\r\n": 3264,
      "##count[": 3265,
      "##equi": 3266,
      "##pairs of ": 3267,
      "##number\r\n": 3268,
      "##queries = [": 3269,
      "##combination": 3270,
      "##DFS ": 3271,
      "##List[str]": 3272,
      "##now ": 3273,
      "##people ": 3274,
      "##left and right ": 3275,
      "import ": 3276,
      "There ": 3277,
      "##r, c": 3278,
      "##mi": 3279,
      "##down ": 3280,
      "##win": 3281,
      "##3]": 3282,
      "##')\r\n": 3283,
      "##Dist": 3284,
      "##into the ": 3285,
      "##, where ": 3286,
      "##ator": 3287,
      "##ListNode": 3288,
      "##== '": 3289,
      "##2 - ": 3290,
      "##ement": 3291,
      "##are:\r\n": 3292,
      "##directed ": 3293,
      "##original": 3294,
      "##triplet": 3295,
      "##leading zero": 3296,
      "##th-first search ": 3297,
      "##mone": 3298,
      "##3 and ": 3299,
      "##element is ": 3300,
      "Given a string ": 3301,
      "##helper function ": 3302,
      "##indicates ": 3303,
      "##in-": 3304,
      "##times.\r\n": 3305,
      "##formed ": 3306,
      "##node.right": 3307,
      "##correct ": 3308,
      "##continue\r\n": 3309,
      "##consist of ": 3310,
      "##bits ": 3311,
      "##job": 3312,
      "##1)\r\n": 3313,
      "##regi": 3314,
      "##tiv": 3315,
      "##state ": 3316,
      "##value of the ": 3317,
      "##nums is ": 3318,
      "##​​​​": 3319,
      "##Pair": 3320,
      "##lru": 3321,
      "##s[i][": 3322,
      "##Word": 3323,
      "##_cach": 3324,
      "##inv": 3325,
      "##ences": 3326,
      "##umul": 3327,
      "##ation**: We ": 3328,
      "##whe": 3329,
      "1 <= k <= ": 3330,
      "##one of the ": 3331,
      "##rule": 3332,
      "##parent ": 3333,
      "##. If it ": 3334,
      "##set()\r\n": 3335,
      "##descending ": 3336,
      "##memoiz": 3337,
      "##mounta": 3338,
      "##lru_cach": 3339,
      "##ies": 3340,
      "##after the ": 3341,
      "##twi": 3342,
      "##ck": 3343,
      "##Tri": 3344,
      "##8, ": 3345,
      "##rest ": 3346,
      "##a given ": 3347,
      "##m x n ": 3348,
      "##= [0] ": 3349,
      "Output: 2": 3350,
      "##result is ": 3351,
      "You are given a string ": 3352,
      "##, we can use a ": 3353,
      "##over each ": 3354,
      "##time complexity of ": 3355,
      "##obtain": 3356,
      "##robot ": 3357,
      "##k <= 10": 3358,
      "##es of ": 3359,
      "1 <= n <= ": 3360,
      "##box ": 3361,
      "##larger ": 3362,
      "##hash": 3363,
      "        # Step ": 3364,
      "##false ": 3365,
      "##r ": 3366,
      "##wri": 3367,
      "##`, we ": 3368,
      "##[2, ": 3369,
      "##3].\r\n": 3370,
      "##stam": 3371,
      "##+ 1, ": 3372,
      "##) -> str:\r\n": 3373,
      "##1111": 3374,
      "##update the ": 3375,
      "##prefix sum": 3376,
      "##considered ": 3377,
      "##us to ": 3378,
      "##x\r\n": 3379,
      "##bloc": 3380,
      "##3r": 3381,
      "##- 1, ": 3382,
      "##],\r\n": 3383,
      "##s, return ": 3384,
      "##solution:\r\n": 3385,
      "        # Con": 3386,
      "##substrings ": 3387,
      "##want to ": 3388,
      "There is ": 3389,
      "##()": 3390,
      "##Fir": 3391,
      "##] and ": 3392,
      "##nums[i]": 3393,
      "##109 + ": 3394,
      "##3,1,": 3395,
      "##\",\"b": 3396,
      "##odd_": 3397,
      "##% 2 ": 3398,
      "##convert": 3399,
      "##construct": 3400,
      "##r][c": 3401,
      "##bag": 3402,
      "##[root": 3403,
      "##ines": 3404,
      "##ure ": 3405,
      "##ation:\r\n": 3406,
      "##profit": 3407,
      "##1, and ": 3408,
      "##cess ": 3409,
      "##character in the ": 3410,
      "##over the ": 3411,
      "##None, ": 3412,
      "##ascending ": 3413,
      "##eve ": 3414,
      "##der ": 3415,
      "##is \"": 3416,
      "##][j": 3417,
      "##ility ": 3418,
      "##present ": 3419,
      "##s[j": 3420,
      "##uses ": 3421,
      "##uses a ": 3422,
      "##steps ": 3423,
      "##highest ": 3424,
      "##allows ": 3425,
      "##maintain": 3426,
      "Here ": 3427,
      "##ban": 3428,
      "##9, ": 3429,
      "##seat": 3430,
      "##for all ": 3431,
      "##spe": 3432,
      "##removing ": 3433,
      "from collections import defaultdict\r\n": 3434,
      "##oy": 3435,
      "##ball ": 3436,
      "        total_": 3437,
      "##n + 1):\r\n": 3438,
      "##provi": 3439,
      "##forma": 3440,
      "##first_": 3441,
      "##dp(": 3442,
      "##arr1": 3443,
      "##subsequence of ": 3444,
      "##rectangle": 3445,
      "##segment ": 3446,
      "##sentence": 3447,
      "##O(n) ": 3448,
      "##'.join(": 3449,
      "        result = []\r\n": 3450,
      "##bisect_": 3451,
      "##backtrack": 3452,
      "##parenthe": 3453,
      "Re": 3454,
      "##tup": 3455,
      "##calle": 3456,
      "##city": 3457,
      "##(DFS": 3458,
      "##11,": 3459,
      "##Bin": 3460,
      "##| ": 3461,
      "##ance ": 3462,
      "        current_": 3463,
      "##ell": 3464,
      "##rows ": 3465,
      "##arr[": 3466,
      "##queries ": 3467,
      "##takes ": 3468,
      "##taken ": 3469,
      "##Counter(": 3470,
      "We can ": 3471,
      "##rectangle ": 3472,
      "##amount of ": 3473,
      "##modulo 109 + ": 3474,
      "##) // 2\r\n": 3475,
      "##sliding ": 3476,
      "##y_": 3477,
      "##_count = ": 3478,
      "##in each ": 3479,
      "##number in the ": 3480,
      "##lement ": 3481,
      "##aba": 3482,
      "##adding ": 3483,
      "##. If no ": 3484,
      "##) % MOD\r\n": 3485,
      "##shift": 3486,
      "##i)\r\n": 3487,
      "##] != ": 3488,
      "        # Di": 3489,
      "##hav": 3490,
      "##Counter\r\n": 3491,
      "##queue.append(": 3492,
      "##otherwise.\r\n": 3493,
      "##6],[": 3494,
      "##le the ": 3495,
      "##2.": 3496,
      "##\", and ": 3497,
      "##ones": 3498,
      "##of its ": 3499,
      "##ing to the ": 3500,
      "##] * ": 3501,
      "##ite ": 3502,
      "        # T": 3503,
      "##ed, ": 3504,
      "##3,3,": 3505,
      "    def minimum": 3506,
      "##operations.\r\n": 3507,
      "##they are ": 3508,
      "The number of nodes in the ": 3509,
      "##9.\r\n": 3510,
      "##; ": 3511,
      "##leav": 3512,
      "##elements.\r\n": 3513,
      "##distrib": 3514,
      "##represents a ": 3515,
      "##tic ": 3516,
      "##score of ": 3517,
      "##repeat": 3518,
      "##land ": 3519,
      "##1's ": 3520,
      "##')": 3521,
      "##alph": 3522,
      "##prov": 3523,
      "##rank": 3524,
      "##apping ": 3525,
      "##keep track of ": 3526,
      "##used to ": 3527,
      "##would be ": 3528,
      "        # Fil": 3529,
      "An ": 3530,
      "##ist ": 3531,
      "##e_": 3532,
      "##LC": 3533,
      "##who ": 3534,
      "##person": 3535,
      "##degree ": 3536,
      "##expression": 3537,
      "Here is the ": 3538,
      "##i <= ": 3539,
      "##4 = ": 3540,
      "##\"c": 3541,
      "##) * ": 3542,
      "##) / ": 3543,
      "##itself": 3544,
      "##of the array ": 3545,
      "##need ": 3546,
      "1 <= m, ": 3547,
      "##ffer": 3548,
      "##list(": 3549,
      "##placed ": 3550,
      "Given an integer array ": 3551,
      "##palindrome ": 3552,
      "##beaut": 3553,
      "##jump ": 3554,
      "        # Count the ": 3555,
      "##called ": 3556,
      "##Leng": 3557,
      "##reque": 3558,
      "##ques": 3559,
      "##1 (": 3560,
      "##x + ": 3561,
      "##from `": 3562,
      "You can ": 3563,
      "##length\r\n": 3564,
      "##containing ": 3565,
      "##greater than the ": 3566,
      "##stones": 3567,
      "##chos": 3568,
      "##width ": 3569,
      "##false.\r\n": 3570,
      "\t\r\n": 3571,
      "5. **": 3572,
      "##go ": 3573,
      "##1\",\"": 3574,
      "##s where ": 3575,
      "##encounter": 3576,
      "        count = 0\r\n": 3577,
      "##numer": 3578,
      "##robot": 3579,
      "##in enumerate(": 3580,
      "##s, we ": 3581,
      "##minimum possible ": 3582,
      "##marked ": 3583,
      "##`nums` ": 3584,
      "##.next\r\n": 3585,
      "##pt": 3586,
      "##1.": 3587,
      "##, or ": 3588,
      "##turn": 3589,
      "##log ": 3590,
      "##exclu": 3591,
      "##[0], ": 3592,
      "##string\r\n": 3593,
      "##.length <= 104\r\n": 3594,
      "##increas": 3595,
      "##adjacency ": 3596,
      "##'a' ": 3597,
      "##still ": 3598,
      "##ai, ": 3599,
      "##s[i": 3600,
      "##[]\r\n": 3601,
      "##num\r\n": 3602,
      "##at a ": 3603,
      "##**9 + ": 3604,
      "        for num in ": 3605,
      "            # Update the ": 3606,
      "##operation, ": 3607,
      "##buc": 3608,
      "##list)\r\n": 3609,
      "##numbered ": 3610,
      "##n - 1, ": 3611,
      "##reverse ": 3612,
      "##achieve ": 3613,
      "##corner ": 3614,
      "##3rd ": 3615,
      "##0 = ": 3616,
      "##bri": 3617,
      "##ho": 3618,
      "##\"b": 3619,
      "##\"aa": 3620,
      "##_map": 3621,
      "##BST": 3622,
      "##Max": 3623,
      "##low ": 3624,
      "##][n": 3625,
      "        return count\r\n": 3626,
      "##node = ": 3627,
      "##palindromic ": 3628,
      "##limit ": 3629,
      "##student ": 3630,
      "##float('inf')\r\n": 3631,
      "##Use a ": 3632,
      "##profit ": 3633,
      "##pea": 3634,
      "##ward ": 3635,
      "##rece": 3636,
      "##in word": 3637,
      "##quent ": 3638,
      "##to the right ": 3639,
      "##s of size ": 3640,
      "            # Calculate the ": 3641,
      "##distances ": 3642,
      "##_sum = ": 3643,
      "##TreeNode:\r\n": 3644,
      "s consists of ": 3645,
      "##of_": 3646,
      "##explore ": 3647,
      "##ew": 3648,
      "##wa": 3649,
      "##AA": 3650,
      "##. Otherwise": 3651,
      "##ols ": 3652,
      "##value\r\n": 3653,
      "##len(s": 3654,
      "##left=": 3655,
      "##tok": 3656,
      "##usage": 3657,
      "##list\r\n": 3658,
      "##nums becomes ": 3659,
      "##finding the ": 3660,
      "##interse": 3661,
      "##difference between the ": 3662,
      "##-1, -1):\r\n": 3663,
      "##pattern ": 3664,
      "##half": 3665,
      "##Add the ": 3666,
      "##cnt": 3667,
      "##Result": 3668,
      "##beginn": 3669,
      "##Search ": 3670,
      "##modulo 109 + 7.\r\n": 3671,
      "##mes": 3672,
      "##base ": 3673,
      "##teg": 3674,
      "##2] = ": 3675,
      "##13": 3676,
      "##Python": 3677,
      "##, then ": 3678,
      "##or more ": 3679,
      "##in this ": 3680,
      "##== 1:\r\n": 3681,
      "##[i] - ": 3682,
      "##upper ": 3683,
      "            return False\r\n": 3684,
      "##prefix sum ": 3685,
      "##s[i].length == 2\r\n": 3686,
      "#         self.right = ": 3687,
      "#         self.left = ": 3688,
      "##for a binary tree ": 3689,
      "##One ": 3690,
      "##building": 3691,
      "##block": 3692,
      "##`(": 3693,
      "##GC": 3694,
      "##ord ": 3695,
      "##cha": 3696,
      "##ator ": 3697,
      "##returne": 3698,
      "##of the same ": 3699,
      "##nums[j": 3700,
      "##price": 3701,
      "##directly ": 3702,
      "##('a": 3703,
      "##Time ": 3704,
      "##worker ": 3705,
      "##coordinates ": 3706,
      "##expression ": 3707,
      "##recursively ": 3708,
      "##leaf ": 3709,
      "##available ": 3710,
      "##Union": 3711,
      "# class TreeNode:\r\n": 3712,
      "# Definition for a binary tree ": 3713,
      "# Definition for a binary tree node.\r\n": 3714,
      "##bas": 3715,
      "##dp ": 3716,
      "##20,": 3717,
      "##an\r\n": 3718,
      "##difi": 3719,
      "##in the same ": 3720,
      "##atest ": 3721,
      "##sign ": 3722,
      "##depth": 3723,
      "##weight ": 3724,
      "##half ": 3725,
      "##None, right": 3726,
      "##alphab": 3727,
      "##left=None, right": 3728,
      "##Sw": 3729,
      "##slo": 3730,
      "##s.length == ": 3731,
      "##15": 3732,
      "##-2,": 3733,
      "##al_": 3734,
      "##num)\r\n": 3735,
      "##lever": 3736,
      "##que\r\n": 3737,
      "##fig": 3738,
      "##loop ": 3739,
      "Input: nums1": 3740,
      "##ord(": 3741,
      "##s, return the ": 3742,
      "##mem": 3743,
      "##row, ": 3744,
      "##cand": 3745,
      "##s that are ": 3746,
      "Return the maximum ": 3747,
      "##2],[1,": 3748,
      "##because the ": 3749,
      "Here's the step-by-step ": 3750,
      "##data ": 3751,
      "##. Finally, it ": 3752,
      "##Number": 3753,
      "#     def __init__(self, val=0, left=None, right": 3754,
      "#         self.right = right\r\n": 3755,
      "#         self.left = left\r\n": 3756,
      "##tt": 3757,
      "##ce the ": 3758,
      "##2):\r\n": 3759,
      "##15,": 3760,
      "        self.": 3761,
      "        m, ": 3762,
      "##under": 3763,
      "##making ": 3764,
      "##node\r\n": 3765,
      "##owever": 3766,
      "##count += ": 3767,
      "##' or ": 3768,
      "##can_": 3769,
      "##order\r\n": 3770,
      "Note: ": 3771,
      "##replace ": 3772,
      "##recursive ": 3773,
      "##satisfy the ": 3774,
      "##building ": 3775,
      "##sliding window ": 3776,
      "#     def __init__(self, val=0, left=None, right=None):\r\n": 3777,
      "##gic": 3778,
      "##et the ": 3779,
      "##0)": 3780,
      "##lc": 3781,
      "##((": 3782,
      "##500\r\n": 3783,
      "##| = ": 3784,
      "##res": 3785,
      "##: List[List[int]]) -> int:\r\n": 3786,
      "##1000": 3787,
      "##ght": 3788,
      "##modifi": 3789,
      "Explanation: You ": 3790,
      "##sum = ": 3791,
      "##index i ": 3792,
      "            # If the ": 3793,
      "        # Sort the ": 3794,
      "##helps in ": 3795,
      "        m, n = len(": 3796,
      "##ele": 3797,
      "##men": 3798,
      "##y\r\n": 3799,
      "##just ": 3800,
      "##2, and ": 3801,
      "##zz": 3802,
      "##Move ": 3803,
      "##ans\r\n": 3804,
      "##to its ": 3805,
      "##and then ": 3806,
      "##a valid ": 3807,
      "##of the ith ": 3808,
      "##1, 2, ": 3809,
      "##[i] is the ": 3810,
      "##next = ": 3811,
      "##buy ": 3812,
      "Given two ": 3813,
      "##ed by a ": 3814,
      "##returned ": 3815,
      "##difference between ": 3816,
      "##requirement": 3817,
      "        # Conver": 3818,
      "##chosen ": 3819,
      "##**9 + 7\r\n": 3820,
      "##leverag": 3821,
      "##s[0] ": 3822,
      "##+1": 3823,
      "##\\text": 3824,
      "##?\r\n": 3825,
      "##s from ": 3826,
      "        an": 3827,
      "##action": 3828,
      "##necess": 3829,
      "##** ": 3830,
      "##i == ": 3831,
      "##time, ": 3832,
      "##ilar": 3833,
      "##\", k = ": 3834,
      "##value is ": 3835,
      "##), (0, ": 3836,
      "##is a contiguous ": 3837,
      "##number.\r\n": 3838,
      "##... ": 3839,
      "##non-negative ": 3840,
      "##starting from the ": 3841,
      "##`k`": 3842,
      "##, return it ": 3843,
      "##123": 3844,
      "##unique_": 3845,
      "##sentence ": 3846,
      "##thod ": 3847,
      "##\\text{": 3848,
      "##sort ": 3849,
      "##road": 3850,
      "##nums, ": 3851,
      "##abo": 3852,
      "##5,6,": 3853,
      "##with the same ": 3854,
      "##due ": 3855,
      "##them.\r\n": 3856,
      "##remainder": 3857,
      "##defaultdict(list)\r\n": 3858,
      "##allows us to ": 3859,
      "##(1,": 3860,
      "##_index ": 3861,
      "##ane": 3862,
      "##of `": 3863,
      "##and a ": 3864,
      "##it to the ": 3865,
      "##i += 1\r\n": 3866,
      "##<= 109\r\n": 3867,
      "##method ": 3868,
      "##'s a ": 3869,
      "##total cost ": 3870,
      "##nums[i] <= ": 3871,
      "##1,1,1,": 3872,
      "##[0,1,": 3873,
      "##ment the ": 3874,
      "##pop(": 3875,
      "##remainder ": 3876,
      "##est": 3877,
      "##:\\r\r\n": 3878,
      "##ves ": 3879,
      "##(1": 3880,
      "##->": 3881,
      "##7],[": 3882,
      "##once": 3883,
      "##seq": 3884,
      "##to efficiently ": 3885,
      "##nums.length\r\n": 3886,
      "##+ nums[": 3887,
      "##peri": 3888,
      "- A": 3889,
      "##sum += ": 3890,
      "##left()\r\n": 3891,
      "##5,4,": 3892,
      "##right:\r\n": 3893,
      "##arr ": 3894,
      "##difference": 3895,
      "##consists ": 3896,
      "##Example ": 3897,
      "##Find ": 3898,
      "                return False\r\n": 3899,
      "##divisor ": 3900,
      "##fruit": 3901,
      "##heal": 3902,
      "##tuple": 3903,
      "##ols import ": 3904,
      "##[node": 3905,
      "##[3, ": 3906,
      "##infin": 3907,
      "##= max(max_": 3908,
      "##dele": 3909,
      "##ploy": 3910,
      "##ack": 3911,
      "##to the next ": 3912,
      "##prices ": 3913,
      "##digits.\r\n": 3914,
      "##x, n": 3915,
      "##finds the ": 3916,
      "##Count": 3917,
      "##node.val": 3918,
      "##[i - ": 3919,
      "##interval ": 3920,
      "##checks if the ": 3921,
      "##boxes ": 3922,
      "##occurrences of each ": 3923,
      "##ploye": 3924,
      "##xi, ": 3925,
      "##blac": 3926,
      "##Siz": 3927,
      "##.sort()\r\n": 3928,
      "##_of_": 3929,
      "##- 1\r\n": 3930,
      "##value.\r\n": 3931,
      "##<= 105\r\n": 3932,
      "##gram ": 3933,
      "##serv": 3934,
      "##become ": 3935,
      "##), (1, ": 3936,
      "##push(": 3937,
      "##rearrang": 3938,
      "##s**: We ": 3939,
      "##j + ": 3940,
      "##{}\r\n": 3941,
      "##s to the ": 3942,
      "##is defin": 3943,
      "## = Solution": 3944,
      "In the ": 3945,
      "Output: 7\r\n": 3946,
      "##[i] + ": 3947,
      "##. In": 3948,
      "##current = ": 3949,
      "This solution iterates ": 3950,
      "##sort(": 3951,
      "##1,2,3,4,": 3952,
      "##domin": 3953,
      "##large, return it ": 3954,
      "##player": 3955,
      "##positive integers ": 3956,
      "##minimiz": 3957,
      "##. Then": 3958,
      "##ince the answer ": 3959,
      "You are given a 0-indexed integer array ": 3960,
      "##BFS ": 3961,
      "##Binary ": 3962,
      "## = Solution()\r\n": 3963,
      "Follow": 3964,
      "##ip ": 3965,
      "##u, ": 3966,
      "##m):\r\n": 3967,
      "##`j": 3968,
      "##3]]\r\n": 3969,
      "##: Optional[TreeNode": 3970,
      "##to make ": 3971,
      "## = [0] ": 3972,
      "##s, it ": 3973,
      "##an integer k": 3974,
      "# Example ": 3975,
      "##O(1) ": 3976,
      "##3,4]\r\n": 3977,
      "##degree": 3978,
      "##traversal ": 3979,
      "##pick ": 3980,
      "##(self, n: int, ": 3981,
      "##usage:\r\n": 3982,
      "# Example usage:\r\n": 3983,
      "edge": 3984,
      "word": 3985,
      "##: ": 3986,
      "##x_": 3987,
      "##ying the ": 3988,
      "##wo ": 3989,
      "##]. The ": 3990,
      "##Th": 3991,
      "        from ": 3992,
      "##] < ": 3993,
      "##at any ": 3994,
      "##ture ": 3995,
      "##qual": 3996,
      "##all elements ": 3997,
      "##add the ": 3998,
      "##1],[0,": 3999,
      "##min(min_": 4000,
      "##O(n ": 4001,
      "##subsequence": 4002,
      "##finish": 4003,
      "##shortest path ": 4004,
      "##iterate through the ": 4005,
      "##friend": 4006,
      "        dp = [": 4007,
      "##..., ": 4008,
      "##that:\r\n": 4009,
      "Input: arr = [": 4010,
      "##Node.val <= 10": 4011,
      "##ake ": 4012,
      "##ose ": 4013,
      "##(\"": 4014,
      "##''.join(": 4015,
      "##deque\r\n": 4016,
      "##unction ": 4017,
      "##s, so ": 4018,
      "##counts the ": 4019,
      "##move": 4020,
      "##consider ": 4021,
      "##element in ": 4022,
      "##triple": 4023,
      "##search": 4024,
      "##thresh": 4025,
      "Note that the ": 4026,
      "##Path": 4027,
      "##lambd": 4028,
      "##false otherwise.\r\n": 4029,
      "##table": 4030,
      "##s. It ": 4031,
      "##(x, y": 4032,
      "##tice ": 4033,
      "##seen ": 4034,
      "##in descending ": 4035,
      "                result.append(": 4036,
      "##abb": 4037,
      "This code ": 4038,
      "##first and ": 4039,
      "##on a ": 4040,
      "##index = ": 4041,
      "##index of the ": 4042,
      "##0,0,0,": 4043,
      "##et's ": 4044,
      "##nums2 = [": 4045,
      "        # Initialize ": 4046,
      "##repeated ": 4047,
      "##balance ": 4048,
      "##bottom ": 4049,
      "##Add ": 4050,
      "##friend ": 4051,
      "##String": 4052,
      "##xor": 4053,
      "##b = ": 4054,
      "##ding the ": 4055,
      "##cros": 4056,
      "##s)": 4057,
      "##jk": 4058,
      "##\"]]\r\n": 4059,
      "            graph[": 4060,
      "##main ": 4061,
      "##pot": 4062,
      "##1,4,": 4063,
      "##fil": 4064,
      "##3,5,": 4065,
      "##any two ": 4066,
      "##tree, ": 4067,
      "##value in the ": 4068,
      "##), where ": 4069,
      "##positions ": 4070,
      "##. If there are ": 4071,
      "##distances": 4072,
      "##, it returns `": 4073,
      "##.length <= 2": 4074,
      "##node.left": 4075,
      "##arith": 4076,
      "##. So ": 4077,
      "##perform the ": 4078,
      "##2D array ": 4079,
      "##meeting": 4080,
      "##occurs ": 4081,
      "##[1], ": 4082,
      "##16": 4083,
      "##19": 4084,
      "###\",\"": 4085,
      "##round": 4086,
      "##and nums[": 4087,
      "##map ": 4088,
      "##an un": 4089,
      "##that are ": 4090,
      "##whose ": 4091,
      "##ed\r\n": 4092,
      "##i != ": 4093,
      "##3 is ": 4094,
      "##such a ": 4095,
      "Given an array of ": 4096,
      "##piec": 4097,
      "##multipl": 4098,
      "##key=": 4099,
      "##None\r\n": 4100,
      "1 <= n <= 105\r\n": 4101,
      "##bottom-": 4102,
      "##source ": 4103,
      "##represent the ": 4104,
      "0\r\n": 4105,
      "##year": 4106,
      "##22": 4107,
      "##5].\r\n": 4108,
      "##for i in range(": 4109,
      "##x < ": 4110,
      "##time.\r\n": 4111,
      "##ctionary ": 4112,
      "##[1,1,": 4113,
      "##s: List[List[int]]) -> int:\r\n": 4114,
      "##root: Optional[TreeNode": 4115,
      "##bitmask ": 4116,
      "##ensures that the ": 4117,
      "##n <= 105\r\n": 4118,
      "##) + (": 4119,
      "##even_": 4120,
      "##changes ": 4121,
      "##full ": 4122,
      "##. Not": 4123,
      "##respectively.\r\n": 4124,
      "##memoization ": 4125,
      "##tr": 4126,
      "##12,": 4127,
      "##colo": 4128,
      "##math": 4129,
      "##compres": 4130,
      "##paint": 4131,
      "##have to ": 4132,
      "##characters.\r\n": 4133,
      "##subarray is ": 4134,
      "##size of the ": 4135,
      "##. This is ": 4136,
      "##example, the ": 4137,
      "##Subarray": 4138,
      "##suffix ": 4139,
      "##missing ": 4140,
      "##(1 << ": 4141,
      "##fa": 4142,
      "##clock": 4143,
      "##An": 4144,
      "##8.\r\n": 4145,
      "##sta": 4146,
      "##] > ": 4147,
      "##ed from ": 4148,
      "##trail": 4149,
      "##direction ": 4150,
      "##remove the ": 4151,
      "##runn": 4152,
      "##children ": 4153,
      "##10^9 + ": 4154,
      "## = 10**9 + 7\r\n": 4155,
      "##returned.\r\n": 4156,
      "##consists only of ": 4157,
      "##large, return it modulo 109 + 7.\r\n": 4158,
      "nan\r\n": 4159,
      "##e. ": 4160,
      "##:  # ": 4161,
      "##bar": 4162,
      "##cut": 4163,
      "##Base ": 4164,
      "##, (": 4165,
      "##enco": 4166,
      "##ation.\r\n": 4167,
      "##) or ": 4168,
      "##10.\r\n": 4169,
      "##fix": 4170,
      "##modu": 4171,
      "##ect ": 4172,
      "                    break\r\n": 4173,
      "##solution is ": 4174,
      "##employe": 4175,
      "##cities ": 4176,
      "##' to ": 4177,
      "##left to ": 4178,
      "##island": 4179,
      "##total of ": 4180,
      "##true": 4181,
      "##Recursi": 4182,
      "##remaining_": 4183,
      "##computes the ": 4184,
      "##: int) -> bool:\r\n": 4185,
      "##minutes ": 4186,
      "##extra ": 4187,
      "##ough ": 4188,
      "##0].\r\n": 4189,
      "##ust": 4190,
      "##cri": 4191,
      "##s.length <= 105\r\n": 4192,
      "##[n": 4193,
      "##', and ": 4194,
      "##stre": 4195,
      "##dist ": 4196,
      "##str(": 4197,
      "##[i] = [": 4198,
      "##with an ": 4199,
      "1 <= word": 4200,
      "##array, ": 4201,
      "##right, ": 4202,
      "##abcd": 4203,
      "##take the ": 4204,
      "##cycle ": 4205,
      "##depth-first search ": 4206,
      "##defines a ": 4207,
      "##Point": 4208,
      "##excep": 4209,
      "##diagonal": 4210,
      "##.pop()\r\n": 4211,
      "##balanced ": 4212,
      "##stamp": 4213,
      "        # Dictionary ": 4214,
      "##tu": 4215,
      "##ppl": 4216,
      "##`)": 4217,
      "##ority ": 4218,
      "##: List[List[int]]": 4219,
      "##] indicates ": 4220,
      "##among ": 4221,
      "##an m x n ": 4222,
      "##nums[i + ": 4223,
      "##with value ": 4224,
      "##node's ": 4225,
      "##s, where ": 4226,
      "##elements\r\n": 4227,
      "##is the minimum ": 4228,
      "##moves": 4229,
      "##are: ": 4230,
      "##ence, the ": 4231,
      "Explanation: There is ": 4232,
      "##convert ": 4233,
      "##heapq.heappush(": 4234,
      "##money ": 4235,
      "##messa": 4236,
      "2\r\n": 4237,
      "3 <= ": 4238,
      "At ": 4239,
      "Alice ": 4240,
      "##ee": 4241,
      "##tex": 4242,
      "##Col": 4243,
      "##: The ": 4244,
      "        MOD": 4245,
      "        result = ": 4246,
      "##chni": 4247,
      "##in nums": 4248,
      "##start = ": 4249,
      "##- 1)\r\n": 4250,
      "##will be the ": 4251,
      "##s[j] ": 4252,
      "##5 * 104\r\n": 4253,
      "##root of a ": 4254,
      "##exists ": 4255,
      "Return true if ": 4256,
      "##pass": 4257,
      "##based on ": 4258,
      "Here's the implementation of the ": 4259,
      "##energy ": 4260,
      "Choose ": 4261,
      "##gard": 4262,
      "##v in ": 4263,
      "##`num": 4264,
      "##Bo": 4265,
      "##is guarante": 4266,
      "##old ": 4267,
      "##are unique.\r\n": 4268,
      "##subset ": 4269,
      "##2,5,": 4270,
      "##x and ": 4271,
      "##[i] <= ": 4272,
      "##[i] == ": 4273,
      "##with_": 4274,
      "##current_sum": 4275,
      "##union": 4276,
      "   - If ": 4277,
      "                return 0\r\n": 4278,
      "##distance between ": 4279,
      "##0-indexed": 4280,
      "##struction": 4281,
      "##. After ": 4282,
      "##integer.\r\n": 4283,
      "##linked list ": 4284,
      "##solve the problem": 4285,
      "##team ": 4286,
      "Follow ": 4287,
      "##flow": 4288,
      "##eled ": 4289,
      "##ug": 4290,
      "##dx, ": 4291,
      "##[2] ": 4292,
      "##8]\r\n": 4293,
      "##unit": 4294,
      "##made ": 4295,
      "##suit": 4296,
      "##an edge ": 4297,
      "##string `s": 4298,
      "    def maximum": 4299,
      "##sorting ": 4300,
      "##node is ": 4301,
      "##result.\r\n": 4302,
      "##second_": 4303,
      "Input: n = 3, ": 4304,
      "##Count ": 4305,
      "##: List[int]) -> List[int]:\r\n": 4306,
      "##handle": 4307,
      "##. You are given ": 4308,
      "##simpl": 4309,
      "##solve the problem ": 4310,
      "##decim": 4311,
      "        MOD = 10**9 + 7\r\n": 4312,
      "On": 4313,
      "##four": 4314,
      "##r, ": 4315,
      "##n)]\r\n": 4316,
      "##xy": 4317,
      "##winn": 4318,
      "##33": 4319,
      "##stop": 4320,
      "##y in ": 4321,
      "##des ": 4322,
      "##play ": 4323,
      "##at indices ": 4324,
      "##s[1] ": 4325,
      "##s: List[int]": 4326,
      "##Inde": 4327,
      "##return\r\n": 4328,
      "##pix": 4329,
      "##determine ": 4330,
      "##choose the ": 4331,
      "##integers.\r\n": 4332,
      "##appear ": 4333,
      "##entif": 4334,
      "##ip(": 4335,
      "##labeled ": 4336,
      "##initially ": 4337,
      "        for num in nums:\r\n": 4338,
      "##evalu": 4339,
      "##6], ": 4340,
      "##kth ": 4341,
      "##14": 4342,
      "##'c": 4343,
      "##then the ": 4344,
      "##once.\r\n": 4345,
      "##ans ": 4346,
      "##restri": 4347,
      "            total_": 4348,
      "##streng": 4349,
      "##plant": 4350,
      "##index\r\n": 4351,
      "##grid.\r\n": 4352,
      "##iterating ": 4353,
      "##deriv": 4354,
      "##contains the ": 4355,
      "##2,3]\r\n": 4356,
      "##at most one ": 4357,
      "##0 <= n": 4358,
      "##tively ": 4359,
      "##traversal": 4360,
      "##select ": 4361,
      "##delete ": 4362,
      "##course": 4363,
      "##region": 4364,
      "##First ": 4365,
      "##proven ": 4366,
      "##potenti": 4367,
      "##10^9 + 7": 4368,
      "Follow up": 4369,
      "##:i": 4370,
      "##ron": 4371,
      "##s ": 4372,
      "##wall": 4373,
      "##7], ": 4374,
      "##Quer": 4375,
      "##Ke": 4376,
      "##//": 4377,
      "##of these ": 4378,
      "##best ": 4379,
      "##ight": 4380,
      "##match ": 4381,
      "##+ 1 = ": 4382,
      "##calculation": 4383,
      "##numbers.\r\n": 4384,
      "##ther the ": 4385,
      "##updates the ": 4386,
      "##floor": 4387,
      "##mark": 4388,
      "##coins ": 4389,
      "##: str) -> int:\r\n": 4390,
      "from collections import Counter\r\n": 4391,
      "##traverse the ": 4392,
      "The number of nodes in the tree is ": 4393,
      "##lambda ": 4394,
      "##hour ": 4395,
      "##)] ": 4396,
      "##`max_": 4397,
      "##zip(": 4398,
      "##_count ": 4399,
      "##\\).\r\n": 4400,
      "##Me": 4401,
      "##end the ": 4402,
      "##ing, ": 4403,
      "##rat": 4404,
      "##a = ": 4405,
      "##[i].\r\n": 4406,
      "## <= nums[i] <= 10": 4407,
      "##loop": 4408,
      "##need": 4409,
      "##it to ": 4410,
      "##value, ": 4411,
      "##visi": 4412,
      "##so that ": 4413,
      "##length, ": 4414,
      "##sol = Solution()\r\n": 4415,
      "##s: List[int], ": 4416,
      "Output: [\"": 4417,
      "##itera": 4418,
      "# sol = Solution()\r\n": 4419,
      "##days ": 4420,
      "##allowed to ": 4421,
      "##. You are also given ": 4422,
      "##course ": 4423,
      "##separat": 4424,
      "##helper function `": 4425,
      "##ince the answer may be ": 4426,
      "##depth-first search (DFS": 4427,
      "No": 4428,
      "##her": 4429,
      "##X\",\"": 4430,
      "##ties": 4431,
      "            min_": 4432,
      "##min-": 4433,
      "##1 < ": 4434,
      "##cture": 4435,
      "##. The idea is to ": 4436,
      "##index, ": 4437,
      "##7,8,": 4438,
      "##s. You ": 4439,
      "##left, right = ": 4440,
      "##output ": 4441,
      "##queue:\r\n": 4442,
      "##denotes the ": 4443,
      "##median ": 4444,
      "##stick": 4445,
      "##token": 4446,
      "##handles the ": 4447,
      "1. ": 4448,
      "For the ": 4449,
      "St": 4450,
      "##is:\r\n": 4451,
      "##us, ": 4452,
      "##try ": 4453,
      "##-2": 4454,
      "##| + ": 4455,
      "##ange": 4456,
      "##umm": 4457,
      "##state": 4458,
      "##roll": 4459,
      "##es are ": 4460,
      "##ed the ": 4461,
      "##ed in the ": 4462,
      "##1 -> ": 4463,
      "##vertic": 4464,
      "##sorts the ": 4465,
      "##nums[1] ": 4466,
      "##with the maximum ": 4467,
      "##numberOf": 4468,
      "##order of the ": 4469,
      "##queue.": 4470,
      "##. You can ": 4471,
      "##verse the ": 4472,
      "##swap ": 4473,
      "##connected component": 4474,
      "##according": 4475,
      "##alternating ": 4476,
      "##alice": 4477,
      "##black ": 4478,
      "##rin": 4479,
      "##c in ": 4480,
      "##she ": 4481,
      "##(root": 4482,
      "##`left": 4483,
      "##-th ": 4484,
      "##Case": 4485,
      "##B ": 4486,
      "##st, ": 4487,
      "##and Bob ": 4488,
      "##k is ": 4489,
      "##1, 1, ": 4490,
      "##bob": 4491,
      "##0 (": 4492,
      "##apple": 4493,
      "##ket ": 4494,
      "##characters in ": 4495,
      "##s: List[List[int]], ": 4496,
      "##4 and ": 4497,
      "##into two ": 4498,
      "##find(": 4499,
      "##2,3,4,": 4500,
      "##List[List[int]]:\r\n": 4501,
      "##because it ": 4502,
      "##dictionary": 4503,
      "##amount": 4504,
      "##[j]": 4505,
      "##. For example, ": 4506,
      "##item ": 4507,
      "##beauty ": 4508,
      "##dumm": 4509,
      "##\" + ": 4510,
      "##B\",\"": 4511,
      "##there": 4512,
      "##inver": 4513,
      "##] -= 1\r\n": 4514,
      "##sub-": 4515,
      "##2 to ": 4516,
      "##boo": 4517,
      "##0 is ": 4518,
      "- T": 4519,
      "    def is": 4520,
      "        return ans\r\n": 4521,
      "##[1,2,": 4522,
      "##. If a ": 4523,
      "##ation is ": 4524,
      "##greatest ": 4525,
      "##aga": 4526,
      "##score is ": 4527,
      "##s(self, n": 4528,
      "##techni": 4529,
      "##updating the ": 4530,
      "##stack.append(": 4531,
      "##in the range [0, ": 4532,
      "##handle ": 4533,
      "##goal": 4534,
      "##: int) -> List[int]:\r\n": 4535,
      "##Return ": 4536,
      "##coordinate ": 4537,
      "##defaultdict(int": 4538,
      "##few": 4539,
      "##satisfies the ": 4540,
      "##minimum cost to ": 4541,
      "##ai, bi": 4542,
      "##colored ": 4543,
      "##i.\r\n": 4544,
      "##agram ": 4545,
      "##eat": 4546,
      "##m\r\n": 4547,
      "##cli": 4548,
      "##1):\r\n": 4549,
      "##\"\"\r\n": 4550,
      "##th the ": 4551,
      "##] is ": 4552,
      "##ation**: ": 4553,
      "##quic": 4554,
      "##easi": 4555,
      "##array and ": 4556,
      "##compar": 4557,
      "##cto": 4558,
      "##shap": 4559,
      "##\",\"c": 4560,
      "                    dp": 4561,
      "##being ": 4562,
      "##j - ": 4563,
      "##formul": 4564,
      "##functo": 4565,
      "##111": 4566,
      "##stack[-1": 4567,
      "##-bit ": 4568,
      "##circul": 4569,
      "##When ": 4570,
      "##Length": 4571,
      "##deletion": 4572,
      "##key=lambda ": 4573,
      "##proven that ": 4574,
      "##off": 4575,
      "##.com": 4576,
      "##pq": 4577,
      "##-1:\r\n": 4578,
      "##and its ": 4579,
      "##sition": 4580,
      "##ed at ": 4581,
      "##\",\"a": 4582,
      "##counts ": 4583,
      "##(self, root: Optional[TreeNode": 4584,
      "##element\r\n": 4585,
      "##string, ": 4586,
      "##so far": 4587,
      "##points.\r\n": 4588,
      "##represents ": 4589,
      "##, it means ": 4590,
      "##Incre": 4591,
      "##[0] * ": 4592,
      "##order of ": 4593,
      "##server ": 4594,
      "##` to `": 4595,
      "##0 <= i < ": 4596,
      "n == grid": 4597,
      "##head = [": 4598,
      "##tive_": 4599,
      "##heapq.heappop(": 4600,
      "##destination": 4601,
      "        # Fill the ": 4602,
      "##log n": 4603,
      "##basket": 4604,
      "##xi, yi": 4605,
      "Since ": 4606,
      "##ves": 4607,
      "##tow": 4608,
      "##done ": 4609,
      "##sen": 4610,
      "##(0,": 4611,
      "##know": 4612,
      "##rel": 4613,
      "##val ": 4614,
      "##otal ": 4615,
      "##like ": 4616,
      "##two integers ": 4617,
      "This solution iterates through the ": 4618,
      "##which is the ": 4619,
      "##build ": 4620,
      "You are given an array of ": 4621,
      "##ded by ": 4622,
      "##actu": 4623,
      "##target.\r\n": 4624,
      "##1 and nums": 4625,
      "##for the current ": 4626,
      "##processing ": 4627,
      "##, return the number of ": 4628,
      "##transaction": 4629,
      "This solution works as follows:\r\n": 4630,
      "##fruit ": 4631,
      "##0 or 1.\r\n": 4632,
      "##those ": 4633,
      "##space complex": 4634,
      "##Sorted": 4635,
      "##added to the ": 4636,
      "This approach ensures that we efficiently ": 4637,
      "##| + |": 4638,
      "##0) ": 4639,
      "##nor": 4640,
      "##sam": 4641,
      "##sort the ": 4642,
      "##j\r\n": 4643,
      "##[neighbor": 4644,
      "##13,": 4645,
      "##3)": 4646,
      "##4]": 4647,
      "##\")\r\n": 4648,
      "##_id": 4649,
      "##Ma": 4650,
      "## = 2": 4651,
      "##1 * ": 4652,
      "##exist ": 4653,
      "##ill ": 4654,
      "##5,5,": 4655,
      "##has an ": 4656,
      "##have been ": 4657,
      "##itially, ": 4658,
      "##5 and ": 4659,
      "##and\r\n": 4660,
      "                # If ": 4661,
      "##greater than or equal to ": 4662,
      "##mid = (": 4663,
      "##Value": 4664,
      "##ensuring that ": 4665,
      "##* (n + 1)\r\n": 4666,
      "##trailing ": 4667,
      "##0] = ": 4668,
      "##x: ": 4669,
      "##`) ": 4670,
      "##18": 4671,
      "##45": 4672,
      "##endi": 4673,
      "##stea": 4674,
      "##le.\r\n": 4675,
      "##col ": 4676,
      "##or equal to the ": 4677,
      "##ed in ": 4678,
      "##acce": 4679,
      "##format": 4680,
      "##s = [[0,": 4681,
      "##node:\r\n": 4682,
      "##, we return the ": 4683,
      "##3 - ": 4684,
      "##so the ": 4685,
      "You are also given ": 4686,
      "##represented as ": 4687,
      "##character in ": 4688,
      "Given an integer ": 4689,
      "##cost\r\n": 4690,
      "##avor": 4691,
      "##paths ": 4692,
      "##spaces ": 4693,
      "##time complexity is ": 4694,
      "##power of ": 4695,
      "There is a ": 4696,
      "##request": 4697,
      "##'s a step-by-step ": 4698,
      "2. ": 4699,
      "##Sum ": 4700,
      "##1]], ": 4701,
      "##4]]\r\n": 4702,
      "##-3,": 4703,
      "##Pri": 4704,
      "##BB": 4705,
      "##Element": 4706,
      "##Your ": 4707,
      "##t = [": 4708,
      "##= deque": 4709,
      "##ory ": 4710,
      "            self.": 4711,
      "##or not ": 4712,
      "##an adjacency ": 4713,
      "##ity.\r\n": 4714,
      "##each": 4715,
      "##vertical ": 4716,
      "##with cost ": 4717,
      "##time\r\n": 4718,
      "##character\r\n": 4719,
      "You are given an array ": 4720,
      "##binary string ": 4721,
      "##min_heap": 4722,
      "        def is_": 4723,
      "##word = \"": 4724,
      "##s(self, s: str": 4725,
      "##0],[0,": 4726,
      "##considering ": 4727,
      "##it is possible to ": 4728,
      "##values(": 4729,
      "##. Since ": 4730,
      "##accumul": 4731,
      "##describ": 4732,
      "##ected ": 4733,
      "##people": 4734,
      "##overlapping ": 4735,
      "##(self, s: str, ": 4736,
      "##edges = [[0,": 4737,
      "##speed ": 4738,
      "Here is the implement": 4739,
      "##ak": 4740,
      "##dd": 4741,
      "##l, ": 4742,
      "##[u": 4743,
      "##ID": 4744,
      "##art": 4745,
      "##a new ": 4746,
      "##in graph[": 4747,
      "##at time ": 4748,
      "##oub": 4749,
      "##k - 1": 4750,
      "1 <= k <= 10": 4751,
      "##view": 4752,
      "##(self, grid": 4753,
      "##sum.\r\n": 4754,
      "        return True\r\n": 4755,
      "##sequences ": 4756,
      "##s[i] == ": 4757,
      "##direct": 4758,
      "##pile ": 4759,
      "##mid\r\n": 4760,
      "##Differ": 4761,
      "Return an array ": 4762,
      "##do the ": 4763,
      "##until the ": 4764,
      "##dictionary to ": 4765,
      "##top-": 4766,
      "##redund": 4767,
      "##additional ": 4768,
      "##explore all possible ": 4769,
      "##due to the ": 4770,
      "##fl": 4771,
      "##bel": 4772,
      "##[k": 4773,
      "##3) ": 4774,
      "##num, ": 4775,
      "##plan:\r\n": 4776,
      "##colli": 4777,
      "            # T": 4778,
      "##pointers ": 4779,
      "##ement ": 4780,
      "##is a valid ": 4781,
      "Output: [0,": 4782,
      "##target:\r\n": 4783,
      "##order traversal ": 4784,
      "##find_": 4785,
      "##frequency": 4786,
      "##correctly ": 4787,
      "##) and (": 4788,
      "##candies": 4789,
      "##. Therefore": 4790,
      "##over all possible ": 4791,
      "##[i - 1][": 4792,
      "##product of ": 4793,
      "##maximiz": 4794,
      "        # Sort ": 4795,
      "##overlap": 4796,
      "Explanation: In ": 4797,
      "##image ": 4798,
      "##blue ": 4799,
      "##owever, ": 4800,
      "##jkstra": 4801,
      "##defaultdict(int)\r\n": 4802,
      "##redundant ": 4803,
      "Let's ": 4804,
      "##ig": 4805,
      "##a\"\r\n": 4806,
      "##brac": 4807,
      "##were ": 4808,
      "##water": 4809,
      "##26": 4810,
      "##By ": 4811,
      "## \r\n": 4812,
      "##th, ": 4813,
      "##er.\r\n": 4814,
      "##rela": 4815,
      "        else:\r\n": 4816,
      "##and only ": 4817,
      "##10],[": 4818,
      "        # If the ": 4819,
      "Explanation: One ": 4820,
      "##][y": 4821,
      "##before": 4822,
      "##<= 100\r\n": 4823,
      "##t = \"": 4824,
      "##integer arrays ": 4825,
      "##any other ": 4826,
      "##you will ": 4827,
      "##is: ": 4828,
      "##following condition": 4829,
      "##players ": 4830,
      "##popleft()\r\n": 4831,
      "##[1]": 4832,
      "##) for _ in range(": 4833,
      "##' and '": 4834,
      "##available": 4835,
      "##`x` ": 4836,
      "This solution works by first ": 4837,
      "##generated such that ": 4838,
      "##ong the ": 4839,
      "##inclusive": 4840,
      "##equival": 4841,
      "##suitable ": 4842,
      "##queue.popleft()\r\n": 4843,
      "##0]": 4844,
      "##nes": 4845,
      "##xx": 4846,
      "##te ": 4847,
      "##son": 4848,
      "##1  # ": 4849,
      "##3, and ": 4850,
      "##Ali": 4851,
      "##Hel": 4852,
      "##Row": 4853,
      "##ity, ": 4854,
      "##m and ": 4855,
      "##ase the ": 4856,
      "##s = [[": 4857,
      "##. The key ": 4858,
      "##counter ": 4859,
      "- Ch": 4860,
      "##sum_": 4861,
      "##-1]": 4862,
      "This solution first ": 4863,
      "##[1,0,": 4864,
      "##you are ": 4865,
      "##[i]:\r\n": 4866,
      "##ed to be ": 4867,
      "##differences ": 4868,
      "##right - ": 4869,
      "##stack = ": 4870,
      "##letters ": 4871,
      "##trib": 4872,
      "##2 = \"": 4873,
      "Input: n = 5, ": 4874,
      "##2],[2,": 4875,
      "##minimum number of operations ": 4876,
      "##, so the ": 4877,
      "##flipp": 4878,
      "##Substring": 4879,
      "##items(": 4880,
      "##obtain ": 4881,
      "##minutes": 4882,
      "##shift ": 4883,
      "##merg": 4884,
      "##round ": 4885,
      "##mountain ": 4886,
      "##block ": 4887,
      "1 <= m, n <= ": 4888,
      "##modified ": 4889,
      "##eat ": 4890,
      "##rr": 4891,
      "##mb": 4892,
      "##s2 ": 4893,
      "##`target": 4894,
      "##Min": 4895,
      "##Div": 4896,
      "##road ": 4897,
      "##secre": 4898,
      "            dp": 4899,
      "##if they ": 4900,
      "##where": 4901,
      "##each other": 4902,
      "##not be ": 4903,
      "##starti": 4904,
      "##ers of ": 4905,
      "##implement ": 4906,
      "##is the sum of the ": 4907,
      "##0, 1, ": 4908,
      "##start_": 4909,
      "##list and ": 4910,
      "##s and the ": 4911,
      "##list, ": 4912,
      "##linear": 4913,
      "##removed ": 4914,
      "##groups ": 4915,
      "##2,3], ": 4916,
      "##flip ": 4917,
      "##contains only ": 4918,
      "##factor ": 4919,
      "##component ": 4920,
      "There are no ": 4921,
      "##queue = deque": 4922,
      "##deleting ": 4923,
      "##possible.\r\n": 4924,
      "##backtrack(": 4925,
      "Here's the step-by-step approach:\r\n": 4926,
      "##arithme": 4927,
      "## < ": 4928,
      "##ifi": 4929,
      "##gam": 4930,
      "##ored ": 4931,
      "##Gra": 4932,
      "##15\r\n": 4933,
      "##ory": 4934,
      "##atch": 4935,
      "Output: 10\r\n": 4936,
      "##k + 1": 4937,
      "##each element ": 4938,
      "##2 (": 4939,
      "##node):\r\n": 4940,
      "##nodes are ": 4941,
      "The input ": 4942,
      "##possibly ": 4943,
      "##up the ": 4944,
      "##index.\r\n": 4945,
      "##from the `": 4946,
      "Output: []\r\n": 4947,
      "##frequent ": 4948,
      "##n - 1 ": 4949,
      "##Start ": 4950,
      "##] == 0:\r\n": 4951,
      "##found, it ": 4952,
      "##Buil": 4953,
      "##question": 4954,
      "##relative ": 4955,
      "##fer": 4956,
      "##econ": 4957,
      "##name ": 4958,
      "##Al": 4959,
      "##s for each ": 4960,
      "##= 1\r\n": 4961,
      "##= max(": 4962,
      "##enem": 4963,
      "##aliz": 4964,
      "##n + 1": 4965,
      "##mail": 4966,
      "##ed that ": 4967,
      "                elif ": 4968,
      "Input: head = [": 4969,
      "##subtree": 4970,
      "##2 * 10": 4971,
      "##i + 1": 4972,
      "1 <= arr": 4973,
      "##dp[i][j": 4974,
      "##\" (": 4975,
      "##\" are ": 4976,
      "##3 * ": 4977,
      "##nums[j] ": 4978,
      "##left + ": 4979,
      "##left += 1\r\n": 4980,
      "##1,1,1,1,": 4981,
      "##create a ": 4982,
      "##efficiently": 4983,
      "##. This approach ensures that ": 4984,
      "##substring of ": 4985,
      "##frequenci": 4986,
      "##update ": 4987,
      "##up to the ": 4988,
      "##struc": 4989,
      "##10,10,": 4990,
      "##dp[n": 4991,
      "##frequency of ": 4992,
      "##permutation ": 4993,
      "##heapq\r\n": 4994,
      "##merge": 4995,
      "  - ": 4996,
      "##happines": 4997,
      "##Comp": 4998,
      "##uppercase ": 4999,
      "##functools import ": 5000,
      "##eff": 5001,
      "##0th ": 5002,
      "##ve.\r\n": 5003,
      "##da": 5004,
      "##s).\r\n": 5005,
      "##since the ": 5006,
      "##)  # ": 5007,
      "##k):\r\n": 5008,
      "##5]]\r\n": 5009,
      "##devi": 5010,
      "##if it is ": 5011,
      "##fix ": 5012,
      "##ord('a": 5013,
      "##modif": 5014,
      "Explanation: ": 5015,
      "##. The function ": 5016,
      "##present": 5017,
      "##append ": 5018,
      "##can't ": 5019,
      "##list is ": 5020,
      "##calculated ": 5021,
      "##formed by ": 5022,
      "##an integer k.\r\n": 5023,
      "##values of the ": 5024,
      "##condition ": 5025,
      "##special": 5026,
      "##, we can use ": 5027,
      "##\\(10^9 + 7": 5028,
      "##visited.add(": 5029,
      "##List[str], ": 5030,
      "##maintain a ": 5031,
      "##Optional[ListNode": 5032,
      "##lexicographically smallest ": 5033,
      "##horizontal ": 5034,
      "import heapq\r\n": 5035,
      "##receiv": 5036,
      "        from collections import ": 5037,
      "##key=lambda x: ": 5038,
      "##Build the ": 5039,
      "No ": 5040,
      "Your ": 5041,
      "##foo": 5042,
      "##flower": 5043,
      "##0: ": 5044,
      "##x-": 5045,
      "##dro": 5046,
      "##hatt": 5047,
      "##py": 5048,
      "##(BFS": 5049,
      "##`s` ": 5050,
      "##1 = [": 5051,
      "##9]\r\n": 5052,
      "##7 + ": 5053,
      "##No ": 5054,
      "##ses the ": 5055,
      "##nums1 and nums": 5056,
      "##m * ": 5057,
      "##max ": 5058,
      "##loo": 5059,
      "##ular ": 5060,
      "##x is ": 5061,
      "##number of valid ": 5062,
      "##][k": 5063,
      "##string \"": 5064,
      "##to the left ": 5065,
      "##element.\r\n": 5066,
      "        return total_": 5067,
      "##is the length of the ": 5068,
      "##**: This ": 5069,
      "##points": 5070,
      "##node in the ": 5071,
      "##work ": 5072,
      "##from_": 5073,
      "##function": 5074,
      "0 <= nums[i] <= 10": 5075,
      "##divide ": 5076,
      "        for i in range(len(": 5077,
      "##true.\r\n": 5078,
      "A subarray ": 5079,
      "##1],[2,": 5080,
      "##aaaa": 5081,
      "                        return ": 5082,
      "##Remove the ": 5083,
      "##swaps ": 5084,
      "##keeping ": 5085,
      "##modulo \\(10^9 + 7": 5086,
      "##len(nums)):\r\n": 5087,
      "##capacity ": 5088,
      "##gical ": 5089,
      "##bottom-right ": 5090,
      "##. Note that ": 5091,
      "After the ": 5092,
      "Wh": 5093,
      "##v ": 5094,
      "##A and ": 5095,
      "##Fun": 5096,
      "##} ": 5097,
      "##enough ": 5098,
      "##stoc": 5099,
      "        @": 5100,
      "##num + ": 5101,
      "##ed with ": 5102,
      "##ed as the ": 5103,
      "                while ": 5104,
      "##in the array ": 5105,
      "##book": 5106,
      "##both the ": 5107,
      "                    queue.append(": 5108,
      "##words, ": 5109,
      "##travel ": 5110,
      "##nums[2] ": 5111,
      "##[i]` ": 5112,
      "##current_sum ": 5113,
      "##event ": 5114,
      "##k = 1\r\n": 5115,
      "                        if ": 5116,
      "##Chec": 5117,
      "Input: n = 4, ": 5118,
      "##longest": 5119,
      "##ensure ": 5120,
      "##minimize the ": 5121,
      "##3,4],[": 5122,
      "##repeating ": 5123,
      "##skill": 5124,
      "##True)\r\n": 5125,
      "##\" -> \"": 5126,
      "This solution uses dynamic programming to ": 5127,
      "##shows the ": 5128,
      "##. If no such ": 5129,
      "##\", and \"": 5130,
      "Explanation: You can ": 5131,
      "##] indicates that ": 5132,
      "Fin": 5133,
      "##e-": 5134,
      "##ly, ": 5135,
      "##c = ": 5136,
      "##cup": 5137,
      "##.is": 5138,
      "##input": 5139,
      "##remo": 5140,
      "##n + ": 5141,
      "##ation\r\n": 5142,
      "##) <= ": 5143,
      "##post": 5144,
      "##of the two ": 5145,
      "Output: 3": 5146,
      "##1 << ": 5147,
      "        # Return the ": 5148,
      "##we are ": 5149,
      "##verte": 5150,
      "##below": 5151,
      "##tag": 5152,
      "##4,4,": 5153,
      "##toge": 5154,
      "##where `": 5155,
      "##pointer": 5156,
      "##' is ": 5157,
      "##list to ": 5158,
      "            return True\r\n": 5159,
      "Return the minimum ": 5160,
      "##1,2,3,": 5161,
      "##earli": 5162,
      "##does": 5163,
      "   - For each ": 5164,
      "##sum of all ": 5165,
      "##_count\r\n": 5166,
      "##1 + 1 + ": 5167,
      "##less than the ": 5168,
      "##determine if ": 5169,
      "        while left ": 5170,
      "##s` function ": 5171,
      "##matches ": 5172,
      "##`nums`": 5173,
      "##equals ": 5174,
      "##break": 5175,
      "##maximize the ": 5176,
      "If the ": 5177,
      "        # Function ": 5178,
      "In one ": 5179,
      "Here's the implementation:\r\n": 5180,
      "##ously ": 5181,
      "##in any order.\r\n": 5182,
      "##depth-first search (DFS) ": 5183,
      "##1).\r\n": 5184,
      "##Cour": 5185,
      "##5]": 5186,
      "##= 2\r\n": 5187,
      "##alC": 5188,
      "##num = ": 5189,
      "##radi": 5190,
      "##and [": 5191,
      "##maz": 5192,
      "                min_": 5193,
      "##1 or ": 5194,
      "##k in range(": 5195,
      "##in the `": 5196,
      "                    max_": 5197,
      "##element, ": 5198,
      "##, and then ": 5199,
      "##within a ": 5200,
      "##on day ": 5201,
      "##operations to ": 5202,
      "##[i])\r\n": 5203,
      "##elements are ": 5204,
      "Return the maximum number of ": 5205,
      "##smallest": 5206,
      "##reachable ": 5207,
      "##[1][": 5208,
      "##, so we return ": 5209,
      "##0-indexed integer array ": 5210,
      "##find a ": 5211,
      "            for j in range(n):\r\n": 5212,
      "##split the ": 5213,
      "##task is to ": 5214,
      "                    return False\r\n": 5215,
      "##source": 5216,
      "##occurrence of ": 5217,
      "Input: words = [\"": 5218,
      "##s(self, nums: List[int]) -> int:\r\n": 5219,
      "Follow up: ": 5220,
      "3\r\n": 5221,
      "##6 + ": 5222,
      "##Score": 5223,
      "##same": 5224,
      "##piv": 5225,
      "##q ": 5226,
      "##= ": 5227,
      "##4: ": 5228,
      "##After ": 5229,
      "##Fri": 5230,
      "##station": 5231,
      "        left, right = ": 5232,
      "##ing\r\n": 5233,
      "##) > ": 5234,
      "##10]\r\n": 5235,
      "                continue\r\n": 5236,
      "##fit ": 5237,
      "##assum": 5238,
      "##can only ": 5239,
      "##in the first ": 5240,
      "##we cannot ": 5241,
      "##ability ": 5242,
      "##. The solution ": 5243,
      "##len(word": 5244,
      "            # Add the ": 5245,
      "##length.\r\n": 5246,
      "##s to be ": 5247,
      "##eight": 5248,
      "Input: nums = [2,": 5249,
      "##characters in the ": 5250,
      "##with the current ": 5251,
      "##last element ": 5252,
      "##start and ": 5253,
      "##is not a ": 5254,
      "##processed ": 5255,
      "##, return -1.\r\n": 5256,
      "##higher ": 5257,
      "##[1, 2, ": 5258,
      "##houses ": 5259,
      "##considering the ": 5260,
      "##check if the ": 5261,
      "##categ": 5262,
      "##performing ": 5263,
      "##None:\r\n": 5264,
      "##amount ": 5265,
      "##th-First ": 5266,
      "##insert": 5267,
      "##according to the ": 5268,
      "##node.right)\r\n": 5269,
      "        # Count the frequency of each ": 5270,
      "So ": 5271,
      "##66": 5272,
      "##nea": 5273,
      "##.e. ": 5274,
      "        nums": 5275,
      "##n // ": 5276,
      "##` that ": 5277,
      "##k and ": 5278,
      "##array of ": 5279,
      "##[i] is ": 5280,
      "##nodes.\r\n": 5281,
      "##sum\r\n": 5282,
      "##is the same ": 5283,
      "        for char in ": 5284,
      "##row\r\n": 5285,
      "##s: List[str]": 5286,
      "##longer ": 5287,
      "##edges:\r\n": 5288,
      "##0],[0,0,": 5289,
      "1 <= nums.length <= ": 5290,
      "##select": 5291,
      "##get_": 5292,
      "##indicating ": 5293,
      "##bitwise AND ": 5294,
      "##provided ": 5295,
      "##running ": 5296,
      "##decimal ": 5297,
      "##iteratively ": 5298,
      "##accept": 5299,
      "Explanation: In this ": 5300,
      "##redundant calculation": 5301,
      "##Alice": 5302,
      " \\r\r\n": 5303,
      "##r = ": 5304,
      "##dol": 5305,
      "##Since ": 5306,
      "##lan": 5307,
      "##c, ": 5308,
      "##car ": 5309,
      "##slow": 5310,
      "##pen": 5311,
      "##pec": 5312,
      "##[char": 5313,
      "##2 = [": 5314,
      "##-2, ": 5315,
      "##encode": 5316,
      "##stop ": 5317,
      "##ing:\r\n": 5318,
      "##n for _ in range(": 5319,
      "##a and ": 5320,
      "##] += ": 5321,
      "##nums[i": 5322,
      "##nums[i]\r\n": 5323,
      "##look": 5324,
      "Output: 9\r\n": 5325,
      "##k == ": 5326,
      "##perform a ": 5327,
      "##values.\r\n": 5328,
      "##0 - ": 5329,
      "##maximum score ": 5330,
      "##\", word": 5331,
      "##operations:\r\n": 5332,
      "##head\r\n": 5333,
      "##such that:\r\n": 5334,
      "##pie": 5335,
      "                return True\r\n": 5336,
      "##s.sort()\r\n": 5337,
      "##equal.\r\n": 5338,
      "##above approach:\r\n": 5339,
      "##reverse=": 5340,
      "##circle": 5341,
      "##obstacle": 5342,
      "##gcd(": 5343,
      "##pixel": 5344,
      "##th-First Search ": 5345,
      "##omin": 5346,
      "##oper": 5347,
      "##tane": 5348,
      "##don": 5349,
      "##s. If ": 5350,
      "##s**: For each ": 5351,
      "##(0-indexed": 5352,
      "##)`": 5353,
      "##ware": 5354,
      "##24": 5355,
      "##15 ": 5356,
      "##'A": 5357,
      "##'ll ": 5358,
      "##insi": 5359,
      "##stored ": 5360,
      "        graph": 5361,
      "##er of ": 5362,
      "##to avoid ": 5363,
      "##plit ": 5364,
      "##a 2D integer array ": 5365,
      "            mid = (": 5366,
      "Output: 8\r\n": 5367,
      "        # G": 5368,
      "##we need to ": 5369,
      "##boun": 5370,
      "##position\r\n": 5371,
      "##grid[0])\r\n": 5372,
      "##priority ": 5373,
      "##cost = ": 5374,
      "##6,7,": 5375,
      "##7,7,": 5376,
      "##path from ": 5377,
      "##most frequent ": 5378,
      "Input: s = \"abc": 5379,
      "##is not possible to ": 5380,
      "##ence, ": 5381,
      "##addres": 5382,
      "        n = len(s)\r\n": 5383,
      "##choosing ": 5384,
      "##generate ": 5385,
      "##3],[1,": 5386,
      "It can be proven that ": 5387,
      "-109": 5388,
      "##window\r\n": 5389,
      "Given the root of a ": 5390,
      "##destination ": 5391,
      "##two-": 5392,
      "##properties ": 5393,
      "##Union-": 5394,
      "##fourth ": 5395,
      "##structure ": 5396,
      "##piece ": 5397,
      "3. ": 5398,
      "grid": 5399,
      "##fra": 5400,
      "##eet": 5401,
      "##ui, ": 5402,
      "##r + ": 5403,
      "##x.\r\n": 5404,
      "##test ": 5405,
      "##want": 5406,
      "##`Counter": 5407,
      "##II": 5408,
      "##1'": 5409,
      "##1\"\r\n": 5410,
      "##ree ": 5411,
      "##suc": 5412,
      "##) in ": 5413,
      "##x - ": 5414,
      "##proj": 5415,
      "##2 are ": 5416,
      "##force ": 5417,
      "##with memoization ": 5418,
      "##char_": 5419,
      "##counted ": 5420,
      "##0 else ": 5421,
      "##ow, ": 5422,
      "##-1` ": 5423,
      "This solution calculates the ": 5424,
      "##s[left": 5425,
      "##k = 3\r\n": 5426,
      "##calculating the ": 5427,
      "##values in the ": 5428,
      "##2],[0,": 5429,
      "##difference is ": 5430,
      "##last": 5431,
      "##. We can ": 5432,
      "##s.add(": 5433,
      "##workers ": 5434,
      "##optimiz": 5435,
      "##mid + 1\r\n": 5436,
      "##[x][y": 5437,
      "##whether ": 5438,
      "##numbered from 0 to ": 5439,
      "##GCD ": 5440,
      "##passeng": 5441,
      "        # Function to ": 5442,
      "##Union-Find ": 5443,
      "##batter": 5444,
      "##sing the ": 5445,
      "##), and ": 5446,
      "##2), ": 5447,
      "##9], ": 5448,
      "##Man": 5449,
      "##ange ": 5450,
      "##to reach ": 5451,
      "##es and ": 5452,
      "## = defaultdict(list)\r\n": 5453,
      "##100000": 5454,
      "##ess": 5455,
      "##of the first ": 5456,
      "Input: word = \"": 5457,
      "##when the ": 5458,
      "##length = 0\r\n": 5459,
      "##array to ": 5460,
      "##verse ": 5461,
      "##compa": 5462,
      "##\",\"0": 5463,
      "##given constraints.\r\n": 5464,
      "##sum, ": 5465,
      "        return ''.join(": 5466,
      "##ally.\r\n": 5467,
      "            if i ": 5468,
      "##with the smallest ": 5469,
      "You are given an integer ": 5470,
      "##Indi": 5471,
      "##. It can be ": 5472,
      "##true ": 5473,
      "##_sum\r\n": 5474,
      "   - `": 5475,
      "   - The ": 5476,
      "##edges.\r\n": 5477,
      "##found.\r\n": 5478,
      "##consider the ": 5479,
      "##Conver": 5480,
      "##Determin": 5481,
      "##visited:\r\n": 5482,
      "##has_": 5483,
      "1 <= s.length <= 105\r\n": 5484,
      "##boundary ": 5485,
      "##similar": 5486,
      "##duplicate ": 5487,
      "##variable ": 5488,
      "##down": 5489,
      "##0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,": 5490,
      "##bric": 5491,
      "Input: nums1 = [": 5492,
      "##making it ": 5493,
      "##an undirected ": 5494,
      "##encoded ": 5495,
      "Explanation: There is no ": 5496,
      "##solve the problem of ": 5497,
      "##s: List[int]) -> int:\r\n": 5498,
      "##visit ": 5499,
      "##circular ": 5500,
      "n == grid[i].length\r\n": 5501,
      "##space complexity ": 5502,
      "##arithmetic ": 5503,
      "##vertex ": 5504,
      "##fur": 5505,
      "##fea": 5506,
      "##6] ": 5507,
      "##n't ": 5508,
      "##doub": 5509,
      "##Sli": 5510,
      "##ca": 5511,
      "##pe ": 5512,
      "##(r, c": 5513,
      "##[0,0,": 5514,
      "##2).\r\n": 5515,
      "##2) = ": 5516,
      "##1` ": 5517,
      "##\": ": 5518,
      "##5 = ": 5519,
      "##y < ": 5520,
      "##dimen": 5521,
      "                return\r\n": 5522,
      "##1, y": 5523,
      "##all other ": 5524,
      "##. The resulting ": 5525,
      "##two adjacent ": 5526,
      "##is the smallest ": 5527,
      "##move, ": 5528,
      "##**: If ": 5529,
      "            # Find the ": 5530,
      "##equation": 5531,
      "##time = ": 5532,
      "##representing ": 5533,
      "Input: nums = [4,": 5534,
      "##target\r\n": 5535,
      "##numbers are ": 5536,
      "##collect": 5537,
      "##edges[i] = [": 5538,
      "##subsequence is ": 5539,
      "##answer.\r\n": 5540,
      "        while queue:\r\n": 5541,
      "##nifi": 5542,
      "##`, which ": 5543,
      "##handle the ": 5544,
      "from collections import deque\r\n": 5545,
      "##before the ": 5546,
      "For example, if ": 5547,
      "##linked list.\r\n": 5548,
      "1 <= nums[i] <= 109\r\n": 5549,
      "##distinct.\r\n": 5550,
      "        # Check if ": 5551,
      "##could be ": 5552,
      "            if not node:\r\n": 5553,
      "##simultane": 5554,
      "##hash ": 5555,
      "##bucket": 5556,
      "##home": 5557,
      "##triplet ": 5558,
      "##clockwise ": 5559,
      "##t.\r\n": 5560,
      "##jth ": 5561,
      "##\\)": 5562,
      "##'*": 5563,
      "##Dep": 5564,
      "##s can be ": 5565,
      "##stand": 5566,
      "##of them ": 5567,
      "##. G": 5568,
      "##ature": 5569,
      "##pos ": 5570,
      "##10 + ": 5571,
      "##contrib": 5572,
      "                left = ": 5573,
      "                i += 1\r\n": 5574,
      "##x in ": 5575,
      "##ecre": 5576,
      "##<= 1000\r\n": 5577,
      "        return min_": 5578,
      "##maximum value ": 5579,
      "##binary": 5580,
      "##elements is ": 5581,
      "##grid.length\r\n": 5582,
      "##grid), len(": 5583,
      "##subarray.\r\n": 5584,
      "        if len(": 5585,
      "##signifi": 5586,
      "##n, where ": 5587,
      "##neighbor, ": 5588,
      "##common": 5589,
      "##continues ": 5590,
      "##fully ": 5591,
      "##], k = 2\r\n": 5592,
      "##strictly increasing ": 5593,
      "##exceed": 5594,
      "        for i in range(1, n):\r\n": 5595,
      "##diagonal ": 5596,
      "##image": 5597,
      "##32-bit ": 5598,
      "##binary representation of ": 5599,
      "##twice ": 5600,
      "##wait": 5601,
      "##figure ": 5602,
      "##perform the following ": 5603,
      "##flowers ": 5604,
      "##potential ": 5605,
      "##Graph": 5606,
      "##Function": 5607,
      "##dimension": 5608,
      "##grid), len(grid[0])\r\n": 5609,
      "##ot ": 5610,
      "##kn": 5611,
      "##Lef": 5612,
      "##Bit": 5613,
      "##Find": 5614,
      "##s as ": 5615,
      "##s all ": 5616,
      "##ans.append(": 5617,
      "##stree": 5618,
      "        i = ": 5619,
      "##plus ": 5620,
      "##diagram ": 5621,
      "##acros": 5622,
      "##conson": 5623,
      "                dp": 5624,
      "##2 -> ": 5625,
      "##by their ": 5626,
      "##in range(1, ": 5627,
      "##right.\r\n": 5628,
      "##query, ": 5629,
      "##. There are ": 5630,
      "##ate_": 5631,
      "##at the current ": 5632,
      "##if:\r\n": 5633,
      "##matches the ": 5634,
      "##score\r\n": 5635,
      "##partition ": 5636,
      "##capit": 5637,
      "##selected ": 5638,
      "##.\",\".\",\".\",\"": 5639,
      "##bitwise OR ": 5640,
      "##Calculation": 5641,
      "##center": 5642,
      "##mountain": 5643,
      "##parentheses ": 5644,
      "##consists only of lowercase English letters.\r\n": 5645,
      "One ": 5646,
      "##(self, root: Optional[TreeNode]": 5647,
      "Here is the implementation of the ": 5648,
      "##jkstra's ": 5649,
      "##aster": 5650,
      "##>> ": 5651,
      "##hold": 5652,
      "##s1 = ": 5653,
      "##`. If ": 5654,
      "##`).\r\n": 5655,
      "##`mid": 5656,
      "##[a": 5657,
      "##2^": 5658,
      "##21": 5659,
      "##': ": 5660,
      "##ary.\r\n": 5661,
      "##set = ": 5662,
      "            result.append(": 5663,
      "##) < ": 5664,
      "##) * (": 5665,
      "##number of distinct ": 5666,
      "##strateg": 5667,
      "##s, we can ": 5668,
      "##) -> List[List[int]]:\r\n": 5669,
      "    def num": 5670,
      "##any of the ": 5671,
      "##you need to ": 5672,
      "##represented by ": 5673,
      "##greater": 5674,
      "##s[i] is the ": 5675,
      "##place the ": 5676,
      "##heights[": 5677,
      "To solve the problem of ": 5678,
      "##gues": 5679,
      "##stack.pop()\r\n": 5680,
      "##ensure that ": 5681,
      "##Alice can ": 5682,
      "##: str) -> bool:\r\n": 5683,
      "##valid.\r\n": 5684,
      "##height of the ": 5685,
      "##permutation of ": 5686,
      "##List[str]:\r\n": 5687,
      "There are n ": 5688,
      "##meeting ": 5689,
      "##circle ": 5690,
      "##occurrences of ": 5691,
      "##Calculate ": 5692,
      "##grid[r][c": 5693,
      "##respectively": 5694,
      "##is either 0 or 1.\r\n": 5695,
      "##writt": 5696,
      "##; otherwise": 5697,
      "##tice that ": 5698,
      "##module ": 5699,
      "##tuple ": 5700,
      "##effec": 5701,
      "##x:\r\n": 5702,
      "##.items(": 5703,
      "##[r][c": 5704,
      "##]))  # Output: ": 5705,
      "##11 ": 5706,
      "##3] = ": 5707,
      "##Lim": 5708,
      "##'z": 5709,
      "##Jum": 5710,
      "##anti": 5711,
      "##sted ": 5712,
      "##an array.\r\n": 5713,
      "                total_": 5714,
      "                right = ": 5715,
      "##ution ": 5716,
      "1 <= words": 5717,
      "##s = [1,": 5718,
      "    def get": 5719,
      "##row in ": 5720,
      "##so we return ": 5721,
      "##too ": 5722,
      "##nums[left": 5723,
      "##nums[right": 5724,
      "##island ": 5725,
      "##calculate ": 5726,
      "##word is ": 5727,
      "##at the same ": 5728,
      "##**: We use a ": 5729,
      "For each ": 5730,
      "##name": 5731,
      "##gain ": 5732,
      "##, return true if ": 5733,
      "        while i < ": 5734,
      "##Dijkstra's ": 5735,
      "##means the ": 5736,
      "##pass ": 5737,
      "##group of ": 5738,
      "##denoting the ": 5739,
      "##9999": 5740,
      "##times:\r\n": 5741,
      "##a, b in ": 5742,
      "##strictly increas": 5743,
      "##beautiful": 5744,
      "##(self, s: str) -> int:\r\n": 5745,
      "##corner": 5746,
      "##specific ": 5747,
      "##during the ": 5748,
      "##gives ": 5749,
      "##gives the ": 5750,
      "##diff = ": 5751,
      "##tive, ": 5752,
      "##invol": 5753,
      "##repeated": 5754,
      "##itself.\r\n": 5755,
      "##equivalent ": 5756,
      "##keeping track of the ": 5757,
      "##fro": 5758,
      "##b\r\n": 5759,
      "##hol": 5760,
      "##s[i]\r\n": 5761,
      "##(2,": 5762,
      "##(3, ": 5763,
      "##`count": 5764,
      "##2]], ": 5765,
      "##'B": 5766,
      "##rec": 5767,
      "        total": 5768,
      "        visited ": 5769,
      "##sed": 5770,
      "##ash": 5771,
      "##1 == ": 5772,
      "##k - ": 5773,
      "##rank ": 5774,
      "##perf": 5775,
      "##s, which ": 5776,
      "##end, ": 5777,
      "The first ": 5778,
      "##-1)": 5779,
      "##-1] ": 5780,
      "##types of ": 5781,
      "##operation.\r\n": 5782,
      "##you have ": 5783,
      "##open": 5784,
      "##Node ": 5785,
      "##cut ": 5786,
      "                # If the ": 5787,
      "##.length == 3\r\n": 5788,
      "##s. We ": 5789,
      "##very large, return it modulo 109 + 7.\r\n": 5790,
      "##adjust": 5791,
      "##reversed ": 5792,
      "##[1] = ": 5793,
      "##matrix = [": 5794,
      "##) - 1\r\n": 5795,
      "##[i + 1": 5796,
      "##None)\r\n": 5797,
      "##multiple of ": 5798,
      "-104": 5799,
      "##binary search to find the ": 5800,
      "##], k = 3\r\n": 5801,
      "Input: grid = [[1,": 5802,
      "Explanation: There are no ": 5803,
      "##cnt ": 5804,
      "##width": 5805,
      "##reduc": 5806,
      "##label": 5807,
      "##customer": 5808,
      "##sorted in non-decreasing ": 5809,
      "##left and right subtre": 5810,
      "##candy ": 5811,
      "The input is ": 5812,
      "##dama": 5813,
      "##alCut": 5814,
      "##written ": 5815,
      "On ": 5816,
      "##favor": 5817,
      "##ry": 5818,
      "##dc": 5819,
      "##.next = ": 5820,
      "##p = ": 5821,
      "##(0": 5822,
      "##[2,3,": 5823,
      "##30": 5824,
      "##\"].\r\n": 5825,
      "##_max": 5826,
      "##AB": 5827,
      "##one.\r\n": 5828,
      "     - ": 5829,
      "##arting ": 5830,
      "##alk ": 5831,
      "        queue = deque": 5832,
      "##is even": 5833,
      "##nums of length ": 5834,
      "## = 0, ": 5835,
      "##immedi": 5836,
      "##const": 5837,
      "##es:\r\n": 5838,
      "##= [\"": 5839,
      "##= [1,": 5840,
      "##3,6,": 5841,
      "##word.\r\n": 5842,
      "##from each ": 5843,
      "##travel": 5844,
      "##max_heap": 5845,
      "##sorting the ": 5846,
      "##j += 1\r\n": 5847,
      "##area": 5848,
      "##character is ": 5849,
      "##push ": 5850,
      "##line": 5851,
      "##order and ": 5852,
      "##position in the ": 5853,
      "##including ": 5854,
      "##-1, 0": 5855,
      "2 <= nums": 5856,
      "##goes ": 5857,
      "##monster": 5858,
      "##Update ": 5859,
      "##1 - 1\r\n": 5860,
      "##smaller than ": 5861,
      "##given the constraints.\r\n": 5862,
      "##initialize ": 5863,
      "Input: arr = [1,": 5864,
      "##customer ": 5865,
      "##sorted in ascending ": 5866,
      "##variable": 5867,
      "m == grid.length\r\n": 5868,
      "##lru_cache(": 5869,
      "##rank[root": 5870,
      "        # Convert the ": 5871,
      "##health ": 5872,
      "##except ": 5873,
      "        # Dictionary to store the ": 5874,
      "##units of ": 5875,
      "##strength ": 5876,
      "##hattan ": 5877,
      "##nearest ": 5878,
      "##reverse=True)\r\n": 5879,
      "##Graph ": 5880,
      "Bo": 5881,
      "Every ": 5882,
      "##fron": 5883,
      "##gc": 5884,
      "##mut": 5885,
      "##x)\r\n": 5886,
      "##.values(": 5887,
      "##`nums1": 5888,
      "##[2": 5889,
      "##[-": 5890,
      "##Cre": 5891,
      "##Day": 5892,
      "##invalid ": 5893,
      "##, which is ": 5894,
      "##= set()\r\n": 5895,
      "##store": 5896,
      "##raverse the ": 5897,
      "##. Your ": 5898,
      "##in one ": 5899,
      "##at position ": 5900,
      "##file ": 5901,
      "##ell ": 5902,
      "##2 * 104\r\n": 5903,
      "##char == ": 5904,
      "                    for ": 5905,
      "                    current_": 5906,
      "##string by ": 5907,
      "##0 -> ": 5908,
      "    def numberOf": 5909,
      "##sums ": 5910,
      "        return max(": 5911,
      "##meet the ": 5912,
      "##identif": 5913,
      "##s[2] ": 5914,
      "##fficul": 5915,
      "##queen": 5916,
      "##character.\r\n": 5917,
      "##s are unique.\r\n": 5918,
      "##4 * ": 5919,
      "##root\r\n": 5920,
      "##nums[i] - ": 5921,
      "##end of ": 5922,
      "##collect ": 5923,
      "##make a ": 5924,
      "##1 + 2 + ": 5925,
      "##bread": 5926,
      "##appear in ": 5927,
      "Here's the complete ": 5928,
      "##going ": 5929,
      "##[i] <= 109\r\n": 5930,
      "##s(self, nums: List[int], ": 5931,
      "##= [0] * n\r\n": 5932,
      "##operation, you can ": 5933,
      "##fewer ": 5934,
      "##linear ": 5935,
      "##encoded": 5936,
      "##ui, vi": 5937,
      "##significan": 5938,
      "Two ": 5939,
      "##call ": 5940,
      "##.count": 5941,
      "##2), (": 5942,
      "##Be": 5943,
      "##'+": 5944,
      "##on.\r\n": 5945,
      "##ans": 5946,
      "##is used to ": 5947,
      "##deci": 5948,
      "##urr": 5949,
      "##n where ": 5950,
      "##a list of ": 5951,
      "##max-": 5952,
      "##1 if ": 5953,
      "##ab\"\r\n": 5954,
      "##forward ": 5955,
      "##with n ": 5956,
      "1 <= queries": 5957,
      "##. The time complexity is ": 5958,
      "##sible": 5959,
      "##best_": 5960,
      "from functools import ": 5961,
      "##right` ": 5962,
      "##only the ": 5963,
      "##has been ": 5964,
      "##different": 5965,
      "##graph.\r\n": 5966,
      "##s[i] <= ": 5967,
      "##numbers in the ": 5968,
      "##largest": 5969,
      "##for the first ": 5970,
      "##distance = ": 5971,
      "##connect ": 5972,
      "##correct": 5973,
      "##adding the ": 5974,
      "##palindrome.\r\n": 5975,
      "##multiple": 5976,
      "##n, return the ": 5977,
      "##s_to_": 5978,
      "##allowed ": 5979,
      "To solve this problem ": 5980,
      "##[i + 1] ": 5981,
      "##balance": 5982,
      "##O(n^": 5983,
      "##-1,-1,": 5984,
      "##level_": 5985,
      "##rotated ": 5986,
      "        # Iterate over each ": 5987,
      "##-1 if ": 5988,
      "##energy": 5989,
      "##assigned ": 5990,
      "##constructs the ": 5991,
      "##bisect_left": 5992,
      "##distribut": 5993,
      "##`j` ": 5994,
      "##table\r\n": 5995,
      "##. If there are multiple ": 5996,
      "##node.left)\r\n": 5997,
      "##multipli": 5998,
      "##\" + \"": 5999,
      "A subarray is a contiguous ": 6000,
      "##street ": 6001,
      "##a\" ": 6002,
      "##dx": 6003,
      "##`. This ": 6004,
      "##[v": 6005,
      "##1), (": 6006,
      "##-inf'": 6007,
      "##Pu": 6008,
      "##Ev": 6009,
      "##Mar": 6010,
      "##e = ": 6011,
      "##, but ": 6012,
      "##states ": 6013,
      "##det": 6014,
      "##to each ": 6015,
      "##to any ": 6016,
      "                break\r\n": 6017,
      "Input: point": 6018,
      "##subset of ": 6019,
      "##k < ": 6020,
      "##2 in ": 6021,
      "        return [": 6022,
      "##\", s": 6023,
      "##value in ": 6024,
      "##used": 6025,
      "##from the first ": 6026,
      "##list `": 6027,
      "##binary tree, ": 6028,
      "##!= 0:\r\n": 6029,
      "##computed ": 6030,
      "##conditions.\r\n": 6031,
      "##0],[1,": 6032,
      "## <= 109\r\n": 6033,
      "##score.\r\n": 6034,
      "##performing the ": 6035,
      "##) - ord('a": 6036,
      "##seconds.\r\n": 6037,
      "##ballo": 6038,
      "##changing the ": 6039,
      "##float('-inf'": 6040,
      "##231 - 1\r\n": 6041,
      "##Process ": 6042,
      "##'b' ": 6043,
      "##parenthese": 6044,
      "##Swap ": 6045,
      "##Recursive ": 6046,
      "##message ": 6047,
      "The number of nodes in the tree is in the range [1, ": 6048,
      "##again": 6049,
      "##quick": 6050,
      "##formula ": 6051,
      "##actual ": 6052,
      "##right - left ": 6053,
      "##where:\r\n": 6054,
      "##lookup": 6055,
      "##Manhattan ": 6056,
      "##lru_cache(None)\r\n": 6057,
      "quer": 6058,
      "##fall": 6059,
      "##6 = ": 6060,
      "##by": 6061,
      "##s[i], ": 6062,
      "##4) ": 6063,
      "##9],[": 6064,
      "##Par": 6065,
      "##t and ": 6066,
      "##, current_": 6067,
      "        stack = ": 6068,
      "##utt": 6069,
      "##to get ": 6070,
      "##. Return the ": 6071,
      "##ately ": 6072,
      "##an element ": 6073,
      "##turn ": 6074,
      "##ime": 6075,
      "##constra": 6076,
      "##fill": 6077,
      "##1 in ": 6078,
      "        # Re": 6079,
      "##number of operations ": 6080,
      "##self ": 6081,
      "##example ": 6082,
      "##low, ": 6083,
      "##][col": 6084,
      "                    continue\r\n": 6085,
      "- If ": 6086,
      "##4,2,": 6087,
      "        return False\r\n": 6088,
      "##is the only ": 6089,
      "##thest ": 6090,
      "        for u, ": 6091,
      "            if len(": 6092,
      "##point.\r\n": 6093,
      "##s[right": 6094,
      "##nums[k": 6095,
      "##characters are ": 6096,
      "##with the first ": 6097,
      "##non-overlapping ": 6098,
      "##ould you ": 6099,
      "##approach to find the ": 6100,
      "##between two ": 6101,
      "##increment ": 6102,
      "##dfs` function ": 6103,
      "##substrings of ": 6104,
      "##2],[3,": 6105,
      "##collection": 6106,
      "##longest common ": 6107,
      "##tasks ": 6108,
      "##s. The `": 6109,
      "##Times": 6110,
      "##denomin": 6111,
      "##cases are ": 6112,
      "##left, right": 6113,
      "##prime factor": 6114,
      "##. Here": 6115,
      "##specified ": 6116,
      "##obstacle ": 6117,
      "##part of the ": 6118,
      "##needed.\r\n": 6119,
      "##beginning ": 6120,
      "        # Convert ": 6121,
      "##first and last ": 6122,
      "##math.": 6123,
      "##technique ": 6124,
      "##SortedList": 6125,
      "##fold": 6126,
      "##gg": 6127,
      "##0's ": 6128,
      "##v, ": 6129,
      "##nx, n": 6130,
      "##mou": 6131,
      "##bul": 6132,
      "##lit": 6133,
      "##(-": 6134,
      "##k)\r\n": 6135,
      "##110": 6136,
      "##4th ": 6137,
      "##'X": 6138,
      "##thod": 6139,
      "##, you can ": 6140,
      "##aroun": 6141,
      "##y + ": 6142,
      "##a positive integer ": 6143,
      "##it\r\n": 6144,
      "##number in ": 6145,
      "##term": 6146,
      "        # Build the ": 6147,
      "##counting the ": 6148,
      "##to the current ": 6149,
      "##(self, word": 6150,
      "    def longest": 6151,
      "##tail": 6152,
      "##maximum sum ": 6153,
      "##leftmost ": 6154,
      "##arr)\r\n": 6155,
      "##index i = ": 6156,
      "##minimum and ": 6157,
      "##value = ": 6158,
      "##only lowercase English letters.\r\n": 6159,
      "##query.\r\n": 6160,
      "##has no ": 6161,
      "##grid[0][": 6162,
      "##free ": 6163,
      "##nums[i] < ": 6164,
      "##max(0, ": 6165,
      "##largest_": 6166,
      "##Count the ": 6167,
      "##s. S": 6168,
      "##total_sum ": 6169,
      "##: List[int]) -> bool:\r\n": 6170,
      "##with a time complexity of ": 6171,
      "##constraints, ": 6172,
      "Here's a step-by-step ": 6173,
      "##intervals ": 6174,
      "##: str) -> str:\r\n": 6175,
      "##: int) -> str:\r\n": 6176,
      "##boxes": 6177,
      "##transforma": 6178,
      "##give ": 6179,
      "##yiel": 6180,
      "##statement": 6181,
      "##increments the ": 6182,
      "##(self, nums: List[int], k: int) -> int:\r\n": 6183,
      "##rules:\r\n": 6184,
      "##rest of the ": 6185,
      "##Swap": 6186,
      "##Base case": 6187,
      "##Helper function ": 6188,
      "##dollar": 6189,
      "##two-pointer ": 6190,
      "##is, ": 6191,
      "##gen": 6192,
      "##us, the ": 6193,
      "##br": 6194,
      "##t\r\n": 6195,
      "##.split": 6196,
      "##(inclusive": 6197,
      "##`, the ": 6198,
      "##_list": 6199,
      "##50": 6200,
      "##8 + ": 6201,
      "##RL": 6202,
      "##int the ": 6203,
      "##arrange": 6204,
      "##: List[List[int]], ": 6205,
      "##raw": 6206,
      "##. By ": 6207,
      "##math ": 6208,
      "##if a ": 6209,
      "##moiz": 6210,
      "##x == ": 6211,
      "        # We ": 6212,
      "##as it ": 6213,
      "##with `": 6214,
      "##lowest ": 6215,
      "##. The final ": 6216,
      "##from index ": 6217,
      "##dp[i-1": 6218,
      "##trees ": 6219,
      "##swapp": 6220,
      "##minimum time ": 6221,
      "##operations\r\n": 6222,
      "##[1,2,3,": 6223,
      "##count in ": 6224,
      "                if not ": 6225,
      "##.length <= 10\r\n": 6226,
      "##option": 6227,
      "##digit(": 6228,
      "        for i in range(m):\r\n": 6229,
      "##need to be ": 6230,
      "##Represent": 6231,
      "##removing the ": 6232,
      "##zeros": 6233,
      "##constraints ": 6234,
      "##include ": 6235,
      "##including the ": 6236,
      "##goal ": 6237,
      "1 <= s.length <= ": 6238,
      "##meets the ": 6239,
      "Input: nums = [1,2,3,4,": 6240,
      "##not in visited:\r\n": 6241,
      "##center ": 6242,
      "##backtracking ": 6243,
      "##. In one ": 6244,
      "##ensuring that the ": 6245,
      "##Distance": 6246,
      "##having ": 6247,
      "##figur": 6248,
      "##underlin": 6249,
      "##counts the number of ": 6250,
      "##Memoiz": 6251,
      "##Course": 6252,
      "##constraint ": 6253,
      "Per": 6254,
      "##ative ": 6255,
      "##:]\r\n": 6256,
      "##x][n": 6257,
      "##b)\r\n": 6258,
      "##(the ": 6259,
      "##(possibly ": 6260,
      "##well": 6261,
      "##4-": 6262,
      "##deque ": 6263,
      "##a single ": 6264,
      "            new_": 6265,
      "            left_": 6266,
      "            count = 0\r\n": 6267,
      "##olo": 6268,
      "##= [[": 6269,
      "##never ": 6270,
      "        # Helper function ": 6271,
      "##[i] < ": 6272,
      "##exec": 6273,
      "##ship ": 6274,
      "##word\r\n": 6275,
      "##tain ": 6276,
      "##izz": 6277,
      "##you cannot ": 6278,
      "##] = True\r\n": 6279,
      "##s to avoid ": 6280,
      "##have an ": 6281,
      "##left corner ": 6282,
      "##j and ": 6283,
      "##s[i] = ": 6284,
      "##4 is ": 6285,
      "##numbers\r\n": 6286,
      "##root.": 6287,
      "##end = ": 6288,
      "   - If the ": 6289,
      "Input: s = \"a": 6290,
      "##cell.\r\n": 6291,
      "##Ener": 6292,
      "##. You may ": 6293,
      "##space": 6294,
      "##brevi": 6295,
      "##mark ": 6296,
      "        # Initialize a ": 6297,
      "##items ": 6298,
      "##changing ": 6299,
      "##Cost ": 6300,
      "        # Iterate through the ": 6301,
      "##applying the ": 6302,
      "##needed": 6303,
      "##* (n + 1": 6304,
      "##% 2 == 0:\r\n": 6305,
      "        m, n = len(grid), len(grid[0])\r\n": 6306,
      "##), (0, -1": 6307,
      "##), (1, 0": 6308,
      "##do the following ": 6309,
      "##implement this ": 6310,
      "##deleting some ": 6311,
      "##accepted.\r\n": 6312,
      "##Determine the ": 6313,
      "##astero": 6314,
      "##quickly ": 6315,
      "         ": 6316,
      "##agram": 6317,
      "##e\",\"": 6318,
      "##uf": 6319,
      "##n))\r\n": 6320,
      "##Sort the ": 6321,
      "##s. This ": 6322,
      "##`0": 6323,
      "##[index": 6324,
      "##2*": 6325,
      "##20\r\n": 6326,
      "##4:\r\n": 6327,
      "##tile": 6328,
      "##al.\r\n": 6329,
      "##enter": 6330,
      "##nums[i], ": 6331,
      "##10], ": 6332,
      "##configur": 6333,
      "##los": 6334,
      "##2,0,": 6335,
      "##> 0 and ": 6336,
      "##i to ": 6337,
      "##s = [1,2,": 6338,
      "##node]:\r\n": 6339,
      "- [": 6340,
      "##word2": 6341,
      "##taking ": 6342,
      "##[0]:\r\n": 6343,
      "##< right:\r\n": 6344,
      "##, we calculate the ": 6345,
      "##2, y": 6346,
      "This solution defines a ": 6347,
      "##+ 1))\r\n": 6348,
      "##position.\r\n": 6349,
      "##s in each ": 6350,
      "##observ": 6351,
      "Output: [[1,": 6352,
      "##division ": 6353,
      "##subarray of ": 6354,
      "##subarrays of ": 6355,
      "##saf": 6356,
      "##prefix of ": 6357,
      "##ensures that we ": 6358,
      "##2], [": 6359,
      "##\"a\",\"b": 6360,
      "##out of the ": 6361,
      "##algorithm": 6362,
      "##median": 6363,
      "##suffix": 6364,
      "##exceed ": 6365,
      "##balls ": 6366,
      "            # Check if ": 6367,
      "##ancestor": 6368,
      "##layer ": 6369,
      "##[::": 6370,
      "Input: words = [": 6371,
      "##subtract ": 6372,
      "##encountered ": 6373,
      "##GCD": 6374,
      "- At ": 6375,
      "##And": 6376,
      "1 <= words[i]": 6377,
      "##xyz": 6378,
      "##available_": 6379,
      "When ": 6380,
      "        @lru_cache(None)\r\n": 6381,
      "##repeatedly ": 6382,
      "##math import ": 6383,
      "##x][ny": 6384,
      "arr": 6385,
      "## != ": 6386,
      "##rt": 6387,
      "##tem": 6388,
      "##cumul": 6389,
      "##.0000": 6390,
      "##k_": 6391,
      "##`[": 6392,
      "##`, it ": 6393,
      "##2 <= ": 6394,
      "##_, ": 6395,
      "##_with_": 6396,
      "##AT": 6397,
      "##8], ": 6398,
      "##'9": 6399,
      "##}, ": 6400,
      "##erequi": 6401,
      "##only.\r\n": 6402,
      "##any": 6403,
      "        row": 6404,
      "        sorted_": 6405,
      "##rover": 6406,
      "##. When ": 6407,
      "##itself ": 6408,
      "##oly": 6409,
      "Input: ma": 6410,
      "##orders ": 6411,
      "##1, c": 6412,
      "##version ": 6413,
      "##number of unique ": 6414,
      "Explanation: \"": 6415,
      "##(self, arr": 6416,
      "##4,1,": 6417,
      "##met": 6418,
      "##5,1,": 6419,
      "##count how many ": 6420,
      "##s: List[List[int]]": 6421,
      "##numbers in ": 6422,
      "##create ": 6423,
      "##_sum = 0\r\n": 6424,
      "##x, y, ": 6425,
      "##x, y = ": 6426,
      "##word in ": 6427,
      "A substring ": 6428,
      "##1],[1,1,": 6429,
      "##increment the ": 6430,
      "        if n ": 6431,
      "##Char": 6432,
      "##-indexed ": 6433,
      "##Initialization**: We ": 6434,
      "##arily ": 6435,
      "##prev = ": 6436,
      "##Alice and Bob ": 6437,
      "##means that ": 6438,
      "##does not contain ": 6439,
      "            for j in range(1, ": 6440,
      "##ected": 6441,
      "##_index = ": 6442,
      "##average": 6443,
      "##it's not ": 6444,
      "##`dp` array ": 6445,
      "##(nx, n": 6446,
      "##customers ": 6447,
      "##triangle": 6448,
      "##neighbor in graph[": 6449,
      "##region ": 6450,
      "##Python ": 6451,
      "##recursive function ": 6452,
      "##above.\r\n": 6453,
      "##infinite ": 6454,
      "##econd ": 6455,
      "##left + right": 6456,
      "queries": 6457,
      "##minimum and maximum ": 6458,
      "##erequisit": 6459,
      "1 ": 6460,
      "From ": 6461,
      "##f(": 6462,
      "##fle": 6463,
      "##e:\r\n": 6464,
      "##n)": 6465,
      "##carr": 6466,
      "##sr": 6467,
      "##son ": 6468,
      "##(a, b": 6469,
      "##4] = ": 6470,
      "##Curr": 6471,
      "##7] ": 6472,
      "##'L": 6473,
      "##XOR": 6474,
      "##      ": 6475,
      "##s += 1\r\n": 6476,
      "##ended ": 6477,
      "##or\r\n": 6478,
      "##stone": 6479,
      "##of them.\r\n": 6480,
      "##see if ": 6481,
      "##to find ": 6482,
      "##or \"": 6483,
      "##if we ": 6484,
      "##if and only ": 6485,
      "##nums[i - 1": 6486,
      "##e the first ": 6487,
      "Input: matrix = [": 6488,
      "##minute ": 6489,
      "##in the sorted ": 6490,
      "##sell ": 6491,
      "##[i] > ": 6492,
      "##light": 6493,
      "##shor": 6494,
      "##pai": 6495,
      "##paw": 6496,
      "The total ": 6497,
      "##(self, num": 6498,
      "##words[": 6499,
      "##from nums": 6500,
      "##from left to ": 6501,
      "##4,3,": 6502,
      "        return dfs(": 6503,
      "##s of a ": 6504,
      "##is the sum of ": 6505,
      "##all(": 6506,
      "##-1)\r\n": 6507,
      "##result)\r\n": 6508,
      "##. If there is no ": 6509,
      "##following:\r\n": 6510,
      "##track the ": 6511,
      "Explanation: The longest ": 6512,
      "##target, ": 6513,
      "##other words, ": 6514,
      "##ages ": 6515,
      "##`k`.\r\n": 6516,
      "For i = ": 6517,
      "##largest possible ": 6518,
      "##node.children": 6519,
      "##lowercase letter": 6520,
      "##becomes \"": 6521,
      "##positive integer": 6522,
      "It is guarante": 6523,
      "##matching ": 6524,
      "##queries:\r\n": 6525,
      "##exists.\r\n": 6526,
      "##appears in ": 6527,
      "##, so we ": 6528,
      "Output: 12\r\n": 6529,
      "##dictionary to store the ": 6530,
      "##[i] <= 105\r\n": 6531,
      "Therefore": 6532,
      "##build the ": 6533,
      "##(self, n: int) -> int:\r\n": 6534,
      "##2, 3, 4, ": 6535,
      "##down, ": 6536,
      "##wee": 6537,
      "##subtract": 6538,
      "##candidate ": 6539,
      "##capacity": 6540,
      "##lru_cache\r\n": 6541,
      "##question ": 6542,
      "##brick": 6543,
      "##intersection": 6544,
      "##alphabet": 6545,
      "##an edge between ": 6546,
      "##ince the answer may be very large, return it modulo 109 + 7.\r\n": 6547,
      "##s(self, n: int, ": 6548,
      "##constant ": 6549,
      "##low, high": 6550,
      "Hence, the ": 6551,
      "s[i] ": 6552,
      "##ive ": 6553,
      "##est_": 6554,
      "##0  # ": 6555,
      "##::": 6556,
      "##ny ": 6557,
      "##nth ": 6558,
      "##m)]\r\n": 6559,
      "##ct = ": 6560,
      "##hen": 6561,
      "##sor": 6562,
      "##[5, ": 6563,
      "##17": 6564,
      "##30\r\n": 6565,
      "##500": 6566,
      "##Palindrom": 6567,
      "##Plac": 6568,
      "##Jo": 6569,
      "##iner": 6570,
      "##inside ": 6571,
      "        left = ": 6572,
      "##a total of ": 6573,
      "##] <= ": 6574,
      "##unit ": 6575,
      "##) - 1": 6576,
      "##ess ": 6577,
      "                count += 1\r\n": 6578,
      "##1 for ": 6579,
      "##== len(": 6580,
      "##ab\", \"": 6581,
      "##abbrevi": 6582,
      "##verti": 6583,
      "##sell": 6584,
      "##as many ": 6585,
      "##irr": 6586,
      "##][j] ": 6587,
      "##to the result ": 6588,
      "##) -> List[str]:\r\n": 6589,
      "##elements, ": 6590,
      "##[0..": 6591,
      "            if current_": 6592,
      "##so that the ": 6593,
      "##iden": 6594,
      "##results of ": 6595,
      "##[i].length == 2\r\n": 6596,
      "##is a subsequence of ": 6597,
      "##element of ": 6598,
      "##pairs (": 6599,
      "##elements from the ": 6600,
      "##representing a ": 6601,
      "            return -1\r\n": 6602,
      "##sizes ": 6603,
      "##set:\r\n": 6604,
      "##digit\r\n": 6605,
      "##digits, ": 6606,
      "##smallest possible ": 6607,
      "##dot ": 6608,
      "##long ": 6609,
      "##efficiently.\r\n": 6610,
      "Input: s = \"ab": 6611,
      "                # Check ": 6612,
      "##remove": 6613,
      "Input: n = 2, ": 6614,
      "##group.\r\n": 6615,
      "##make all ": 6616,
      "##updated ": 6617,
      "##structure": 6618,
      "##decreas": 6619,
      "To solve this problem, we can use a ": 6620,
      "##first.\r\n": 6621,
      "        # Start ": 6622,
      "##insert ": 6623,
      "##more than one ": 6624,
      "Explanation: It is ": 6625,
      "##concatenated ": 6626,
      "##layer": 6627,
      "##​​​​​​": 6628,
      "##larger than ": 6629,
      "Input: nums1 = [1,": 6630,
      "##iterating through the ": 6631,
      "Let's implement this ": 6632,
      "Follow up: C": 6633,
      "        nums.sort()\r\n": 6634,
      "##Indices": 6635,
      "##Base case: ": 6636,
      "in": 6637,
      "##i.e.": 6638,
      "##ue": 6639,
      "##nat": 6640,
      "##ting the ": 6641,
      "##cer": 6642,
      "##.sort(": 6643,
      "##sou": 6644,
      "##pack": 6645,
      "##j)\r\n": 6646,
      "##win ": 6647,
      "##[p": 6648,
      "##[6,": 6649,
      "##O\",\"": 6650,
      "##1. ": 6651,
      "##12 ": 6652,
      "##12\r\n": 6653,
      "##\"],\r\n": 6654,
      "##_length": 6655,
      "##5000\r\n": 6656,
      "## <= ": 6657,
      "##'e": 6658,
      "##inorder": 6659,
      "##onto the ": 6660,
      "##enari": 6661,
      "        direction": 6662,
      "##of n ": 6663,
      "##to store ": 6664,
      "##ing this ": 6665,
      "##or (": 6666,
      "##imilar": 6667,
      "                result": 6668,
      "                left += 1\r\n": 6669,
      "##for large ": 6670,
      "##subproblem": 6671,
      "##length of a ": 6672,
      "##ed. The ": 6673,
      "##array by ": 6674,
      "##[i] and ": 6675,
      "##by 1.\r\n": 6676,
      "##counting ": 6677,
      "        return -1\r\n": 6678,
      "##up, ": 6679,
      "##parts ": 6680,
      "##row.\r\n": 6681,
      "##index is ": 6682,
      "##graph\r\n": 6683,
      "##right to ": 6684,
      "##scenari": 6685,
      "##result += ": 6686,
      "Given an array ": 6687,
      "##move to ": 6688,
      "##1],[3,": 6689,
      "##increase": 6690,
      "                # Calculate the ": 6691,
      "##. This allows us to ": 6692,
      "##cost.\r\n": 6693,
      "##s. Each ": 6694,
      "This solution uses the ": 6695,
      "##local ": 6696,
      "##cell is ": 6697,
      "##path.\r\n": 6698,
      "##also be ": 6699,
      "##gain": 6700,
      "##, return false.\r\n": 6701,
      "##popul": 6702,
      "##match the ": 6703,
      "##matrix.\r\n": 6704,
      "n == nums.length\r\n": 6705,
      "##3,4], ": 6706,
      "##Construction": 6707,
      "##first, ": 6708,
      "##max(max_length, ": 6709,
      "##else -1\r\n": 6710,
      "##common divisor ": 6711,
      "##False`.\r\n": 6712,
      "##it's impossible to ": 6713,
      "##Values": 6714,
      "##satisfies ": 6715,
      "##length = max(max_length, ": 6716,
      "##empty.\r\n": 6717,
      "##Result ": 6718,
      "##leading zeros.\r\n": 6719,
      "##whether the ": 6720,
      "##time complexity of this ": 6721,
      "##obtained by ": 6722,
      "##nums[j]": 6723,
      "##. Finally, it returns the ": 6724,
      "##elect ": 6725,
      "##mention": 6726,
      "        result = 0\r\n": 6727,
      "##relation": 6728,
      "##(BFS) ": 6729,
      "        graph = defaultdict(list)\r\n": 6730,
      "##wants to ": 6731,
      "##success": 6732,
      "The input is generated such that ": 6733,
      "##ili": 6734,
      "##a\",\"": 6735,
      "##gn": 6736,
      "##6]]\r\n": 6737,
      "##:0": 6738,
      "##call": 6739,
      "##k]\r\n": 6740,
      "##`, and ": 6741,
      "##`current_": 6742,
      "##2. The ": 6743,
      "##From": 6744,
      "##reward": 6745,
      "##tition": 6746,
      "##: \"": 6747,
      "##ch the ": 6748,
      "##desi": 6749,
      "##cop": 6750,
      "##n x n ": 6751,
      "##] for ": 6752,
      "##in ascending ": 6753,
      "##) are ": 6754,
      "##gets ": 6755,
      "                new_": 6756,
      "Incre": 6757,
      "Input: board ": 6758,
      "##ned": 6759,
      "##submatrix ": 6760,
      "##share": 6761,
      "##shop ": 6762,
      "##vide": 6763,
      "The maximum ": 6764,
      "- \"": 6765,
      "##words.\r\n": 6766,
      "        return dp": 6767,
      "##maximum and ": 6768,
      "from math import ": 6769,
      "##\" to ": 6770,
      "##] = i\r\n": 6771,
      "##node 0 ": 6772,
      "##will store the ": 6773,
      "##user": 6774,
      "##pairs.\r\n": 6775,
      "##elements of the ": 6776,
      "Input: nums = [0,": 6777,
      "##, the number of ": 6778,
      "You are given an m x n ": 6779,
      "##graph is ": 6780,
      "##cost is ": 6781,
      "##size\r\n": 6782,
      "##numbers, ": 6783,
      "##, it is ": 6784,
      "##iterto": 6785,
      "##return the answer ": 6786,
      "##path is ": 6787,
      "##cubo": 6788,
      "##nums1: List[int], ": 6789,
      "##next\r\n": 6790,
      "##ending at ": 6791,
      "##occurrence": 6792,
      "##. We then ": 6793,
      "##include": 6794,
      "##good": 6795,
      "##less than or equal to the ": 6796,
      "##even and ": 6797,
      "##in the range [": 6798,
      "##directions:\r\n": 6799,
      "##change the ": 6800,
      "##joint ": 6801,
      "-105": 6802,
      "##avoid": 6803,
      "##happy ": 6804,
      "##missing": 6805,
      "##triangle ": 6806,
      "##O(n) time complex": 6807,
      "##Maximum ": 6808,
      "##peak ": 6809,
      "##row, col": 6810,
      "##tuple(": 6811,
      "##. Then, it ": 6812,
      "##dx, d": 6813,
      "##restriction": 6814,
      "##try to ": 6815,
      "##secret ": 6816,
      "##consonant": 6817,
      "##ice ": 6818,
      "##a\", \"": 6819,
      "##ai and ": 6820,
      "##6].\r\n": 6821,
      "##:  ": 6822,
      "##o, ": 6823,
      "##might ": 6824,
      "##butt": 6825,
      "##lang": 6826,
      "##ced": 6827,
      "##s1 and ": 6828,
      "##j <= ": 6829,
      "##+1] ": 6830,
      "##\"\"\"\r\n": 6831,
      "##54": 6832,
      "##77": 6833,
      "##Not": 6834,
      "##Dy": 6835,
      "##s we ": 6836,
      "##s for the ": 6837,
      "##en.\r\n": 6838,
      "##ency": 6839,
      "##ste": 6840,
      "##ster ": 6841,
      "        dfs(": 6842,
      "        prefix_sum": 6843,
      "##plus the ": 6844,
      "##n is ": 6845,
      "##active ": 6846,
      "##nums):\r\n": 6847,
      "##white ": 6848,
      "##subse": 6849,
      "##length is ": 6850,
      "##1, the ": 6851,
      "##twor": 6852,
      "1 <= nums[i] <= ": 6853,
      "                    new_": 6854,
      "##word1": 6855,
      "    def can": 6856,
      "##in range(n):\r\n": 6857,
      "        return len(": 6858,
      "##two numbers ": 6859,
      "##< len(": 6860,
      "##s = sorted(": 6861,
      "##kets ": 6862,
      "        for j in range(": 6863,
      "##method": 6864,
      "##rightmost ": 6865,
      "##operations, ": 6866,
      "##[1,2,3": 6867,
      "##node in ": 6868,
      "##' in ": 6869,
      "##from the second ": 6870,
      "##time and ": 6871,
      "##priz": 6872,
      "##k = 0\r\n": 6873,
      "##angle": 6874,
      "##non_": 6875,
      "##set bits ": 6876,
      "##non-zero ": 6877,
      "##n - 1:\r\n": 6878,
      "##sert ": 6879,
      "##zero.\r\n": 6880,
      "##nums1[i], ": 6881,
      "##enerate ": 6882,
      "##digit in ": 6883,
      "##floor ": 6884,
      "##answer[i] is the ": 6885,
      "##out of ": 6886,
      "##s` module ": 6887,
      "##prerequisit": 6888,
      "##at most k ": 6889,
      "##) + 1\r\n": 6890,
      "##replacement": 6891,
      "##Bob's ": 6892,
      "##consists of lowercase English letters.\r\n": 6893,
      "##vowel ": 6894,
      "##Pos": 6895,
      "##Position": 6896,
      "##construct the ": 6897,
      "Thus, ": 6898,
      "        # Iterate over the ": 6899,
      "##merge ": 6900,
      "##, we return `": 6901,
      "##occurrence of each ": 6902,
      "##needed\r\n": 6903,
      "##% 2 == ": 6904,
      "##bisect_right": 6905,
      "##Result**: The ": 6906,
      "##slot": 6907,
      "This solution iterates through each ": 6908,
      "##easily ": 6909,
      "##(self, grid: List[List[int]]) -> int:\r\n": 6910,
      "##removal": 6911,
      "        left, right = 0, ": 6912,
      "            mid = (left + right": 6913,
      "##Push": 6914,
      "        # Helper function to ": 6915,
      "A substring is a contiguous ": 6916,
      "##nums1: List[int], nums2": 6917,
      "Ad": 6918,
      "##:00": 6919,
      "##n)\r\n": 6920,
      "##x <= ": 6921,
      "##ld": 6922,
      "##ping ": 6923,
      "##[3] ": 6924,
      "##200\r\n": 6925,
      "##1-": 6926,
      "##50,": 6927,
      "##Loo": 6928,
      "##89": 6929,
      "##For the ": 6930,
      "##s += ": 6931,
      "##, a ": 6932,
      "##ing to ": 6933,
      "##main": 6934,
      "##100,": 6935,
      "##that satisfies the ": 6936,
      "##assign ": 6937,
      "Initially, ": 6938,
      "##loom": 6939,
      "##nei": 6940,
      "##networ": 6941,
      "##abbb": 6942,
      "##with length ": 6943,
      "##with all ": 6944,
      "##char)\r\n": 6945,
      "1 <= n == ": 6946,
      "##s = [0] ": 6947,
      "##\",\r\n": 6948,
      "##][1] ": 6949,
      "##][0] ": 6950,
      "##<= 104\r\n": 6951,
      "##ilar ": 6952,
      "##elements to ": 6953,
      "##s = set()\r\n": 6954,
      "##\", k = 2\r\n": 6955,
      "##3 * 104\r\n": 6956,
      "##sequences": 6957,
      "##which are ": 6958,
      "##used_": 6959,
      "##there exists ": 6960,
      "Return the maximum possible ": 6961,
      "##self.rank[root": 6962,
      "##digits": 6963,
      "##answer to the ": 6964,
      "##approach is ": 6965,
      "##cell in the ": 6966,
      "For example, the ": 6967,
      "##sign the ": 6968,
      "##constraints and ": 6969,
      "##space.\r\n": 6970,
      "##it is impossible to ": 6971,
      "1 <= nums.length <= 100\r\n": 6972,
      "##s.sort(": 6973,
      "##3],[2,": 6974,
      "##combined ": 6975,
      "##backward": 6976,
      "##coordinates": 6977,
      "##fuel": 6978,
      "##count the occurrences of each ": 6979,
      "-1000": 6980,
      "##skip": 6981,
      "##'1'": 6982,
      "##True`.\r\n": 6983,
      "##. However, ": 6984,
      "##fruits ": 6985,
      "##Only ": 6986,
      "##from 1 to n": 6987,
      "            for i in range(1, ": 6988,
      "        # Check if the ": 6989,
      "##Move the ": 6990,
      "Input: num = ": 6991,
      "Input: num = \"": 6992,
      "words[i] ": 6993,
      "Given an array of integers ": 6994,
      "##', and '": 6995,
      "##bracket": 6996,
      "##Check": 6997,
      "##knight ": 6998,
      "        stack = []\r\n": 6999,
      "## - ": 7000,
      "##ith": 7001,
      "##full": 7002,
      "##v)\r\n": 7003,
      "##ming": 7004,
      "##temp": 7005,
      "##ly-": 7006,
      "##, ": 7007,
      "##`: ": 7008,
      "##]):\r\n": 7009,
      "##]  # ": 7010,
      "##Grid": 7011,
      "##14,": 7012,
      "##1), ": 7013,
      "##16,": 7014,
      "##300\r\n": 7015,
      "##\"ac": 7016,
      "##%= ": 7017,
      "##ans = ": 7018,
      "##orm": 7019,
      "##stines": 7020,
      "##of this ": 7021,
      "##coin ": 7022,
      "##n is the length of the ": 7023,
      "##turn, ": 7024,
      "##ack ": 7025,
      "##10 = ": 7026,
      "##1010": 7027,
      "##ght ": 7028,
      "##most_": 7029,
      "##edy ": 7030,
      "1 <= num": 7031,
      "##s of each ": 7032,
      "##integer matrix ": 7033,
      "##, we will ": 7034,
      "##5,2,": 7035,
      "You must ": 7036,
      "You may ": 7037,
      "##points\r\n": 7038,
      "Input: nums = [2,3,": 7039,
      "##second.\r\n": 7040,
      "##bud": 7041,
      "##4 - ": 7042,
      "##1] and ": 7043,
      "##Integ": 7044,
      "##function returns `": 7045,
      "##7,6,": 7046,
      "##heap = [": 7047,
      "##nodes with ": 7048,
      "##Extra": 7049,
      "##location": 7050,
      "##` to keep track of the ": 7051,
      "##root node ": 7052,
      "##\"a\", \"": 7053,
      "##bott": 7054,
      "##neighbor)\r\n": 7055,
      "##i < n\r\n": 7056,
      "##`n` is ": 7057,
      "##replacing ": 7058,
      "##does not have ": 7059,
      "##parent[x": 7060,
      "##strings word": 7061,
      "##for a cost of ": 7062,
      "            for j in range(i + 1, ": 7063,
      "##'1'.\r\n": 7064,
      "##stack and ": 7065,
      "##similar ": 7066,
      "##changed": 7067,
      "##satisfy ": 7068,
      "##appli": 7069,
      "##apply the ": 7070,
      "##].append((": 7071,
      "##distinct_": 7072,
      "##farthest ": 7073,
      "Return the minimum number of operations ": 7074,
      "##row and column ": 7075,
      "##consist of lowercase English letters.\r\n": 7076,
      "##bag ": 7077,
      "##threshol": 7078,
      "##filled ": 7079,
      "###\",\"#\",\"": 7080,
      "##true,": 7081,
      "##min-heap ": 7082,
      "##log n) ": 7083,
      "##following conditions:\r\n": 7084,
      "##pyra": 7085,
      "So the ": 7086,
      "##perfect ": 7087,
      "##breadth-first search ": 7088,
      "This solution defines a helper function `": 7089,
      "Input: mat = [": 7090,
      "##subsequent ": 7091,
      "##nums1[i], nums2": 7092,
      "##0, and ": 7093,
      "##sq": 7094,
      "##sand": 7095,
      "##pon": 7096,
      "##poly": 7097,
      "##k) ": 7098,
      "##[left": 7099,
      "##]) % MOD\r\n": 7100,
      "##200": 7101,
      "##Group": 7102,
      "##3) = ": 7103,
      "##\"]": 7104,
      "##Fact": 7105,
      "##Hand": 7106,
      "##'O": 7107,
      "##s + ": 7108,
      "##instruction": 7109,
      "##t to ": 7110,
      "##ore the ": 7111,
      "        count = ": 7112,
      "##urch": 7113,
      "##rati": 7114,
      "##n % ": 7115,
      "##or a ": 7116,
      "##mach": 7117,
      "##ribb": 7118,
      "##am ": 7119,
      "##quad": 7120,
      "##nums.length ": 7121,
      "##val, ": 7122,
      "##for this ": 7123,
      "##loy": 7124,
      "##i is ": 7125,
      "##fore ": 7126,
      "##with its ": 7127,
      "1 <= m ": 7128,
      "##string and ": 7129,
      "##words in ": 7130,
      "##from node ": 7131,
      "##sum = 0\r\n": 7132,
      "##one or more ": 7133,
      "##maximum profit ": 7134,
      "##run ": 7135,
      "##3 to ": 7136,
      "            # The ": 7137,
      "##idx": 7138,
      "##where `dp": 7139,
      "##results in ": 7140,
      "##is a string ": 7141,
      "##answers ": 7142,
      "##ison": 7143,
      "##such as ": 7144,
      "##none": 7145,
      "##occup": 7146,
      "##directions ": 7147,
      "##containing the ": 7148,
      "##remains ": 7149,
      "##position of the ": 7150,
      "##. All ": 7151,
      "##singly-": 7152,
      "##spaces.\r\n": 7153,
      "##dp[j": 7154,
      "##0],[2,": 7155,
      "##adjacent": 7156,
      "## <= 105\r\n": 7157,
      "##powers of ": 7158,
      "##values\r\n": 7159,
      "##ensure the ": 7160,
      "##dy\r\n": 7161,
      "##extend": 7162,
      "##product is ": 7163,
      "2 <= n <= 10": 7164,
      "##Option ": 7165,
      "Output: 15\r\n": 7166,
      "##descend": 7167,
      "##squares ": 7168,
      "##num in enumerate(": 7169,
      "                for j in range(": 7170,
      "##chocol": 7171,
      "##partition the ": 7172,
      "##suffix_": 7173,
      "##covered ": 7174,
      "##courses ": 7175,
      "##Calculation**: We ": 7176,
      "##non-empty sequence of ": 7177,
      "##Prefix": 7178,
      "##Prefix ": 7179,
      "##DP table ": 7180,
      "##mile": 7181,
      "##nums[i])\r\n": 7182,
      "##LCM": 7183,
      "##Binary Search ": 7184,
      "##staur": 7185,
      "##Base Case": 7186,
      "##: List[List[int]]) -> List[int]:\r\n": 7187,
      "##greatest common divisor ": 7188,
      "##Difference": 7189,
      "##redundant calculations.\r\n": 7190,
      "Given the root of a binary tree, ": 7191,
      "##. Given the ": 7192,
      "                left = mid + 1\r\n": 7193,
      "To solve this problem efficiently": 7194,
      "##certain ": 7195,
      "        directions = [": 7196,
      "##i):\r\n": 7197,
      "##ub": 7198,
      "##r in range(": 7199,
      "##bloom": 7200,
      "##Since the ": 7201,
      "##cal": 7202,
      "##`p": 7203,
      "##[start": 7204,
      "##[4, ": 7205,
      "##Id": 7206,
      "##2` ": 7207,
      "##11, ": 7208,
      "##12, ": 7209,
      "##Len": 7210,
      "##8],[": 7211,
      "##Height": 7212,
      "##Zer": 7213,
      "##ans[": 7214,
      "##= {}\r\n": 7215,
      "##d of ": 7216,
      "##arm": 7217,
      "##along ": 7218,
      "##of any ": 7219,
      "##cher": 7220,
      "##see ": 7221,
      "##to get the ": 7222,
      "##to keep track of ": 7223,
      "##cook": 7224,
      "##n * ": 7225,
      "##diame": 7226,
      "##for any ": 7227,
      "##= [[1,": 7228,
      "##= [1,2,": 7229,
      "##minus the ": 7230,
      "##1 + 1 = ": 7231,
      "##ed:\r\n": 7232,
      "##version": 7233,
      "##all pairs of ": 7234,
      "##node)\r\n": 7235,
      "##s the same ": 7236,
      "                    count += 1\r\n": 7237,
      "##(self.": 7238,
      "    - ": 7239,
      "##word)\r\n": 7240,
      "        return dp[": 7241,
      "##moves\r\n": 7242,
      "This solution sorts the ": 7243,
      "##] = root": 7244,
      "##ever ": 7245,
      "Input: nums = [1,3,": 7246,
      "##. To ": 7247,
      "##number, ": 7248,
      "##. It uses a ": 7249,
      "##find the maximum ": 7250,
      "##puzz": 7251,
      "        def count_": 7252,
      "##and the last ": 7253,
      "##indices of ": 7254,
      "##increase ": 7255,
      "##cells are ": 7256,
      "##intersect": 7257,
      "##costs ": 7258,
      "##2] -> ": 7259,
      "##2],[2,3],[": 7260,
      "##column\r\n": 7261,
      "##following way": 7262,
      "##palindromes ": 7263,
      "##determines the ": 7264,
      "##help ": 7265,
      "##define a ": 7266,
      "##[2,1,": 7267,
      "##combination ": 7268,
      "##input list ": 7269,
      "This solution uses a sliding window ": 7270,
      "##parent[root": 7271,
      "2 <= n <= 105\r\n": 7272,
      "To solve this problem, we can use ": 7273,
      "##add it to the ": 7274,
      "##indices\r\n": 7275,
      "##query is ": 7276,
      "##'0'": 7277,
      "##lexicographical ": 7278,
      "##absolute difference ": 7279,
      "        dp = [0] ": 7280,
      "##connecting ": 7281,
      "##. Now, ": 7282,
      "##manag": 7283,
      "##otherwise ": 7284,
      "            # Check if the current ": 7285,
      "# Definition for ": 7286,
      "##Distance ": 7287,
      "##ListNode:\r\n": 7288,
      "##text ": 7289,
      "            # Try ": 7290,
      "- Choose ": 7291,
      "##earliest ": 7292,
      "        while left < right:\r\n": 7293,
      "##test cases are ": 7294,
      "##with memoization to ": 7295,
      "##space complexity is ": 7296,
      "To solve the problem of finding the ": 7297,
      "        queue = deque([": 7298,
      "##immediately ": 7299,
      "##asteroid": 7300,
      "##uf.": 7301,
      "  ": 7302,
      "##ef ": 7303,
      "##e'll ": 7304,
      "##0).\r\n": 7305,
      "##0]], ": 7306,
      "##nsw": 7307,
      "##cry": 7308,
      "##s)):\r\n": 7309,
      "##s.length <= 100\r\n": 7310,
      "##pizz": 7311,
      "##). The ": 7312,
      "##Ty": 7313,
      "##To ": 7314,
      "##'?": 7315,
      "##RR": 7316,
      "##instea": 7317,
      "##rout": 7318,
      "            right_": 7319,
      "##dir": 7320,
      "##units ": 7321,
      "##es that ": 7322,
      "##) of the ": 7323,
      "##ole ": 7324,
      "                count += ": 7325,
      "##for every ": 7326,
      "##oton": 7327,
      "##finding ": 7328,
      "##List[List[str]": 7329,
      "##while the ": 7330,
      "##string `s` ": 7331,
      "##words\r\n": 7332,
      "##tastines": 7333,
      "##first two ": 7334,
      "##alculate ": 7335,
      "You have ": 7336,
      "##row][col": 7337,
      "##current number ": 7338,
      "##index `i": 7339,
      "##where edges[i] = [": 7340,
      "##which is a ": 7341,
      "##), the ": 7342,
      "##oose the ": 7343,
      "You are given the ": 7344,
      "Input: nums = [3,": 7345,
      "Input: nums = [1,1,": 7346,
      "##characters\r\n": 7347,
      "##bus ": 7348,
      "##differences": 7349,
      "##s[i] != ": 7350,
      "        # Calculate ": 7351,
      "##. It keeps track of the ": 7352,
      "##divided ": 7353,
      "##divided by ": 7354,
      "##word in word": 7355,
      "##after removing ": 7356,
      "##Remove ": 7357,
      "##longest_": 7358,
      "##compute ": 7359,
      "1. **Graph ": 7360,
      "##matched ": 7361,
      "##iterates through each ": 7362,
      "##[1])\r\n": 7363,
      "#         self.next = ": 7364,
      "1 <= nums.length <= 1000\r\n": 7365,
      "##closing ": 7366,
      "##above shows the ": 7367,
      "##1,0,1,": 7368,
      "##distance\r\n": 7369,
      "##fuel ": 7370,
      "##indices.\r\n": 7371,
      "##correspond": 7372,
      "##'1's ": 7373,
      "##mana ": 7374,
      "##achieve the ": 7375,
      "            # Check if the ": 7376,
      "##for _ in range(n)]\r\n": 7377,
      "# class ListNode:\r\n": 7378,
      "##Moves": 7379,
      "##in-place ": 7380,
      "##converts the ": 7381,
      "##intersection ": 7382,
      "##dp array ": 7383,
      "##total cost is ": 7384,
      "##domino": 7385,
      "This code defines a ": 7386,
      "##x and y ": 7387,
      "##Index": 7388,
      "Step ": 7389,
      "##accordingly.\r\n": 7390,
      "##[0] * n for _ in range(": 7391,
      "##[i - 1][j - 1": 7392,
      "##modulo \\(10^9 + 7\\).\r\n": 7393,
      "grid[i][j] ": 7394,
      "##Depth-First Search ": 7395,
      "##mutation": 7396,
      "##bisect_left(": 7397,
      "##balloon": 7398,
      "        left = 0\r\n": 7399,
      "##maximum and minimum ": 7400,
      "            mid = (left + right) // 2\r\n": 7401,
      "##singly-linked list.\r\n": 7402,
      "# Definition for singly-linked list.\r\n": 7403,
      "##i] ": 7404,
      "##:j": 7405,
      "##:   ": 7406,
      "##ost": 7407,
      "##bf": 7408,
      "##bran": 7409,
      "##y)\r\n": 7410,
      "##SC": 7411,
      "##.\"],[\"": 7412,
      "##h ": 7413,
      "##s[i][j] ": 7414,
      "##s:\\r\r\n": 7415,
      "##plet": 7416,
      "##(current_": 7417,
      "##`arr": 7418,
      "##[b": 7419,
      "##[num": 7420,
      "##T ": 7421,
      "##2\",\"": 7422,
      "##34": 7423,
      "##Word ": 7424,
      "##5.": 7425,
      "##5: ": 7426,
      "##7].\r\n": 7427,
      "##Pic": 7428,
      "##Pop": 7429,
      "##  ": 7430,
      "##s or ": 7431,
      "##recor": 7432,
      "##reserv": 7433,
      "##is used ": 7434,
      "##] if ": 7435,
      "##difficul": 7436,
      "##in which ": 7437,
      "##m - 1, ": 7438,
      "##fill ": 7439,
      "##lose": 7440,
      "##= [0,": 7441,
      "##number that ": 7442,
      "##2 is the ": 7443,
      "##[i] != ": 7444,
      "##i - 1": 7445,
      "##come ": 7446,
      "##with no ": 7447,
      "##ire ": 7448,
      "##sibility ": 7449,
      "##below ": 7450,
      "    \r\n": 7451,
      "##0 degre": 7452,
      "- Swap ": 7453,
      "        return self.": 7454,
      "##-1], ": 7455,
      "##\" can be ": 7456,
      "##0, 0, ": 7457,
      "##current element ": 7458,
      "##sequence.\r\n": 7459,
      "##] = 0\r\n": 7460,
      "##] = 1\r\n": 7461,
      "##- 1 = ": 7462,
      "##ood": 7463,
      "##green ": 7464,
      "##with the given ": 7465,
      "Return the minimum possible ": 7466,
      "##result is the ": 7467,
      "Output: [[": 7468,
      "##probability ": 7469,
      "##5 - ": 7470,
      "##target_": 7471,
      "##function `": 7472,
      "##complement ": 7473,
      "##heap\r\n": 7474,
      "##non-increasing ": 7475,
      "##starting point ": 7476,
      "A string ": 7477,
      "##at the end": 7478,
      "Input: n = 1\r\n": 7479,
      "##zero_": 7480,
      "##palindrome": 7481,
      "##ally, the ": 7482,
      "##3,4]]\r\n": 7483,
      "##namic Pro": 7484,
      "##Defin": 7485,
      "##4],[2,": 7486,
      "##construct ": 7487,
      "##float('inf')] ": 7488,
      "1 <= n <= 100\r\n": 7489,
      "##i and j ": 7490,
      "##occur ": 7491,
      "##insertion": 7492,
      "##starts at ": 7493,
      "##any number of times:\r\n": 7494,
      "##inclusive ": 7495,
      "        # Step 1: ": 7496,
      "##_sum = sum(": 7497,
      "##necessary ": 7498,
      "##filter": 7499,
      "##message": 7500,
      "Here's the implementation of the above approach:\r\n": 7501,
      "##Both ": 7502,
      "##ugly ": 7503,
      "##boole": 7504,
      "                    dp[i][j] = ": 7505,
      "##belong": 7506,
      "##priority queue ": 7507,
      "##set = set(": 7508,
      "##fewer than ": 7509,
      "##bulb": 7510,
      "##ological ": 7511,
      "##time complexity of this solution is ": 7512,
      "##dx, dy in ": 7513,
      "##Dynamic Pro": 7514,
      "##neither ": 7515,
      "##Depth-First Search (DFS": 7516,
      "##Dynamic Program": 7517,
      "De": 7518,
      "On the ": 7519,
      "st": 7520,
      "##a)\r\n": 7521,
      "##gir": 7522,
      "##game": 7523,
      "##:** ": 7524,
      "##tinu": 7525,
      "##Set": 7526,
      "##c.\r\n": 7527,
      "##card ": 7528,
      "##. \r\n": 7529,
      "##sal": 7530,
      "##s[i - 1": 7531,
      "##(p": 7532,
      "##<= ": 7533,
      "##`1": 7534,
      "##`(i, j": 7535,
      "##]) -> ": 7536,
      "##]`.\r\n": 7537,
      "##2. ": 7538,
      "##3)\r\n": 7539,
      "##30,": 7540,
      "##+1:": 7541,
      "##W\",\"": 7542,
      "##We'll ": 7543,
      "##*= ": 7544,
      "##'(": 7545,
      "##thi": 7546,
      "##one, ": 7547,
      "##= 3\r\n": 7548,
      "##sters ": 7549,
      "##is 2.\r\n": 7550,
      "##nums of ": 7551,
      "##num == ": 7552,
      "##chun": 7553,
      "##ded": 7554,
      "##among the ": 7555,
      "##an even ": 7556,
      "##itation": 7557,
      "### Output: ": 7558,
      "##if you ": 7559,
      "##nums2 = ": 7560,
      "##m - ": 7561,
      "##of the approach:\r\n": 7562,
      "##whole ": 7563,
      "##` (": 7564,
      "##` class ": 7565,
      "##> max_": 7566,
      "##each character ": 7567,
      "##forward": 7568,
      "##char_count[": 7569,
      "##all numbers ": 7570,
      "##nodes, ": 7571,
      "##. The `dp` ": 7572,
      "##ending_": 7573,
      "##count.\r\n": 7574,
      "- D": 7575,
      "##t = 0\r\n": 7576,
      "##strings.\r\n": 7577,
      "##strings are ": 7578,
      "##5,3,": 7579,
      "##part of ": 7580,
      "##rows and ": 7581,
      "##**: Finally": 7582,
      "##[1,3,": 7583,
      "##), which is ": 7584,
      "##us_": 7585,
      "##no two ": 7586,
      "##no such ": 7587,
      "##element of the ": 7588,
      "##pairs\r\n": 7589,
      "##elements within ": 7590,
      "##represented by a ": 7591,
      "##greedy ": 7592,
      "##with the minimum ": 7593,
      "Output: [2,": 7594,
      "##Inter": 7595,
      "##stack\r\n": 7596,
      "##rooted at ": 7597,
      "## and the ": 7598,
      "##dog": 7599,
      "##sum of a ": 7600,
      "##word = ": 7601,
      "##abc\"\r\n": 7602,
      "##cells.\r\n": 7603,
      "##. This helps in ": 7604,
      "##start + ": 7605,
      "##removes ": 7606,
      "Input: n = 2\r\n": 7607,
      "##next=None):\r\n": 7608,
      "##following rules:\r\n": 7609,
      "##day.\r\n": 7610,
      "##mid):\r\n": 7611,
      "##connection": 7612,
      "##root of the ": 7613,
      "##English letters.\r\n": 7614,
      "##exists a ": 7615,
      "##n - 1):\r\n": 7616,
      "##shown in the ": 7617,
      "##height of ": 7618,
      "##cases ": 7619,
      "##without changing the ": 7620,
      "##making the ": 7621,
      "##distance, ": 7622,
      "##\"abcd": 7623,
      "##'a', '": 7624,
      "-100 <= ": 7625,
      "##. Hence, the ": 7626,
      "##respective ": 7627,
      "##connected to ": 7628,
      "##linked list": 7629,
      "        for i in range(1, len(": 7630,
      "        for i in range(1, n + 1):\r\n": 7631,
      "##top of the ": 7632,
      "##Sorting": 7633,
      "You are given an integer array nums and ": 7634,
      "##seen_": 7635,
      "##expected ": 7636,
      "##subtree\r\n": 7637,
      "##Search": 7638,
      "#     def __init__(self, val=0, next=None):\r\n": 7639,
      "##queries = [[0,": 7640,
      "##= [0] * ": 7641,
      "##Length ": 7642,
      "##numeric": 7643,
      "##peak": 7644,
      "##chair": 7645,
      "##lcm": 7646,
      "##quality ": 7647,
      "##Recursively ": 7648,
      "##labeled from 0 to ": 7649,
      "##processing all ": 7650,
      "##Minimum ": 7651,
      "##ific": 7652,
      "This solution uses dynamic programming to solve the problem": 7653,
      "##plit the ": 7654,
      "##significant ": 7655,
      "##max-heap ": 7656,
      "##}, {": 7657,
      "##(nx, ny": 7658,
      "##paired ": 7659,
      "##sqrt": 7660,
      "##occupi": 7661,
      "#         self.next = next\r\n": 7662,
      "1. We ": 7663,
      "##fits ": 7664,
      "##ey ": 7665,
      "##edi": 7666,
      "##Sk": 7667,
      "##c in range(": 7668,
      "##s' ": 7669,
      "##s` to ": 7670,
      "##(a ": 7671,
      "##(arr": 7672,
      "##q.append(": 7673,
      "##36": 7674,
      "##\"\\r\r\n": 7675,
      "##7]]\r\n": 7676,
      "##Un": 7677,
      "##Bar": 7678,
      "##FF": 7679,
      "##Fli": 7680,
      "##'R": 7681,
      "##s from the ": 7682,
      "##recur": 7683,
      "##along the ": 7684,
      "##rok": 7685,
      "##semi": 7686,
      "##del": 7687,
      "##er = ": 7688,
      "##cover ": 7689,
      "            current = ": 7690,
      "##in that ": 7691,
      "##are given ": 7692,
      "Output: 4": 7693,
      "##` pointer ": 7694,
      "##k + 1):\r\n": 7695,
      "##preorder": 7696,
      "        # dp": 7697,
      "##edu": 7698,
      "##2 + 1": 7699,
      "##s, and the ": 7700,
      "##\",\"d": 7701,
      "##0 if ": 7702,
      "##arrays.\r\n": 7703,
      "##< n\r\n": 7704,
      "##s = {": 7705,
      "            if nums[i] ": 7706,
      "##3 -> ": 7707,
      "##moves.\r\n": 7708,
      "##current index ": 7709,
      "##current character ": 7710,
      "##so return ": 7711,
      "##you must ": 7712,
      "##differ ": 7713,
      "##has length ": 7714,
      "##s and then ": 7715,
      "##, the answer is ": 7716,
      "            return count\r\n": 7717,
      "##follows the ": 7718,
      "##tree and ": 7719,
      "##[0] == ": 7720,
      "##for the next ": 7721,
      "##trim": 7722,
      "##indices of the ": 7723,
      "##order to ": 7724,
      "        if n == ": 7725,
      "## is not ": 7726,
      "##range of ": 7727,
      "##.length == n\r\n": 7728,
      "##.length <= 50\r\n": 7729,
      "##path\r\n": 7730,
      "##s of the same ": 7731,
      "##there is an edge between ": 7732,
      "##print": 7733,
      "##`nums`.\r\n": 7734,
      "##negative": 7735,
      "##closed ": 7736,
      "##some number of ": 7737,
      "##) for i in range(": 7738,
      "This solution uses a depth-first search (DFS) ": 7739,
      "##returns -1.\r\n": 7740,
      "##Conne": 7741,
      "Output: 13\r\n": 7742,
      "##prime number ": 7743,
      "##column.\r\n": 7744,
      "##freq = ": 7745,
      "##False] ": 7746,
      "##. The `dfs` function ": 7747,
      "##subsequences of ": 7748,
      "1 <= nums[i] <= 105\r\n": 7749,
      "        return max_length\r\n": 7750,
      "        result = [": 7751,
      "##initialize a ": 7752,
      "##char in enumerate(": 7753,
      "        # Count ": 7754,
      "##so_": 7755,
      "##k-th ": 7756,
      "##mapping ": 7757,
      "        # Step 2: ": 7758,
      "##list(range(": 7759,
      "##leveraging the ": 7760,
      "        ans = []\r\n": 7761,
      "##above": 7762,
      "##is defined as the ": 7763,
      "##finish the ": 7764,
      "##xor_": 7765,
      "##stair ": 7766,
      "Here's the implementation of the solution:\r\n": 7767,
      "##Box": 7768,
      "##simply ": 7769,
      "##2 * 105\r\n": 7770,
      "##together": 7771,
      "        i = 0\r\n": 7772,
      "##.items():\r\n": 7773,
      "##favorite": 7774,
      "##front ": 7775,
      "        for u, v in ": 7776,
      "Day ": 7777,
      "##i.e. ": 7778,
      "##after": 7779,
      "##gar": 7780,
      "##6]": 7781,
      "##n ": 7782,
      "##min ": 7783,
      "##mme": 7784,
      "##mirr": 7785,
      "##brok": 7786,
      "##spre": 7787,
      "##s.length ": 7788,
      "##(i, ": 7789,
      "##)))\r\n": 7790,
      "##wra": 7791,
      "##kth": 7792,
      "##`t": 7793,
      "##`start": 7794,
      "##[n - 1": 7795,
      "##2\"\r\n": 7796,
      "##25 ": 7797,
      "##26\r\n": 7798,
      "##1])\r\n": 7799,
      "##1) and ": 7800,
      "##\"]], ": 7801,
      "##All ": 7802,
      "##88": 7803,
      "##Vi": 7804,
      "##Y ": 7805,
      "##}.\r\n": 7806,
      "##s into ": 7807,
      "##ins ": 7808,
      "##= False\r\n": 7809,
      "        word": 7810,
      "        left_": 7811,
      "##is [": 7812,
      "##ing it ": 7813,
      "##ated by ": 7814,
      "            prefix_sum": 7815,
      "##in its ": 7816,
      "##an integer": 7817,
      "##len = ": 7818,
      "##nums1 ": 7819,
      "##10-": 7820,
      "##subseq": 7821,
      "##k * ": 7822,
      "##length += 1\r\n": 7823,
      "##mod ": 7824,
      "##pref": 7825,
      "##in the given ": 7826,
      "        # Process ": 7827,
      "##array nums ": 7828,
      "##array becomes ": 7829,
      "##as we ": 7830,
      "##share ": 7831,
      "##ship": 7832,
      "##nodes\r\n": 7833,
      "##which the ": 7834,
      "##bet": 7835,
      "- For ": 7836,
      "##sum + ": 7837,
      "##, we have ": 7838,
      "##traver": 7839,
      "##s = len(": 7840,
      "##-1],[": 7841,
      "##current window": 7842,
      "##arr = [": 7843,
      "            # Ex": 7844,
      "##lengths ": 7845,
      "##lengths of ": 7846,
      "##idx ": 7847,
      "##points to ": 7848,
      "##will always ": 7849,
      "##+ 1)]\r\n": 7850,
      "##representation of the ": 7851,
      "        # Com": 7852,
      "##contain the ": 7853,
      "##, it returns the ": 7854,
      "##numbers that ": 7855,
      "##and ": 7856,
      "##\", \"c": 7857,
      "##orig": 7858,
      "##divides ": 7859,
      "##direct ": 7860,
      "##contains a ": 7861,
      "##word in the ": 7862,
      "##score = ": 7863,
      "##ust the ": 7864,
      "##2] and ": 7865,
      "##condition.\r\n": 7866,
      "##answer\r\n": 7867,
      "##ift": 7868,
      "##6 - ": 7869,
      "##calculates the number of ": 7870,
      "Return an integer ": 7871,
      "Return an integer array ": 7872,
      "##decrement": 7873,
      "##timestamp": 7874,
      "##operation on ": 7875,
      "##` and `nums2": 7876,
      "##clean": 7877,
      "##Valid": 7878,
      "##'1' ": 7879,
      "##True`": 7880,
      "##'0' ": 7881,
      "##signed ": 7882,
      "##**: The `": 7883,
      "##off ": 7884,
      "##len(nums) - ": 7885,
      "This solution efficiently finds the ": 7886,
      "This solution efficiently computes the ": 7887,
      "##prime_": 7888,
      "##achievable ": 7889,
      "##that, ": 7890,
      "##----": 7891,
      "##ancest": 7892,
      "Explanation: All ": 7893,
      "##stick ": 7894,
      "##candidates": 7895,
      "##tive.\r\n": 7896,
      "##twice": 7897,
      "##format ": 7898,
      "##distribute ": 7899,
      "##x + dx, ": 7900,
      "##-2,-": 7901,
      "##once, ": 7902,
      "##perio": 7903,
      "##health": 7904,
      "##garden": 7905,
      "##rating": 7906,
      "Notice that ": 7907,
      "##rink": 7908,
      "##trailing zero": 7909,
      "##enemy ": 7910,
      "##. This approach ensures that the ": 7911,
      "##.isdigit(": 7912,
      "##breakdown ": 7913,
      "##penal": 7914,
      "##. It can be shown that ": 7915,
      "##continues until ": 7916,
      "##strategy ": 7917,
      "-104 <= ": 7918,
      "##damage ": 7919,
      "##shorter ": 7920,
      "##identical ": 7921,
      "##i.e., ": 7922,
      "##network ": 7923,
      "##sandwi": 7924,
      "##elements within an array.\r\n": 7925,
      "##so_far": 7926,
      "Second ": 7927,
      "Total ": 7928,
      "##0'": 7929,
      "##tran": 7930,
      "##Sh": 7931,
      "##l = ": 7932,
      "##ham": 7933,
      "##s**:\r\n": 7934,
      "##pet": 7935,
      "##(n - ": 7936,
      "##): ": 7937,
      "##`m": 7938,
      "##]))\r\n": 7939,
      "##q = ": 7940,
      "##IP": 7941,
      "##Tree ": 7942,
      "##_size ": 7943,
      "##5) ": 7944,
      "##90": 7945,
      "##9 and ": 7946,
      "##7 = ": 7947,
      "##As": 7948,
      "## is ": 7949,
      "##More ": 7950,
      "##= True\r\n": 7951,
      "##rea": 7952,
      "##reg": 7953,
      "##restaur": 7954,
      "##: Optional[ListNode": 7955,
      "        \"\"\"\r\n": 7956,
      "##of node ": 7957,
      "##num2": 7958,
      "##num:\r\n": 7959,
      "##. O": 7960,
      "##a 2D array ": 7961,
      "##pute the ": 7962,
      "##imum": 7963,
      "##account": 7964,
      "##m - 1": 7965,
      "                dfs(": 7966,
      "##maxSum": 7967,
      "Input: s1 = ": 7968,
      "##it in ": 7969,
      "##most": 7970,
      "##prefer": 7971,
      "##0,2,": 7972,
      "        # Use a ": 7973,
      "##perime": 7974,
      "##i in ": 7975,
      "##i > ": 7976,
      "##i in the ": 7977,
      "##comes ": 7978,
      "##experi": 7979,
      "##with each ": 7980,
      "##with sum ": 7981,
      "##all valid ": 7982,
      "##\",\"E": 7983,
      "##\",\"ab": 7984,
      "                    \r\n": 7985,
      "                    else:\r\n": 7986,
      "                    result.append(": 7987,
      "##end\r\n": 7988,
      "##bean": 7989,
      "##to the first ": 7990,
      "The only ": 7991,
      "The sum of the ": 7992,
      "        return min(": 7993,
      "##0, the ": 7994,
      "##0, 1, and ": 7995,
      "##currently ": 7996,
      "##point\r\n": 7997,
      "##node and ": 7998,
      "##position, ": 7999,
      "            return max_": 8000,
      "##right -= 1\r\n": 8001,
      "##s in this ": 8002,
      "##binary matrix ": 8003,
      "##binary search": 8004,
      "##5 * 10": 8005,
      "##order, ": 8006,
      "##set\r\n": 8007,
      "##matrix, ": 8008,
      "##open ": 8009,
      "##divide the ": 8010,
      "##digits\r\n": 8011,
      "##creator": 8012,
      "        def dp(": 8013,
      "##integers in ": 8014,
      "##aaa": 8015,
      "##remove(": 8016,
      "##grid is ": 8017,
      "##next greater ": 8018,
      "##cell (": 8019,
      "##processes ": 8020,
      "##adds ": 8021,
      "##these two ": 8022,
      "##] == 1:\r\n": 8023,
      "##s_list": 8024,
      "##entifi": 8025,
      "##n - 1.\r\n": 8026,
      "##handles ": 8027,
      "##convert the ": 8028,
      "##runs in ": 8029,
      "##dictionary `": 8030,
      "##transform ": 8031,
      "##2,2,2,2,": 8032,
      "##else 0\r\n": 8033,
      "##'0' or ": 8034,
      "##price of ": 8035,
      "##attemp": 8036,
      "##ranges ": 8037,
      "# print(sol.min": 8038,
      "Explanation: It ": 8039,
      "                    return True\r\n": 8040,
      "##num_str": 8041,
      "##duration": 8042,
      "##not.\r\n": 8043,
      "##so, ": 8044,
      "##simulate the ": 8045,
      "##checking if the ": 8046,
      "##head: Optional[ListNode": 8047,
      "##Trie ": 8048,
      "##stamp ": 8049,
      "There is no ": 8050,
      "##maintaining a ": 8051,
      "##_count = defaultdict(int)\r\n": 8052,
      "##LCA": 8053,
      "##bucket ": 8054,
      "##UnionFind": 8055,
      "##half of the ": 8056,
      "##alphabet ": 8057,
      "##non-negative integer ": 8058,
      "##method `": 8059,
      "##is defined as ": 8060,
      "##math\r\n": 8061,
      "##based on their ": 8062,
      "##X\",\"X\",\"": 8063,
      "        for char in s:\r\n": 8064,
      "##properties of ": 8065,
      "##true if the ": 8066,
      "##feasible ": 8067,
      "##simultaneous": 8068,
      "##Create a ": 8069,
      "Here's the complete solution:\r\n": 8070,
      "##), (1, 0), (0, -1": 8071,
      "s[i] is either ": 8072,
      "##langu": 8073,
      "\t1 <= ": 8074,
      "##ies ": 8075,
      "##e\" ": 8076,
      "##email": 8077,
      "##vir": 8078,
      "##ner": 8079,
      "##bid": 8080,
      "##y:\r\n": 8081,
      "##t_": 8082,
      "##draw": 8083,
      "##ck ": 8084,
      "##s\",\"": 8085,
      "##s))\r\n": 8086,
      "##[] ": 8087,
      "##[2] = ": 8088,
      "##2-": 8089,
      "##15, ": 8090,
      "##1) = ": 8091,
      "##3. The ": 8092,
      "##Can": 8093,
      "##5, and ": 8094,
      "##HH": 8095,
      "##Every ": 8096,
      "##Right": 8097,
      "##Dis": 8098,
      "##X ": 8099,
      "##en, ": 8100,
      "##stu": 8101,
      "##stay": 8102,
      "##is (": 8103,
      "##or false otherwise.\r\n": 8104,
      "##ed from the ": 8105,
      "##acces": 8106,
      "##nums[0]\r\n": 8107,
      "##pos, ": 8108,
      "##ghi": 8109,
      "                next_": 8110,
      "##for fre": 8111,
      "##that has ": 8112,
      "##that is not ": 8113,
      "##per(": 8114,
      "##i * ": 8115,
      "##lefti": 8116,
      "##shel": 8117,
      "##bomb": 8118,
      "##ceil": 8119,
      "##<= 106\r\n": 8120,
      "- `": 8121,
      "##from a ": 8122,
      "        return sum(": 8123,
      "##integer is ": 8124,
      "##\", t = \"": 8125,
      "You need to ": 8126,
      "##so we ": 8127,
      "##operations are ": 8128,
      "##to-": 8129,
      "##points, ": 8130,
      "##points are ": 8131,
      "##node to ": 8132,
      "##node with value ": 8133,
      "##nums[3] ": 8134,
      "##phra": 8135,
      "##s that have ": 8136,
      "##positions of the ": 8137,
      "##there exists a ": 8138,
      "##pair is ": 8139,
      "##s: List[str], ": 8140,
      "##ories": 8141,
      "##after each ": 8142,
      "##s. H": 8143,
      "##sorted list of ": 8144,
      "##column, ": 8145,
      "##day, ": 8146,
      "##either the ": 8147,
      "##problem.\r\n": 8148,
      "##s[i].length == 3\r\n": 8149,
      "##exists, return ": 8150,
      "##lowercase English letters and ": 8151,
      "##stack:\r\n": 8152,
      "##`n`.\r\n": 8153,
      "##Subtra": 8154,
      "##nice ": 8155,
      "##generates ": 8156,
      "##operation on the ": 8157,
      "##product of the ": 8158,
      "##num % ": 8159,
      "##continue ": 8160,
      "##bad ": 8161,
      "##[3,1,": 8162,
      "##skip ": 8163,
      "##skill ": 8164,
      "##rotation": 8165,
      "Thus, the ": 8166,
      "        dp[0] = ": 8167,
      "##rooms ": 8168,
      "##area of the ": 8169,
      "##(i.e., the ": 8170,
      "##students ": 8171,
      "##reduces ": 8172,
      "##algorithm to find the ": 8173,
      "##false,": 8174,
      "##leetcode.com": 8175,
      "##properties": 8176,
      "##write ": 8177,
      "##amount of money ": 8178,
      "        # Try ": 8179,
      "##represents a valid ": 8180,
      "##excluding the ": 8181,
      "##len(s)):\r\n": 8182,
      "##Size": 8183,
      "edges[i].length == 2\r\n": 8184,
      "##compressed ": 8185,
      "##except the ": 8186,
      "##accordingly": 8187,
      "- Take ": 8188,
      "##easier ": 8189,
      "##same.\r\n": 8190,
      "##edges = [[0,1],[0,": 8191,
      "##l, r": 8192,
      "##each other.\r\n": 8193,
      "##key=lambda x: x": 8194,
      "##pivot ": 8195,
      "##operator": 8196,
      "##warehouse": 8197,
      "##* (n + 1) for _ in range(": 8198,
      "##Python code ": 8199,
      "Follow up: Could you ": 8200,
      "##return the answer in any order.\r\n": 8201,
      "##machin": 8202,
      "##x + dx, y + ": 8203,
      "4\r\n": 8204,
      "Operation": 8205,
      "s and ": 8206,
      "##i-th ": 8207,
      "##gap": 8208,
      "##01": 8209,
      "##ding": 8210,
      "##cba": 8211,
      "##her ": 8212,
      "##s]\r\n": 8213,
      "##)) ": 8214,
      "##wea": 8215,
      "##Tra": 8216,
      "##2+": 8217,
      "##1. The ": 8218,
      "##3), (": 8219,
      "##++": 8220,
      "##AG": 8221,
      "##'d": 8222,
      "##X-": 8223,
      "##thes": 8224,
      "##onge": 8225,
      "##refle": 8226,
      "##ary, ": 8227,
      "##arrang": 8228,
      "##nums are ": 8229,
      "##le_": 8230,
      "##cham": 8231,
      "##secur": 8232,
      "##n * (": 8233,
      "##a is ": 8234,
      "##a 0-indexed integer array ": 8235,
      "##atri": 8236,
      "##in reverse ": 8237,
      "##mag": 8238,
      "##make": 8239,
      "##suppl": 8240,
      "##out the ": 8241,
      "Input: m = ": 8242,
      "Input: prices ": 8243,
      "##neg": 8244,
      "##plane": 8245,
      "##it means ": 8246,
      "##teri": 8247,
      "##ed, and ": 8248,
      "##as `": 8249,
      "##char = ": 8250,
      "##low = ": 8251,
      "##s = [[\"": 8252,
      "                    min_": 8253,
      "The second ": 8254,
      "##word, ": 8255,
      "##from any ": 8256,
      "##4,6,": 8257,
      "##two pointers ": 8258,
      "##-1])\r\n": 8259,
      "            if index ": 8260,
      "##tour": 8261,
      "##pairs are ": 8262,
      "##solv": 8263,
      "            return []\r\n": 8264,
      "##with the highest ": 8265,
      "Explanation: The only ": 8266,
      "##earn": 8267,
      "##max(dp": 8268,
      "##11.\r\n": 8269,
      "##digit, ": 8270,
      "##created ": 8271,
      "##subarrays of size ": 8272,
      "##steps:\r\n": 8273,
      "##n - 1 and ": 8274,
      "##cost, ": 8275,
      "##_count:\r\n": 8276,
      "##Starting ": 8277,
      "##` to store the ": 8278,
      "##heights ": 8279,
      "##exactly k ": 8280,
      "##, we can use the ": 8281,
      "##, so return ": 8282,
      "##Suffi": 8283,
      "##), (-1, 0": 8284,
      "##subsequences": 8285,
      "##. Thus, ": 8286,
      "##combination of ": 8287,
      "##problem constraints.\r\n": 8288,
      "##since it ": 8289,
      "##using the `": 8290,
      "##pick": 8291,
      "##constructed ": 8292,
      "##], k = 1\r\n": 8293,
      "Input: grid = [[": 8294,
      "##a, b, c": 8295,
      "##covered by ": 8296,
      "##approach to traverse the ": 8297,
      "##bitwise XOR ": 8298,
      "##cache\r\n": 8299,
      "##s by their ": 8300,
      "##label ": 8301,
      "##check if a ": 8302,
      "##rounded ": 8303,
      "##cars ": 8304,
      "##Perform ": 8305,
      "##parenthes": 8306,
      "##lamp": 8307,
      "        def dfs(node, ": 8308,
      "##combinations of ": 8309,
      "import math\r\n": 8310,
      "##Trie": 8311,
      "##present in the ": 8312,
      "##speed": 8313,
      "##turns ": 8314,
      "##ai, b": 8315,
      "s consists of lowercase English letters.\r\n": 8316,
      "##data structure ": 8317,
      "##ed by a single ": 8318,
      "##Queries": 8319,
      "##order of the remaining ": 8320,
      "##Increment the ": 8321,
      "##norm": 8322,
      "##lane ": 8323,
      "##inside the ": 8324,
      "##bricks ": 8325,
      "Both ": 8326,
      "##Mark the ": 8327,
      "##constraints, a ": 8328,
      "##results of subproblem": 8329,
      "##itertools import ": 8330,
      "##pyramid": 8331,
      "##i:\r\n": 8332,
      "##il ": 8333,
      "##a\r\n": 8334,
      "##://": 8335,
      "##b.\r\n": 8336,
      "##ble ": 8337,
      "##b\"\r\n": 8338,
      "##dge ": 8339,
      "##htt": 8340,
      "##pend": 8341,
      "##(num": 8342,
      "##`c": 8343,
      "##2x": 8344,
      "##2000\r\n": 8345,
      "##11\r\n": 8346,
      "##3):\r\n": 8347,
      "##\":\r\n": 8348,
      "##\"10": 8349,
      "##-hour ": 8350,
      "##Hea": 8351,
      "##'#": 8352,
      "##|= ": 8353,
      "##Ro": 8354,
      "##Roo": 8355,
      "##Que": 8356,
      "##s == ": 8357,
      "##arti": 8358,
      "##ork": 8359,
      "##of all the ": 8360,
      "##is to find the ": 8361,
      "##chess": 8362,
      "##rob": 8363,
      "##ses": 8364,
      "##deco": 8365,
      "##an index ": 8366,
      "##an n x n ": 8367,
      "##quare": 8368,
      "##imbalance ": 8369,
      "##if there are ": 8370,
      "##if there is ": 8371,
      "##104].\r\n": 8372,
      "                stack.append(": 8373,
      "##five ": 8374,
      "##` by ": 8375,
      "##` to the ": 8376,
      "##number and ": 8377,
      "##i >= ": 8378,
      "##li, ": 8379,
      "1 <= n, ": 8380,
      "1 <= Node.val <= 10": 8381,
      "##times\r\n": 8382,
      "##to the last ": 8383,
      "The distance ": 8384,
      "    def sum": 8385,
      "    def largest": 8386,
      "##arrays, ": 8387,
      "##, and we ": 8388,
      "        for right ": 8389,
      "        for _ in range(": 8390,
      "        for a, b in ": 8391,
      "##-1`.\r\n": 8392,
      "##3 (": 8393,
      "##swapping ": 8394,
      "##startPo": 8395,
      "##identifi": 8396,
      "##sequenti": 8397,
      "##will not ": 8398,
      "##will have ": 8399,
      "##s[k": 8400,
      "##no longer ": 8401,
      "##. There is ": 8402,
      "##k = 4\r\n": 8403,
      "##If we ": 8404,
      "##check the ": 8405,
      "##followed by ": 8406,
      "##binary tree": 8407,
      "            for _ in range(": 8408,
      "##self.find(": 8409,
      "##set bit": 8410,
      "        for i in range(n - ": 8411,
      "##values are ": 8412,
      "##company ": 8413,
      "##odd, ": 8414,
      "##sum of its ": 8415,
      "##[0] + ": 8416,
      "##step.\r\n": 8417,
      "##starting at ": 8418,
      "##ticket": 8419,
      "##able to ": 8420,
      "##substring\r\n": 8421,
      "##Choose ": 8422,
      "##Counting ": 8423,
      "##2],[4,": 8424,
      "##substring is ": 8425,
      "##process the ": 8426,
      "##update(": 8427,
      "##bi\r\n": 8428,
      "##reaches the ": 8429,
      "##good_": 8430,
      "##* 10 + ": 8431,
      "##ensure that the ": 8432,
      "##allow ": 8433,
      "##(self, nums: List[int]) -> List[int]:\r\n": 8434,
      "##performed ": 8435,
      "##moves required to ": 8436,
      "##3],[3,": 8437,
      "##equals the ": 8438,
      "2 <= n <= ": 8439,
      "##boundary": 8440,
      "##of ": 8441,
      "##it's possible to ": 8442,
      "##needed to make ": 8443,
      "##feature": 8444,
      "##apply ": 8445,
      "    def minOperation": 8446,
      "All the values of ": 8447,
      "        if not root": 8448,
      "##fact ": 8449,
      "##binary representation ": 8450,
      "##assigned to ": 8451,
      "##present in ": 8452,
      "##s[j]": 8453,
      "Remove ": 8454,
      "Given an integer array nums": 8455,
      "##satisfy the condition": 8456,
      "##pply the ": 8457,
      "Alice and Bob ": 8458,
      "##garden ": 8459,
      "##solve the problem:\r\n": 8460,
      "##output is ": 8461,
      "##s(self, s: str) -> int:\r\n": 8462,
      "##belong ": 8463,
      "##game.\r\n": 8464,
      "        from collections import Counter\r\n": 8465,
      "##nums1 and nums2 ": 8466,
      "In one operation, you can ": 8467,
      "##Alice's ": 8468,
      "##pecific": 8469,
      "##don't ": 8470,
      "##bound ": 8471,
      "##making it suitable ": 8472,
      "##across all ": 8473,
      "##Limit": 8474,
      "##\", s2 = \"": 8475,
      "##nx, ny = ": 8476,
      "##Energ": 8477,
      "##src": 8478,
      "##cuboid": 8479,
      "##even and odd ": 8480,
      "##semi-": 8481,
      "##http": 8482,
      "Since the ": 8483,
      "po": 8484,
      "word ": 8485,
      "##n-": 8486,
      "##n-1": 8487,
      "##bright": 8488,
      "##clas": 8489,
      "##.co": 8490,
      "##s.length <= 1000\r\n": 8491,
      "##sTo": 8492,
      "##(0)\r\n": 8493,
      "##won": 8494,
      "##walk ": 8495,
      "##k: int, ": 8496,
      "##`), ": 8497,
      "##[(": 8498,
      "##[j - 1": 8499,
      "##ID ": 8500,
      "##Gre": 8501,
      "##17,": 8502,
      "##3+": 8503,
      "##31, ": 8504,
      "##+1]": 8505,
      "##4) = ": 8506,
      "##-to-": 8507,
      "##_value": 8508,
      "##Case ": 8509,
      "##\\le": 8510,
      "##9]]\r\n": 8511,
      "##List ": 8512,
      "##Equal": 8513,
      "##| <= ": 8514,
      "##s these ": 8515,
      "##, they ": 8516,
      "##= {": 8517,
      "##f = ": 8518,
      "        root": 8519,
      "        answer ": 8520,
      "        current = ": 8521,
      "##plit": 8522,
      "##] >= ": 8523,
      "##put:   ": 8524,
      "            node.": 8525,
      "##) + 1": 8526,
      "##acter": 8527,
      "                node = ": 8528,
      "##of the second ": 8529,
      "Input: str": 8530,
      "##nested ": 8531,
      "##` array ": 8532,
      "##k + ": 8533,
      "##0,1]\r\n": 8534,
      "##1, 2, and ": 8535,
      "##versa": 8536,
      "##righti": 8537,
      "##by one ": 8538,
      "##by considering ": 8539,
      "##forbid": 8540,
      "##with index ": 8541,
      "##paint ": 8542,
      "##s = [[2,": 8543,
      "##\",\"F": 8544,
      "The longest ": 8545,
      "##(self, nums1: List[int], nums2": 8546,
      "- [1,": 8547,
      "##ility": 8548,
      "##one way to ": 8549,
      "##presse": 8550,
      "            if is_": 8551,
      "##grade": 8552,
      "##spell": 8553,
      "##you may ": 8554,
      "##will not be ": 8555,
      "##nums[index": 8556,
      "##uses the ": 8557,
      "##time to ": 8558,
      "##grid[1][": 8559,
      "##j in ": 8560,
      "##3, 4, ": 8561,
      "                if (": 8562,
      "##graph and ": 8563,
      "##place": 8564,
      "##5 * ": 8565,
      "##sequence is ": 8566,
      "##numbers and ": 8567,
      "##height = ": 8568,
      "##remain ": 8569,
      "                        break\r\n": 8570,
      "##mentor": 8571,
      "##Ensur": 8572,
      "##s(self, word": 8573,
      "##.length <= 500\r\n": 8574,
      "##`k` is ": 8575,
      "##5, 6, ": 8576,
      "##palindromic": 8577,
      "##playing a ": 8578,
      "##multiplic": 8579,
      "##0],[1,1,": 8580,
      "##characters within a ": 8581,
      "##operations on ": 8582,
      "##integers, ": 8583,
      "##Dig": 8584,
      "##Alice win": 8585,
      "##row or ": 8586,
      "##stones = [": 8587,
      "##content": 8588,
      "##directional ": 8589,
      "##3,2,1,": 8590,
      "##3,2,1]\r\n": 8591,
      "##shortest": 8592,
      "##break ": 8593,
      "##rectangles ": 8594,
      "##Delet": 8595,
      "Output: 11\r\n": 8596,
      "##coordinate": 8597,
      "##mid - 1\r\n": 8598,
      "##find all ": 8599,
      "            while i < ": 8600,
      "##finish ": 8601,
      "##top_": 8602,
      "##query, we ": 8603,
      "##Valid ": 8604,
      "##month": 8605,
      "# print(solution": 8606,
      "        # Initialize the result ": 8607,
      "##Produ": 8608,
      "##applying ": 8609,
      "To solve this problem, we need to determine the ": 8610,
      "##consist only of ": 8611,
      "##duration ": 8612,
      "##flip_": 8613,
      "##(0, 0) ": 8614,
      "##back to ": 8615,
      "##lru_cache": 8616,
      "##_count = Counter(": 8617,
      "##LCA ": 8618,
      "##request ": 8619,
      "##receive ": 8620,
      "##necessarily ": 8621,
      "##. Instea": 8622,
      "##threshold": 8623,
      "##.length <= 2000\r\n": 8624,
      "##clockwise": 8625,
      "##criteri": 8626,
      "##union(": 8627,
      "##'c' ": 8628,
      "##from the `collection": 8629,
      "Your task is to ": 8630,
      "Find the ": 8631,
      "##fraction": 8632,
      "##compati": 8633,
      "##standing ": 8634,
      "##involves ": 8635,
      "from functools import lru_cache\r\n": 8636,
      "##up, down, ": 8637,
      "-1000 <= ": 8638,
      "##breadth-first search (BFS) ": 8639,
      "##polyg": 8640,
      "##otonic ": 8641,
      "##origin ": 8642,
      "##parenthesis ": 8643,
      "##\\leq ": 8644,
      "ai != ": 8645,
      "##fast ": 8646,
      "##aff": 8647,
      "##glass ": 8648,
      "##c\r\n": 8649,
      "##p, ": 8650,
      "##p[x": 8651,
      "##war": 8652,
      "##wall ": 8653,
      "##ki": 8654,
      "##`\r\n": 8655,
      "##[l": 8656,
      "##[right": 8657,
      "##2:\\r\r\n": 8658,
      "##3.": 8659,
      "##4).\r\n": 8660,
      "##Wid": 8661,
      "##\"] ": 8662,
      "##'))\r\n": 8663,
      "##'('": 8664,
      "##anyth": 8665,
      "##d is ": 8666,
      "##rev": 8667,
      "##arrows ": 8668,
      "##o not ": 8669,
      "        elif ": 8670,
      "##is already ": 8671,
      "##is equal to the ": 8672,
      "##utes ": 8673,
      "##num2 = ": 8674,
      "##chal": 8675,
      "##set the ": 8676,
      "##to `": 8677,
      "            i = ": 8678,
      "##in Python": 8679,
      "##<= right:\r\n": 8680,
      "##magical ": 8681,
      "##an odd ": 8682,
      "##an index i ": 8683,
      "##ed into ": 8684,
      "##access ": 8685,
      "##10\"\r\n": 8686,
      "##10].\r\n": 8687,
      "##= [[\"": 8688,
      "Example 1:": 8689,
      "Example 2:\\r\r\n": 8690,
      "##2 == ": 8691,
      "##. The result is ": 8692,
      "##end:\r\n": 8693,
      "##counts of ": 8694,
      "##vice ": 8695,
      "The array ": 8696,
      "##words[i] ": 8697,
      "##from \"": 8698,
      "Constraints:\\r\r\n": 8699,
      "        return answer\r\n": 8700,
      "##, and a ": 8701,
      "##2, 4, ": 8702,
      "##3 == ": 8703,
      "##you should ": 8704,
      "##current\r\n": 8705,
      "##points[": 8706,
      "##s to a ": 8707,
      "##s to make ": 8708,
      "##nums[mid": 8709,
      "##grid[i][j": 8710,
      "Input: nums = [5,": 8711,
      "Input: nums = [10,": 8712,
      "##result is the maximum ": 8713,
      "##Initi": 8714,
      "##numbers up to ": 8715,
      "##etter": 8716,
      "##root, ": 8717,
      "0 <= k <= ": 8718,
      "##. It first ": 8719,
      "##set for ": 8720,
      "##non-decreas": 8721,
      "##subarray\r\n": 8722,
      "##luck": 8723,
      "##for the given ": 8724,
      "##between 1 and ": 8725,
      "##consisting ": 8726,
      "##after performing ": 8727,
      "##substrings.\r\n": 8728,
      "##test": 8729,
      "##ence, we return ": 8730,
      "##(0, 1": 8731,
      "##node.left, ": 8732,
      "##1 = \"": 8733,
      "##[1, 2, 3, ": 8734,
      "##. We will ": 8735,
      "##included ": 8736,
      "##second, ": 8737,
      "##weight of ": 8738,
      "##decrement ": 8739,
      "##through all possible ": 8740,
      "##\"abc\" ": 8741,
      "##[0][0] ": 8742,
      "##side of the ": 8743,
      "##times, ": 8744,
      "1 <= n <= 104\r\n": 8745,
      "##friends ": 8746,
      "##[i] <= 1000\r\n": 8747,
      "##leaf": 8748,
      "##within the given ": 8749,
      "##Proces": 8750,
      "##make the array ": 8751,
      "##reduce the ": 8752,
      "This solution efficiently calculates the ": 8753,
      "##specified in the ": 8754,
      "##disjoint ": 8755,
      "##type of ": 8756,
      "##symb": 8757,
      "##in_degree": 8758,
      "##]` represents the ": 8759,
      "##node.right:\r\n": 8760,
      "##s[i][1] ": 8761,
      "##. If it does": 8762,
      "##provide": 8763,
      "##_map[": 8764,
      "##to the right of ": 8765,
      "##pieces ": 8766,
      "##street": 8767,
      "##winner ": 8768,
      "##strength": 8769,
      "##an adjacency list ": 8770,
      "##collision": 8771,
      "##game, ": 8772,
      "##food ": 8773,
      "##start and end ": 8774,
      "##peci": 8775,
      "##a and b ": 8776,
      "##mouse": 8777,
      "##underlined ": 8778,
      "##cumulative ": 8779,
      "##s` module to ": 8780,
      "##Factor": 8781,
      "##following way:\r\n": 8782,
      "##there is an edge between nodes ": 8783,
      "##characters within a string.\r\n": 8784,
      "ai != bi\r\n": 8785,
      "Example 1:\\r\r\n": 8786,
      "4. ": 8787,
      "Select ": 8788,
      "##ey": 8789,
      "##6 and ": 8790,
      "##you": 8791,
      "##ted ": 8792,
      "##c)\r\n": 8793,
      "##c == ": 8794,
      "##pes": 8795,
      "##(or ": 8796,
      "##(node):\r\n": 8797,
      "##`. It then ": 8798,
      "##IN": 8799,
      "##12.\r\n": 8800,
      "##18,": 8801,
      "##19,": 8802,
      "##3\",\"": 8803,
      "##3]], ": 8804,
      "##43": 8805,
      "##4, and ": 8806,
      "##With": 8807,
      "##_length ": 8808,
      "##_length = ": 8809,
      "##CD": 8810,
      "##App": 8811,
      "##8] ": 8812,
      "##Fi": 8813,
      "##MM": 8814,
      "##Drink": 8815,
      "##? ": 8816,
      "##inst": 8817,
      "##, endi": 8818,
      "##ants ": 8819,
      "##anagram": 8820,
      "##= 2, ": 8821,
      "        digit": 8822,
      "            result": 8823,
      "##) >= ": 8824,
      "##quanti": 8825,
      "##action ": 8826,
      "                heapq.heappush(": 8827,
      "##love": 8828,
      "##2,7,": 8829,
      "##otal": 8830,
      "##> 1:\r\n": 8831,
      "##2 or ": 8832,
      "##as long ": 8833,
      "##share the ": 8834,
      "##adv": 8835,
      "##. In the ": 8836,
      "##sum to ": 8837,
      "    def check": 8838,
      "##is the largest ": 8839,
      "##s = max(max_": 8840,
      "##on each ": 8841,
      "##left.\r\n": 8842,
      "            if (": 8843,
      "##row_": 8844,
      "##current node ": 8845,
      "##operation is ": 8846,
      "##where 0 <= ": 8847,
      "##] = max(": 8848,
      "##count is ": 8849,
      "##no more ": 8850,
      "##elements and ": 8851,
      "##time is ": 8852,
      "##time taken ": 8853,
      "##. There ": 8854,
      "            return (": 8855,
      "##scre": 8856,
      "##formally, ": 8857,
      "##, it calculates the ": 8858,
      "##1] -> ": 8859,
      "##5 is ": 8860,
      "##target: int) -> int:\r\n": 8861,
      "##rooted ": 8862,
      "##1 and word": 8863,
      "##subarray sum ": 8864,
      "##zero, ": 8865,
      "##Stud": 8866,
      "##s. \r\n": 8867,
      "##groups of ": 8868,
      "##located ": 8869,
      "##**: We use ": 8870,
      "##collected ": 8871,
      "##[0,1,2,": 8872,
      "##distance of ": 8873,
      "##distance is ": 8874,
      "##product = ": 8875,
      "##in a 32-bit ": 8876,
      "##frequenc": 8877,
      "##updates ": 8878,
      "##2,3]]\r\n": 8879,
      "##ensures that each ": 8880,
      "##positive integers.\r\n": 8881,
      "It is ": 8882,
      "##queries[i] = [": 8883,
      "Output: \"\"\r\n": 8884,
      "##checks each ": 8885,
      "##keys ": 8886,
      "##keys(": 8887,
      "##[2,4,": 8888,
      "##shown that the ": 8889,
      "##seconds ": 8890,
      "##float:\r\n": 8891,
      "##[i - 1][j": 8892,
      "##optimally.\r\n": 8893,
      "##i, j, ": 8894,
      "##visited\r\n": 8895,
      "##get a ": 8896,
      "##[j]:\r\n": 8897,
      "##shortest distance ": 8898,
      "1 <= n <= 1000\r\n": 8899,
      "##closest_": 8900,
      "You are given a 0-indexed string ": 8901,
      "##within the given constraints.\r\n": 8902,
      "##head of the ": 8903,
      "##head of a ": 8904,
      "##s[i] = [xi, yi": 8905,
      "##. Now ": 8906,
      "##(self, s: str) -> str:\r\n": 8907,
      "##bisect.": 8908,
      "##stit": 8909,
      "##down the ": 8910,
      "##.popleft()\r\n": 8911,
      "##sticks ": 8912,
      "##Number of ": 8913,
      "##candidates ": 8914,
      "##mapping": 8915,
      "##triplets ": 8916,
      "##twice.\r\n": 8917,
      "        # Step 3: ": 8918,
      "##maintaining the ": 8919,
      "        # Fill ": 8920,
      "##s.length == n - 1\r\n": 8921,
      "##Move to the next ": 8922,
      "##[node]:\r\n": 8923,
      "##rearranged to ": 8924,
      "##. Then, ": 8925,
      "            graph[u": 8926,
      "##. So the ": 8927,
      "##current_sum)\r\n": 8928,
      "##derived from ": 8929,
      "##//= ": 8930,
      "##floor(": 8931,
      "##needs to be ": 8932,
      "##separated by a single ": 8933,
      "##accumulated ": 8934,
      "##starti, endi": 8935,
      "##Algorith": 8936,
      "##frequencies ": 8937,
      "##together ": 8938,
      "##Friend": 8939,
      "##further ": 8940,
      "##waiting ": 8941,
      "##frog ": 8942,
      "##energyDrink": 8943,
      "##float('-inf')\r\n": 8944,
      "##transformation": 8945,
      "##desired ": 8946,
      "-105 <= ": 8947,
      "##button ": 8948,
      "##Push the ": 8949,
      "A substring is a contiguous sequence of ": 8950,
      "##non-empty sequence of elements within an array.\r\n": 8951,
      "##branch": 8952,
      "##Dynamic Programming ": 8953,
      "##ancestor ": 8954,
      "##'0' or '1'.\r\n": 8955,
      "##x + dx, y + dy\r\n": 8956,
      "##nx, ny = x + dx, y + dy\r\n": 8957,
      "2. We ": 8958,
      "Fir": 8959,
      "##u)\r\n": 8960,
      "##vot": 8961,
      "##ve, ": 8962,
      "##xor ": 8963,
      "##lap": 8964,
      "##cru": 8965,
      "##sn": 8966,
      "##s/": 8967,
      "##s[i + ": 8968,
      "##purch": 8969,
      "##j.\r\n": 8970,
      "##well ": 8971,
      "##`a": 8972,
      "##[r": 8973,
      "##[c": 8974,
      "##[3,4,": 8975,
      "##It ": 8976,
      "##Tw": 8977,
      "##15.\r\n": 8978,
      "##1-indexed ": 8979,
      "##3. ": 8980,
      "##3, the ": 8981,
      "##-up ": 8982,
      "##_values": 8983,
      "##_count = 0\r\n": 8984,
      "##74": 8985,
      "##LL": 8986,
      "##UR": 8987,
      "##Match": 8988,
      "##then": 8989,
      "##rele": 8990,
      "##redi": 8991,
      "##red.\r\n": 8992,
      "##red, ": 8993,
      "##tile ": 8994,
      "##stable ": 8995,
      "##alloy": 8996,
      "##: List[str]": 8997,
      "        index": 8998,
      "##ingredi": 8999,
      "##nums that ": 9000,
      "##robb": 9001,
      "##n / ": 9002,
      "##] > 0:\r\n": 9003,
      "            node = ": 9004,
      "##older": 9005,
      "##[i-": 9006,
      "##nother ": 9007,
      "##if all ": 9008,
      "##nums[i - ": 9009,
      "##1,2]\r\n": 9010,
      "##m + 1):\r\n": 9011,
      "##confli": 9012,
      "##val)\r\n": 9013,
      "##for which ": 9014,
      "##file": 9015,
      "## <= n - 1\r\n": 9016,
      "##that satisfies ": 9017,
      "##of the given ": 9018,
      "Example 4:\r\n": 9019,
      "Input: k = ": 9020,
      "##` array": 9021,
      "##submatri": 9022,
      "##1 XOR ": 9023,
      "        # Pre": 9024,
      "##2 + 1 = ": 9025,
      "##[i] represents the ": 9026,
      "##lie ": 9027,
      "##exha": 9028,
      "Explanation: No ": 9029,
      "##by 1 ": 9030,
      "##with one ": 9031,
      "##pay ": 9032,
      "##\",\"1\",\"": 9033,
      "##. The time complexity of this solution is ": 9034,
      "The test cases are ": 9035,
      "- S": 9036,
      "- For each ": 9037,
      "- Finally": 9038,
      "##, and so ": 9039,
      "##2, the ": 9040,
      "##3 is the ": 9041,
      "##parity ": 9042,
      "##row + ": 9043,
      "##idx = ": 9044,
      "##user ": 9045,
      "##s and a ": 9046,
      "##[i][j - 1": 9047,
      "##but the ": 9048,
      "##small ": 9049,
      "##s[i] - ": 9050,
      "##1,2,2,": 9051,
      "##1,2,3]\r\n": 9052,
      "##6,5,": 9053,
      "Explanation: The diagram ": 9054,
      "##For example, ": 9055,
      "##orial ": 9056,
      "##velo": 9057,
      "##lines ": 9058,
      "##nums into ": 9059,
      "##queries.\r\n": 9060,
      "Input: s = \"0": 9061,
      "Input: s = \"aa": 9062,
      "                # Update the ": 9063,
      "##of a node ": 9064,
      "##score = 0\r\n": 9065,
      "##. This ensures that the ": 9066,
      "                        queue.append(": 9067,
      "##substrings in ": 9068,
      "##removed.\r\n": 9069,
      "Input: n = 3\r\n": 9070,
      "Input: n = 6, ": 9071,
      "##_count` ": 9072,
      "##substring in ": 9073,
      "##edges: List[List[int]], ": 9074,
      "##(0, 0, ": 9075,
      "##problem's ": 9076,
      "##es = [[1,": 9077,
      "##, return 0.\r\n": 9078,
      "##dp[m": 9079,
      "##at least two ": 9080,
      "##s[i])\r\n": 9081,
      "##inf\r\n": 9082,
      "##score, ": 9083,
      "##pping ": 9084,
      "##at most `k` ": 9085,
      "##replace the ": 9086,
      "##greater than or equal to the ": 9087,
      "##subsequence.\r\n": 9088,
      "##valid\r\n": 9089,
      "##moves to ": 9090,
      "##calculate the number of ": 9091,
      "##3], [": 9092,
      "##(i.e. ": 9093,
      "##num - ": 9094,
      "##backlog": 9095,
      "##strings s and ": 9096,
      "Output: 16\r\n": 9097,
      "##[j]\r\n": 9098,
      "##'a'": 9099,
      "##group is ": 9100,
      "##4],[1,": 9101,
      "##picked ": 9102,
      "##choose any ": 9103,
      "##[0][0] = ": 9104,
      "nums[": 9105,
      "nums[i] ": 9106,
      "##stack to ": 9107,
      "1 <= s.length <= 1000\r\n": 9108,
      "##iterate through each ": 9109,
      "To solve this problem, we need to find the ": 9110,
      "##) == 1:\r\n": 9111,
      "##0 + 0 + ": 9112,
      "##duplicates ": 9113,
      "You are given two 0-indexed ": 9114,
      "##j < len(": 9115,
      "##DP array ": 9116,
      "##count the number of valid ": 9117,
      "##power_of_": 9118,
      "##r < ": 9119,
      "##having a ": 9120,
      "1 <= m, n <= 10": 9121,
      "##n - 1, -1, -1):\r\n": 9122,
      "##\"aaaa": 9123,
      "##token ": 9124,
      "##dp array\r\n": 9125,
      "##alphabe": 9126,
      "In the second ": 9127,
      "##dominant ": 9128,
      "##abbr": 9129,
      "##), where n is the length of the ": 9130,
      "##.length <= 20\r\n": 9131,
      "##. This is because ": 9132,
      "##fast": 9133,
      "##employee ": 9134,
      "##employees ": 9135,
      "##ans += ": 9136,
      "##0 <= nx < ": 9137,
      "##0 <= ny < ": 9138,
      "##Key": 9139,
      "##(root.": 9140,
      "##dictionary\r\n": 9141,
      "##edges = [[0,1],[1,": 9142,
      "##top-left ": 9143,
      "##, so the answer is ": 9144,
      "##Optional[ListNode]:\r\n": 9145,
      "##doesn't ": 9146,
      "##rovert": 9147,
      "It is guaranteed that ": 9148,
      "##vertices ": 9149,
      "##cherri": 9150,
      "##dx, dy in directions:\r\n": 9151,
      "##without changing the order of the remaining ": 9152,
      "Return an integer denoting the ": 9153,
      "##normaliz": 9154,
      "        if not root:\r\n": 9155,
      "## to ": 9156,
      "## for ": 9157,
      "## * ": 9158,
      "##far ": 9159,
      "##a\".\r\n": 9160,
      "##x2, y": 9161,
      "##bon": 9162,
      "##bur": 9163,
      "##bus": 9164,
      "##yel": 9165,
      "##ts to ": 9166,
      "##send": 9167,
      "##s. It then ": 9168,
      "##(4, ": 9169,
      "##j:\r\n": 9170,
      "##)\"\r\n": 9171,
      "##`d": 9172,
      "##`nums2": 9173,
      "##`right` ": 9174,
      "##In the ": 9175,
      "##IP ": 9176,
      "##21,": 9177,
      "##20.\r\n": 9178,
      "##26 ": 9179,
      "##16\r\n": 9180,
      "##3-": 9181,
      "##4 = 1": 9182,
      "##Wind": 9183,
      "##_str": 9184,
      "##_traversal": 9185,
      "##After": 9186,
      "## and ": 9187,
      "##Matri": 9188,
      "##read ": 9189,
      "##stk": 9190,
      "        g": 9191,
      "        last_": 9192,
      "        num_": 9193,
      "##lect ": 9194,
      "##chr": 9195,
      "##rod": 9196,
      "##seat ": 9197,
      "##plot": 9198,
      "##. Wh": 9199,
      "##a + ": 9200,
      "            n = len(": 9201,
      "            stack.append(": 9202,
      "##unmarked ": 9203,
      "##matic": 9204,
      "##ed and ": 9205,
      "## = {": 9206,
      "##100\r\n": 9207,
      "##100 ": 9208,
      "                self.": 9209,
      "##that can ": 9210,
      "##number to ": 9211,
      "##ely.\r\n": 9212,
      "##apple ": 9213,
      "##iver": 9214,
      "##1, 3, ": 9215,
      "##self-": 9216,
      "##independ": 9217,
      "##cted": 9218,
      "##with 0 ": 9219,
      "##to the same ": 9220,
      "##solution.\r\n": 9221,
      "##s = (": 9222,
      "##the ": 9223,
      "##key.\r\n": 9224,
      "##max_sum": 9225,
      "##first k ": 9226,
      "        for word in word": 9227,
      "##strings, ": 9228,
      "from itertools import ": 9229,
      "##\" --> ": 9230,
      "##sword ": 9231,
      "##arr[i] ": 9232,
      "##operation:\r\n": 9233,
      "##sorted by ": 9234,
      "##can be placed ": 9235,
      "##which represents the ": 9236,
      "##results in the ": 9237,
      "##is a list of ": 9238,
      "##from the current ": 9239,
      "##j == ": 9240,
      "##appropri": 9241,
      "Return the total number of ": 9242,
      "Return the length of the longest ": 9243,
      "##forms a ": 9244,
      "##cost = [": 9245,
      "Output: [3,": 9246,
      "##numbers from 1 to ": 9247,
      "##set `": 9248,
      "##root = ": 9249,
      "##x, y in ": 9250,
      "A subsequence ": 9251,
      "##cells in the ": 9252,
      "##start of the ": 9253,
      "##prefix and ": 9254,
      "##palindrome(": 9255,
      "##we can achieve ": 9256,
      "##distinct integers ": 9257,
      "##there is only one ": 9258,
      "##Dict": 9259,
      "##command": 9260,
      "##child, ": 9261,
      "##`nums[i]": 9262,
      "        max_length = 0\r\n": 9263,
      "##meaning ": 9264,
      "##pattern = ": 9265,
      "##` is `": 9266,
      "##Counter()\r\n": 9267,
      "##. That ": 9268,
      "##previously ": 9269,
      "##board.\r\n": 9270,
      "##without any ": 9271,
      "##odd and ": 9272,
      "##rung": 9273,
      "##coordinat": 9274,
      "##continuous ": 9275,
      "##pick the ": 9276,
      "##ed as follows:\r\n": 9277,
      "##price = ": 9278,
      "s consists only of lowercase English letters.\r\n": 9279,
      "##Once ": 9280,
      "##required.\r\n": 9281,
      "            current_sum += ": 9282,
      "1 <= nums[i] <= 100\r\n": 9283,
      "##(i, j, ": 9284,
      "##achieve.\r\n": 9285,
      "##grid[n": 9286,
      "##duplicat": 9287,
      "##duplicates": 9288,
      "##into a single ": 9289,
      "##expand": 9290,
      "Explanation: After ": 9291,
      "##symme": 9292,
      "##in the range [1, n": 9293,
      "##memoization": 9294,
      "##bank": 9295,
      "        # Traverse the ": 9296,
      "##go from ": 9297,
      "##robots ": 9298,
      "##ord(c": 9299,
      "##memory ": 9300,
      "##period": 9301,
      "##s, so we return ": 9302,
      "##) or (": 9303,
      "##`num` ": 9304,
      "##again ": 9305,
      "##ai, bi] indicates that ": 9306,
      "##quick ": 9307,
      "##toward": 9308,
      "##known ": 9309,
      "##build a ": 9310,
      "This approach ensures that we efficiently find the ": 9311,
      "##456": 9312,
      "Given an integer n, return the ": 9313,
      "Return an array answer ": 9314,
      "##n + 1)]\r\n": 9315,
      "##stock ": 9316,
      "##radius ": 9317,
      "-109 <= ": 9318,
      "##hash map ": 9319,
      "##common_": 9320,
      "##Calculation**: For each ": 9321,
      "##record": 9322,
      "##sorted in ascending order.\r\n": 9323,
      "##folder ": 9324,
      "##Count the number of ": 9325,
      "##Palindrome": 9326,
      "##budget": 9327,
      "##ribbon": 9328,
      "##Identif": 9329,
      "##diameter ": 9330,
      "            # Expl": 9331,
      "##.isdigit():\r\n": 9332,
      "##breakdown of the approach:\r\n": 9333,
      "##n * (n - 1": 9334,
      "Otherwise": 9335,
      "Since the answer may be very large, return it modulo 109 + 7.\r\n": 9336,
      "## of the ": 9337,
      "##ger": 9338,
      "##0])\r\n": 9339,
      "##m.\r\n": 9340,
      "##ben": 9341,
      "##tan": 9342,
      "##talle": 9343,
      "##Sm": 9344,
      "##Sort ": 9345,
      "##Square": 9346,
      "##ling ": 9347,
      "##s) and ": 9348,
      "##(n - 1": 9349,
      "##(since ": 9350,
      "##w in ": 9351,
      "##k)": 9352,
      "##k: int) -> List[int]:\r\n": 9353,
      "##[1]\r\n": 9354,
      "##[-1, ": 9355,
      "##[3,2,": 9356,
      "##Or": 9357,
      "##2) and ": 9358,
      "##1\" ": 9359,
      "##1]:\r\n": 9360,
      "##1\", \"": 9361,
      "##1\".\r\n": 9362,
      "##30, ": 9363,
      "##3).\r\n": 9364,
      "##\". \r\n": 9365,
      "##-4,": 9366,
      "##-5,": 9367,
      "##_number": 9368,
      "##_count += 1\r\n": 9369,
      "##CC": 9370,
      "##Use the ": 9371,
      "##Fre": 9372,
      "##Edge ": 9373,
      "##'-": 9374,
      "##X = ": 9375,
      "##s at ": 9376,
      "##s required to ": 9377,
      "##incom": 9378,
      "##the first ": 9379,
      "##reve": 9380,
      "##states": 9381,
      "##y - ": 9382,
      "##: List[str], ": 9383,
      "        operation": 9384,
      "        right_": 9385,
      "        odd_": 9386,
      "##is 1.\r\n": 9387,
      "##num2 ": 9388,
      "##to determine the ": 9389,
      "##coprime ": 9390,
      "##at_": 9391,
      "            dfs(": 9392,
      "            next_": 9393,
      "##or no ": 9394,
      "##or trailing ": 9395,
      "##an infinite ": 9396,
      "##nums.length <= 105\r\n": 9397,
      "##100, ": 9398,
      "##m + ": 9399,
      "##str1": 9400,
      "                answer": 9401,
      "##that contains ": 9402,
      "##ask": 9403,
      "Input: x = ": 9404,
      "Input: target = ": 9405,
      "##return -1.\r\n": 9406,
      "##1 with ": 9407,
      "##in the current ": 9408,
      "##in the array.\r\n": 9409,
      "        # Jo": 9410,
      "##array into ": 9411,
      "##we reach the ": 9412,
      "##ext ": 9413,
      "##excess ": 9414,
      "##times the ": 9415,
      "##. The main ": 9416,
      "##range.\r\n": 9417,
      "##string in ": 9418,
      "##visible ": 9419,
      "The subarray ": 9420,
      "##from both ": 9421,
      "##import": 9422,
      "##cols):\r\n": 9423,
      "##, and each ": 9424,
      "##rules ": 9425,
      "##any of them.\r\n": 9426,
      "##first character ": 9427,
      "##on key ": 9428,
      "##2, -1, -1):\r\n": 9429,
      "##rows):\r\n": 9430,
      "##**: After ": 9431,
      "##index)\r\n": 9432,
      "##minimum value ": 9433,
      "##matter ": 9434,
      "##current.val": 9435,
      "##points (": 9436,
      "##users ": 9437,
      "##' becomes ": 9438,
      "##there will be ": 9439,
      "##grid, ": 9440,
      "##left child ": 9441,
      "##characters of ": 9442,
      "##binary array ": 9443,
      "##cost += ": 9444,
      "##6,6,": 9445,
      "##root.val": 9446,
      "##earn ": 9447,
      "##oppon": 9448,
      "##1 and 2 ": 9449,
      "##subarray of length ": 9450,
      "##line.\r\n": 9451,
      "##path from the ": 9452,
      "##sum of values ": 9453,
      "##tries to ": 9454,
      "##size of ": 9455,
      "Input: s = \"abcd": 9456,
      "##abcdef": 9457,
      "                        # ": 9458,
      "##piles": 9459,
      "##at the end of the ": 9460,
      "##nums1)\r\n": 9461,
      "##group\r\n": 9462,
      "##day\r\n": 9463,
      "##days.\r\n": 9464,
      "##paths from ": 9465,
      "##digit = ": 9466,
      "##using `": 9467,
      "##largest element ": 9468,
      "Note ": 9469,
      "##target = [": 9470,
      "##reverse the ": 9471,
      "##high = ": 9472,
      "##mask\r\n": 9473,
      "##exactly `k` ": 9474,
      "##conditions ": 9475,
      "##[i][j] == ": 9476,
      "##\"aab": 9477,
      "## <= 104\r\n": 9478,
      "##taking the ": 9479,
      "##infected ": 9480,
      "##2 + (": 9481,
      "##overall ": 9482,
      "##base-": 9483,
      "##mark the ": 9484,
      "##even.\r\n": 9485,
      "##3],[0,": 9486,
      "##conversion ": 9487,
      "##parent[u": 9488,
      "##transformed ": 9489,
      "##first\r\n": 9490,
      "##query\r\n": 9491,
      "##picture ": 9492,
      "##query in ": 9493,
      "##eventu": 9494,
      "##'1':\r\n": 9495,
      "##100].\r\n": 9496,
      "1 <= s.length <= 100\r\n": 9497,
      "##reversed": 9498,
      "##strictly greater than ": 9499,
      "##False`": 9500,
      "For example, \"": 9501,
      "##destro": 9502,
      "##leading or trailing ": 9503,
      "##].append(v)\r\n": 9504,
      "##overlap ": 9505,
      "Explanation: In the ": 9506,
      "##. In other words, ": 9507,
      "##syste": 9508,
      "##consisting of n ": 9509,
      "##workerTimes": 9510,
      "##children\r\n": 9511,
      "##arrival": 9512,
      "##arrive ": 9513,
      "##has the same ": 9514,
      "##blue": 9515,
      "##Optional[TreeNode]:\r\n": 9516,
      "##people who ": 9517,
      "##s[i][0] ": 9518,
      "##. If it i": 9519,
      "Remove the ": 9520,
      "##leaves ": 9521,
      "##numeric ": 9522,
      "##at a cost of ": 9523,
      "##Python's ": 9524,
      "##Time = [": 9525,
      "##memory": 9526,
      "##\", k = 1\r\n": 9527,
      "##difference\r\n": 9528,
      "##infinity": 9529,
      "##. Initially, ": 9530,
      "##an integer k, return the ": 9531,
      "edges.length == n - 1\r\n": 9532,
      "        dp = [[": 9533,
      "##[nx][ny": 9534,
      "At time ": 9535,
      "##Index ": 9536,
      "## <= nums[i] <= 109\r\n": 9537,
      "##hero": 9538,
      "##min-heap": 9539,
      "##stack[-1]": 9540,
      "##directory ": 9541,
      "##. Therefore, ": 9542,
      "##merged ": 9543,
      "##look ": 9544,
      "##generate all possible ": 9545,
      "-109 <= nums[i] <= 109\r\n": 9546,
      "##exceeds ": 9547,
      "                right = mid\r\n": 9548,
      "##sorted in non-decreasing order.\r\n": 9549,
      "##two-pointer technique ": 9550,
      "##.split('": 9551,
      "##goal is to ": 9552,
      "##well-": 9553,
      "##video": 9554,
      "##girl": 9555,
      "##Flip": 9556,
      "        if n == 1:\r\n": 9557,
      "        # Process each ": 9558,
      "##better ": 9559,
      "##perimeter ": 9560,
      "##for free.\r\n": 9561,
      "##li, ri": 9562,
      "##advan": 9563,
      "-23": 9564,
      "0 ": 9565,
      "Bob": 9566,
      "Hence, ": 9567,
      "##ide ": 9568,
      "##evi": 9569,
      "##e', '": 9570,
      "##0-": 9571,
      "##ui and ": 9572,
      "##v = ": 9573,
      "##x1, y": 9574,
      "##bad": 9575,
      "##citation": 9576,
      "##hn": 9577,
      "##hom": 9578,
      "##(s, ": 9579,
      "##(start, ": 9580,
      "##(i + 1": 9581,
      "##Te": 9582,
      "##^= ": 9583,
      "##24,": 9584,
      "##12]\r\n": 9585,
      "##4]], ": 9586,
      "##4), (": 9587,
      "##-10,": 9588,
      "##_len": 9589,
      "##_cost": 9590,
      "##5)\r\n": 9591,
      "##\\times ": 9592,
      "##US": 9593,
      "##Rect": 9594,
      "##None ": 9595,
      "##Mon": 9596,
      "##Mod": 9597,
      "##Decre": 9598,
      "##Do not ": 9599,
      "##s an ": 9600,
      "##s can ": 9601,
      "##ingCost": 9602,
      "##is called ": 9603,
      "##nums of size ": 9604,
      "##chee": 9605,
      "##del ": 9606,
      "##to their ": 9607,
      "##rain": 9608,
      "##. More ": 9609,
      "##a 0-indexed ": 9610,
      "##at that ": 9611,
      "##an you ": 9612,
      "##) is the ": 9613,
      "##ouque": 9614,
      "                last_": 9615,
      "## <= n\r\n": 9616,
      "##as:\r\n": 9617,
      "##return false.\r\n": 9618,
      "##1 are ": 9619,
      "##it by ": 9620,
      "##it becomes ": 9621,
      "##it is not possible to ": 9622,
      "        # This ": 9623,
      "##comb": 9624,
      "##indegre": 9625,
      "##pay": 9626,
      "##adher": 9627,
      "##bey": 9628,
      "##to the target ": 9629,
      "##take": 9630,
      "        return (": 9631,
      "##len(arr": 9632,
      "##< min_": 9633,
      "##s = 1\r\n": 9634,
      "        for r in range(": 9635,
      "##strings in ": 9636,
      "##strings of length ": 9637,
      "##\", t = ": 9638,
      "##right)\r\n": 9639,
      "##moving the ": 9640,
      "##row is ": 9641,
      "##current node's ": 9642,
      "##**: If the ": 9643,
      "##arr[j] ": 9644,
      "##start:": 9645,
      "##[1,4,": 9646,
      "##current.next\r\n": 9647,
      "##count of the ": 9648,
      "##will help ": 9649,
      "##+ 1)": 9650,
      "##from the end ": 9651,
      "##has two ": 9652,
      "##characters that ": 9653,
      "##characters and ": 9654,
      "##[i][1] ": 9655,
      "                if grid[i][j] ": 9656,
      "##total cost of ": 9657,
      "##right and ": 9658,
      "##right subtree ": 9659,
      "##s[i] == '": 9660,
      "            for neighbor in graph[": 9661,
      "##cost to ": 9662,
      "##4 (": 9663,
      "##4 -> ": 9664,
      "##character to ": 9665,
      "##6,8,": 9666,
      "Given an m x n ": 9667,
      "##creates ": 9668,
      "        for i in range(2, ": 9669,
      "##compare ": 9670,
      "##rook": 9671,
      "##on the same ": 9672,
      "##smallest element ": 9673,
      "##subarrays that ": 9674,
      "##subarrays with ": 9675,
      "   - **": 9676,
      "##sum of any ": 9677,
      "##[0] - ": 9678,
      "##[0] * (n + 1) for _ in range(": 9679,
      "##stepping ": 9680,
      "        def backtrack(": 9681,
      "##cells (": 9682,
      "##substring.\r\n": 9683,
      "##grid and ": 9684,
      "##bit_": 9685,
      "##substring \"": 9686,
      "##substring of length ": 9687,
      "##eiou": 9688,
      "##either": 9689,
      "You are given a 2D integer array ": 9690,
      "##difference of ": 9691,
      "##heights = [": 9692,
      "##Initialize the ": 9693,
      "##surroun": 9694,
      "##9,9,": 9695,
      "##condition is ": 9696,
      "##at least k ": 9697,
      "##0],[0,1,": 9698,
      "##characters at ": 9699,
      "##should not ": 9700,
      "##iterates over each ": 9701,
      "##existing ": 9702,
      "##2 + 2 = ": 9703,
      "##hello": 9704,
      "##at most 2 ": 9705,
      "##\\(\\text{": 9706,
      "##mod\r\n": 9707,
      "##consists of only ": 9708,
      "##Subarray ": 9709,
      "##[i - 1] + ": 9710,
      "##changed ": 9711,
      "##letter in ": 9712,
      "##[i] = (": 9713,
      "##maintain the ": 9714,
      "##obtain a ": 9715,
      "##sortedcontain": 9716,
      "##ipul": 9717,
      "##smaller than the ": 9718,
      "##(1, 1) ": 9719,
      "Input: nums = [1,2,3,4]\r\n": 9720,
      "##possible\r\n": 9721,
      "##vowels = ": 9722,
      "##absolute difference between the ": 9723,
      "# print(sol.count": 9724,
      "##i - j": 9725,
      "##reduce ": 9726,
      "##elements in the array ": 9727,
      "##Otherwise, ": 9728,
      "##Combin": 9729,
      "You are given an integer array nums": 9730,
      "##. For example, the ": 9731,
      "##lamp ": 9732,
      "This solution uses dynamic programming to keep track of the ": 9733,
      "        def dfs(node):\r\n": 9734,
      "        for i, num in enumerate(": 9735,
      "        for i, char in enumerate(": 9736,
      "##node.right, ": 9737,
      "##job ": 9738,
      "##one of the following ": 9739,
      "##11111111": 9740,
      "##leaving ": 9741,
      "An integer ": 9742,
      "##increase the ": 9743,
      "##BST ": 9744,
      "            # If the current ": 9745,
      "##\", k = 3\r\n": 9746,
      "##), (0, 1": 9747,
      "##to make it ": 9748,
      "##in descending order\r\n": 9749,
      "##among all ": 9750,
      "##explore all possible ways to ": 9751,
      "##A and B ": 9752,
      "##s: List[str]) -> int:\r\n": 9753,
      "##capital ": 9754,
      "##`mid` ": 9755,
      "##strictly increasing": 9756,
      "##strictly increasing.\r\n": 9757,
      "##gives us the ": 9758,
      "##opening ": 9759,
      "##s(self, nums: List[int], k: int) -> int:\r\n": 9760,
      "##with n nodes ": 9761,
      "A subarray is a contiguous non-empty sequence of elements within an array.\r\n": 9762,
      "Input: points = [[1,": 9763,
      "##Character": 9764,
      "##pawn": 9765,
      "Explanation: It is impossible to ": 9766,
      "##scenario": 9767,
      "##mentioned ": 9768,
      "##bisect_right(": 9769,
      "##Integer": 9770,
      "##ratio ": 9771,
      "##quadru": 9772,
      "##Zero": 9773,
      "##sandwich": 9774,
      "##Python code implement": 9775,
      "Operation ": 9776,
      "##magic ": 9777,
      "Input: prices = [": 9778,
      "##Digit": 9779,
      "##. Instead": 9780,
      "##compatib": 9781,
      "##Fibon": 9782,
      "##system ": 9783,
      "Let ": 9784,
      "Out": 9785,
      "num ": 9786,
      "str": 9787,
      "##f\"": 9788,
      "##folder": 9789,
      "##a/": 9790,
      "##ath": 9791,
      "##6]], ": 9792,
      "##ving ": 9793,
      "##m: int, ": 9794,
      "##m.co": 9795,
      "##xt": 9796,
      "##buse": 9797,
      "##d\"\r\n": 9798,
      "##lad": 9799,
      "##latest ": 9800,
      "##hi": 9801,
      "##hop": 9802,
      "##)(": 9803,
      "##k]": 9804,
      "##`min_": 9805,
      "##`SortedList": 9806,
      "##q:\r\n": 9807,
      "##IS": 9808,
      "##Total": 9809,
      "##28": 9810,
      "##20 ": 9811,
      "##1/": 9812,
      "##3  ": 9813,
      "##4.": 9814,
      "##_square": 9815,
      "##Cor": 9816,
      "##5 = 1": 9817,
      "##\\t": 9818,
      "##76": 9819,
      "##8].\r\n": 9820,
      "##Bread": 9821,
      "##Back": 9822,
      "##Right ": 9823,
      "##ME": 9824,
      "##@m.co": 9825,
      "##➝ ": 9826,
      "##= sum(": 9827,
      "##ense": 9828,
      "##y == ": 9829,
      "##: (": 9830,
      "        col": 9831,
      "        count_": 9832,
      "##is equal to ": 9833,
      "##le-": 9834,
      "##see the ": 9835,
      "##uring the ": 9836,
      "##ing each ": 9837,
      "##a number ": 9838,
      "##ated": 9839,
      "##] represents the ": 9840,
      "##made": 9841,
      "##) & ": 9842,
      "##img": 9843,
      "##poison": 9844,
      "##m + 1)]\r\n": 9845,
      "##are \"": 9846,
      "##are distinct.\r\n": 9847,
      "##strong ": 9848,
      "                j += 1\r\n": 9849,
      "##for i, ": 9850,
      "##that appears ": 9851,
      "Output: 6": 9852,
      "##ordin": 9853,
      "##substit": 9854,
      "##1 - 1": 9855,
      "##ulti": 9856,
      "##preorder ": 9857,
      "##0,3,": 9858,
      "##2 \r\n": 9859,
      "##comment": 9860,
      "##shop": 9861,
      "##fort": 9862,
      "##with their ": 9863,
      "##to the total ": 9864,
      "The sum of ": 9865,
      "    def remove": 9866,
      "##tain": 9867,
      "##one of ": 9868,
      "##one push ": 9869,
      "        return dp[n": 9870,
      "##is the first ": 9871,
      "##is the total number of ": 9872,
      "##, we update the ": 9873,
      "##possible way to ": 9874,
      "            if num ": 9875,
      "##had ": 9876,
      "##movement ": 9877,
      "##index_": 9878,
      "            # Option ": 9879,
      "##[1,2,3,4,": 9880,
      "##node is a ": 9881,
      "##s[1] = ": 9882,
      "##nums[2]": 9883,
      "##[i].length == ": 9884,
      "##positions of ": 9885,
      "##elements at indices ": 9886,
      "##left subtree ": 9887,
      "##prior": 9888,
      "##soldi": 9889,
      "##with the largest ": 9890,
      "##right child ": 9891,
      "Output: [4,": 9892,
      "Output: [1]\r\n": 9893,
      "Explanation: The figure ": 9894,
      "##root.\r\n": 9895,
      "##7,9,": 9896,
      "##smallest number ": 9897,
      "##doing ": 9898,
      "##domain": 9899,
      "##path between ": 9900,
      "##!= -1:\r\n": 9901,
      "##trip ": 9902,
      "##starting point": 9903,
      "        if self.": 9904,
      "##seri": 9905,
      "##score of the ": 9906,
      "Input: n = 1, ": 9907,
      "##grid of size ": 9908,
      "##2] + ": 9909,
      "##squir": 9910,
      "##OR (": 9911,
      "##adds the ": 9912,
      "##, return -1\r\n": 9913,
      "##bik": 9914,
      "##height, ": 9915,
      "##determined by the ": 9916,
      "##conditions are ": 9917,
      "##reached ": 9918,
      "##may contain ": 9919,
      "##considered to be ": 9920,
      "##helper(": 9921,
      "##defaultdict, ": 9922,
      "##`nums` and ": 9923,
      "1 <= nums[i], ": 9924,
      "##as the result.\r\n": 9925,
      "##[2,2,": 9926,
      "##`, `": 9927,
      "##weight = ": 9928,
      "##3] and ": 9929,
      "##3,2,4,": 9930,
      "This solution uses a breadth-first search (BFS) ": 9931,
      "##resulting in ": 9932,
      "##month ": 9933,
      "nums ": 9934,
      "##columns ": 9935,
      "##.\",\".\",\".\",\".\",\"": 9936,
      "##reversed_": 9937,
      "##closest": 9938,
      "##if it exist": 9939,
      "##This question ": 9940,
      "##approach to solve the problem:\r\n": 9941,
      "##, you must ": 9942,
      "##length = 1\r\n": 9943,
      "##manipul": 9944,
      "##middle": 9945,
      "##extract": 9946,
      "##guaranteed to be ": 9947,
      "##edges = [[0,1,": 9948,
      "##horizontally ": 9949,
      "##horizontalCut": 9950,
      "##cards ": 9951,
      "##children.\r\n": 9952,
      "##set to keep track of ": 9953,
      "##binary representation": 9954,
      "##checks the ": 9955,
      "##count[num": 9956,
      "You are given a string s ": 9957,
      "##difference between the maximum and minimum ": 9958,
      "##chain ": 9959,
      "##memb": 9960,
      "##under the ": 9961,
      "Note: This question ": 9962,
      "##Binary search ": 9963,
      "##threshold ": 9964,
      "##trying ": 9965,
      "##critical ": 9966,
      "Return true if it is possible to ": 9967,
      "##distance between two ": 9968,
      "##r, n": 9969,
      "##verticalCut": 9970,
      "##`left` and `": 9971,
      "##dummy": 9972,
      "##s(self, n: int) -> int:\r\n": 9973,
      "##comparing the ": 9974,
      "##Main ": 9975,
      "##modify ": 9976,
      "##maze": 9977,
      "##battery ": 9978,
      "            if i >= ": 9979,
      "##Convert the ": 9980,
      "##simultaneously ": 9981,
      "##equivalent to ": 9982,
      "##variables to ": 9983,
      "##.count('": 9984,
      "##around ": 9985,
      "##natur": 9986,
      "##ai and b": 9987,
      "##%= MOD\r\n": 9988,
      "            for j in range(i + 1, n):\r\n": 9989,
      "##threshold = ": 9990,
      "        count = Counter(": 9991,
      "To solve this problem, we can use dynamic programming ": 9992,
      "##instead.\r\n": 9993,
      "##difficulty ": 9994,
      "##Visit": 9995,
      "##Suffix": 9996,
      "##Product": 9997,
      "##in Python:\r\n": 9998,
      "##Initial ": 9999
    }
  }
}