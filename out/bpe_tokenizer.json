{
  "version": "1.0",
  "truncation": null,
  "padding": null,
  "added_tokens": [
    {
      "id": 0,
      "content": "[PAD]",
      "single_word": false,
      "lstrip": false,
      "rstrip": false,
      "normalized": false,
      "special": true
    },
    {
      "id": 1,
      "content": "[UNK]",
      "single_word": false,
      "lstrip": false,
      "rstrip": false,
      "normalized": false,
      "special": true
    },
    {
      "id": 2,
      "content": "[CLS]",
      "single_word": false,
      "lstrip": false,
      "rstrip": false,
      "normalized": false,
      "special": true
    },
    {
      "id": 3,
      "content": "[SEP]",
      "single_word": false,
      "lstrip": false,
      "rstrip": false,
      "normalized": false,
      "special": true
    },
    {
      "id": 4,
      "content": "[MASK]",
      "single_word": false,
      "lstrip": false,
      "rstrip": false,
      "normalized": false,
      "special": true
    }
  ],
  "normalizer": null,
  "pre_tokenizer": null,
  "post_processor": null,
  "decoder": null,
  "model": {
    "type": "BPE",
    "dropout": null,
    "unk_token": "[UNK]",
    "continuing_subword_prefix": null,
    "end_of_word_suffix": null,
    "fuse_unk": false,
    "byte_fallback": false,
    "ignore_merges": false,
    "vocab": {
      "[PAD]": 0,
      "[UNK]": 1,
      "[CLS]": 2,
      "[SEP]": 3,
      "[MASK]": 4,
      "\t": 5,
      "\n": 6,
      "\r": 7,
      " ": 8,
      "!": 9,
      "\"": 10,
      "#": 11,
      "$": 12,
      "%": 13,
      "&": 14,
      "'": 15,
      "(": 16,
      ")": 17,
      "*": 18,
      "+": 19,
      ",": 20,
      "-": 21,
      ".": 22,
      "/": 23,
      "0": 24,
      "1": 25,
      "2": 26,
      "3": 27,
      "4": 28,
      "5": 29,
      "6": 30,
      "7": 31,
      "8": 32,
      "9": 33,
      ":": 34,
      ";": 35,
      "<": 36,
      "=": 37,
      ">": 38,
      "?": 39,
      "@": 40,
      "A": 41,
      "B": 42,
      "C": 43,
      "D": 44,
      "E": 45,
      "F": 46,
      "G": 47,
      "H": 48,
      "I": 49,
      "J": 50,
      "K": 51,
      "L": 52,
      "M": 53,
      "N": 54,
      "O": 55,
      "P": 56,
      "Q": 57,
      "R": 58,
      "S": 59,
      "T": 60,
      "U": 61,
      "V": 62,
      "W": 63,
      "X": 64,
      "Y": 65,
      "Z": 66,
      "[": 67,
      "\\": 68,
      "]": 69,
      "^": 70,
      "_": 71,
      "`": 72,
      "a": 73,
      "b": 74,
      "c": 75,
      "d": 76,
      "e": 77,
      "f": 78,
      "g": 79,
      "h": 80,
      "i": 81,
      "j": 82,
      "k": 83,
      "l": 84,
      "m": 85,
      "n": 86,
      "o": 87,
      "p": 88,
      "q": 89,
      "r": 90,
      "s": 91,
      "t": 92,
      "u": 93,
      "v": 94,
      "w": 95,
      "x": 96,
      "y": 97,
      "z": 98,
      "{": 99,
      "|": 100,
      "}": 101,
      "~": 102,
      " ": 103,
      "±": 104,
      "×": 105,
      "Σ": 106,
      " ": 107,
      " ": 108,
      "​": 109,
      "’": 110,
      "“": 111,
      "”": 112,
      "…": 113,
      "←": 114,
      "↑": 115,
      "→": 116,
      "∅": 117,
      "−": 118,
      "√": 119,
      "∞": 120,
      "∩": 121,
      "∪": 122,
      "≈": 123,
      "≠": 124,
      "≤": 125,
      "⊕": 126,
      "⌊": 127,
      "⌋": 128,
      "➝": 129,
      "⟶": 130,
      "一": 131,
      "个": 132,
      "中": 133,
      "介": 134,
      "优": 135,
      "但": 136,
      "先": 137,
      "入": 138,
      "内": 139,
      "到": 140,
      "前": 141,
      "加": 142,
      "匙": 143,
      "向": 144,
      "四": 145,
      "回": 146,
      "围": 147,
      "在": 148,
      "墙": 149,
      "对": 150,
      "应": 151,
      "度": 152,
      "当": 153,
      "往": 154,
      "态": 155,
      "或": 156,
      "所": 157,
      "找": 158,
      "搜": 159,
      "数": 160,
      "新": 161,
      "方": 162,
      "无": 163,
      "时": 164,
      "是": 165,
      "更": 166,
      "最": 167,
      "有": 168,
      "未": 169,
      "此": 170,
      "步": 171,
      "没": 172,
      "法": 173,
      "深": 174,
      "点": 175,
      "状": 176,
      "界": 177,
      "的": 178,
      "索": 179,
      "终": 180,
      "统": 181,
      "者": 182,
      "范": 183,
      "计": 184,
      "访": 185,
      "起": 186,
      "边": 187,
      "过": 188,
      "返": 189,
      "通": 190,
      "量": 191,
      "钥": 192,
      "锁": 193,
      "问": 194,
      "队": 195,
      "，": 196,
      "  ": 197,
      "    ": 198,
      "\r\n": 199,
      "e ": 200,
      "th": 201,
      "        ": 202,
      "s ": 203,
      "in": 204,
      "t ": 205,
      "er": 206,
      "the ": 207,
      ", ": 208,
      "on": 209,
      "an": 210,
      "= ": 211,
      "en": 212,
      "d ": 213,
      "f ": 214,
      "re": 215,
      "ar": 216,
      "or": 217,
      "ti": 218,
      "um": 219,
      "st": 220,
      "al": 221,
      ":\r\n": 222,
      ".\r\n": 223,
      "o ": 224,
      "y ": 225,
      ": ": 226,
      "of ": 227,
      "ing": 228,
      "tion": 229,
      "is ": 230,
      "num": 231,
      "ut": 232,
      "le": 233,
      " the ": 234,
      "ch": 235,
      "ro": 236,
      "se": 237,
      "de": 238,
      "er ": 239,
      "ur": 240,
      "to ": 241,
      "co": 242,
      "pl": 243,
      "            ": 244,
      "ing ": 245,
      "ra": 246,
      "and ": 247,
      "int": 248,
      "n ": 249,
      ". ": 250,
      "a ": 251,
      "at": 252,
      "] ": 253,
      "put": 254,
      "di": 255,
      "Th": 256,
      "put: ": 257,
      "or ": 258,
      "th ": 259,
      "Ex": 260,
      "in ": 261,
      "un": 262,
      "<= ": 263,
      "ma": 264,
      "st ": 265,
      "si": 266,
      "es ": 267,
      "su": 268,
      "ri": 269,
      "ation": 270,
      "am": 271,
      "at ": 272,
      "an ": 273,
      "tur": 274,
      "1 ": 275,
      "ch ": 276,
      "ent": 277,
      ") ": 278,
      "``": 279,
      "qu": 280,
      "ed ": 281,
      "# ": 282,
      "len": 283,
      "- ": 284,
      "im": 285,
      "it": 286,
      "ol": 287,
      "                ": 288,
      "[i": 289,
      "ac": 290,
      "ge": 291,
      "no": 292,
      ")\r\n": 293,
      "wi": 294,
      "nums": 295,
      "if ": 296,
      " = ": 297,
      "+ ": 298,
      "po": 299,
      "retur": 300,
      "m ": 301,
      "]\r\n": 302,
      "10": 303,
      "The ": 304,
      "1,": 305,
      "numb": 306,
      "con": 307,
      "In": 308,
      "es": 309,
      "l ": 310,
      "gh": 311,
      "ou": 312,
      "val": 313,
      "str": 314,
      "en ": 315,
      "are ": 316,
      "ea": 317,
      "for ": 318,
      "arra": 319,
      "fi": 320,
      "um ": 321,
      "leng": 322,
      "ple ": 323,
      "e the ": 324,
      "that ": 325,
      "ist": 326,
      "max": 327,
      "as": 328,
      "= [": 329,
      "Out": 330,
      "Output: ": 331,
      "of the ": 332,
      "ample ": 333,
      "lo": 334,
      "Example ": 335,
      "fro": 336,
      "Input: ": 337,
      "return ": 338,
      "ne": 339,
      "        \r\n": 340,
      "ent ": 341,
      "wh": 342,
      "` ": 343,
      "plan": 344,
      "number ": 345,
      "le ": 346,
      "k ": 347,
      "min": 348,
      "ord": 349,
      "sub": 350,
      "2,": 351,
      "planation": 352,
      "Explanation": 353,
      "coun": 354,
      " \r\n": 355,
      "it ": 356,
      "], ": 357,
      "el": 358,
      "ve ": 359,
      "al ": 360,
      "length ": 361,
      "ution": 362,
      "ter": 363,
      "ul": 364,
      "lem": 365,
      "olution": 366,
      "x ": 367,
      "ce ": 368,
      "mo": 369,
      "cur": 370,
      "ap": 371,
      "can ": 372,
      "```": 373,
      "List": 374,
      "ot": 375,
      "> ": 376,
      "pre": 377,
      "0,": 378,
      "ed": 379,
      "        # ": 380,
      "in the ": 381,
      "**": 382,
      "array ": 383,
      "from ": 384,
      "each ": 385,
      "0\r\n": 386,
      "pro": 387,
      "we ": 388,
      "ere ": 389,
      "iv": 390,
      "ran": 391,
      "2 ": 392,
      "ly ": 393,
      "1, ": 394,
      "ou ": 395,
      "== ": 396,
      "ab": 397,
      "1\r\n": 398,
      "imum ": 399,
      "i ": 400,
      "per": 401,
      "curr": 402,
      "ver": 403,
      "number of ": 404,
      "0 ": 405,
      "sel": 406,
      "[i] ": 407,
      "):\r\n": 408,
      "eg": 409,
      "3,": 410,
      "ec": 411,
      "com": 412,
      "],": 413,
      "li": 414,
      "self": 415,
      "elem": 416,
      "as ": 417,
      "inde": 418,
      "lef": 419,
      "s:\r\n": 420,
      "ex": 421,
      "valu": 422,
      "],[": 423,
      "be ": 424,
      "s.\r\n": 425,
      "tw": 426,
      "p ": 427,
      "-> ": 428,
      "se ": 429,
      "ct": 430,
      "sh": 431,
      "1 <= ": 432,
      "righ": 433,
      "def ": 434,
      "integ": 435,
      "iven ": 436,
      "Explanation: ": 437,
      "by ": 438,
      "cl": 439,
      "for": 440,
      "with ": 441,
      "char": 442,
      "pa": 443,
      "ir": 444,
      "tim": 445,
      "stra": 446,
      "all ": 447,
      "ction": 448,
      "low": 449,
      "<= 10": 450,
      "not ": 451,
      "s = [": 452,
      "node": 453,
      "ad": 454,
      "This ": 455,
      "fin": 456,
      "\",": 457,
      "s, ": 458,
      "s the ": 459,
      "bo": 460,
      "List[": 461,
      "1:\r\n": 462,
      "Con": 463,
      "\",\"": 464,
      "straint": 465,
      "sul": 466,
      "][": 467,
      ". The ": 468,
      "                    ": 469,
      "If ": 470,
      "* ": 471,
      "whi": 472,
      "end": 473,
      "sib": 474,
      "ce": 475,
      "resul": 476,
      "range": 477,
      "string ": 478,
      "be": 479,
      "ass ": 480,
      "count": 481,
      "star": 482,
      "ort ": 483,
      "(self": 484,
      "word": 485,
      "Re": 486,
      "igh": 487,
      "vi": 488,
      "to the ": 489,
      "ing the ": 490,
      "imp": 491,
      ".length ": 492,
      "(self, ": 493,
      "class ": 494,
      ") -> ": 495,
      "ers ": 496,
      "You ": 497,
      "arge": 498,
      "2:\r\n": 499,
      "de ": 500,
      "ter ": 501,
      "yth": 502,
      "fir": 503,
      "col": 504,
      "given ": 505,
      "sum ": 506,
      "range(": 507,
      "Solution": 508,
      "ow": 509,
      "    def ": 510,
      "il": 511,
      "ython": 512,
      "ta": 513,
      "Constraint": 514,
      "array": 515,
      "pos": 516,
      "in range(": 517,
      "sum": 518,
      "t = ": 519,
      "element": 520,
      "Constraints:\r\n": 521,
      "        return ": 522,
      "Example 2:\r\n": 523,
      "Example 1:\r\n": 524,
      "4,": 525,
      "solution": 526,
      " + ": 527,
      "python": 528,
      "class Solution": 529,
      "```\r\n": 530,
      "```python": 531,
      "class Solution:\r\n": 532,
      "```python\r\n": 533,
      "ort": 534,
      "one ": 535,
      "len(": 536,
      "possib": 537,
      "ay": 538,
      "maximum ": 539,
      "[0": 540,
      "two ": 541,
      "charac": 542,
      "n the ": 543,
      "quen": 544,
      "pres": 545,
      "s of ": 546,
      ", and ": 547,
      "ru": 548,
      "integer ": 549,
      "is the ": 550,
      "app": 551,
      "import ": 552,
      "all": 553,
      "We ": 554,
      "up": 555,
      "ty": 556,
      "with": 557,
      " - ": 558,
      "me": 559,
      "< ": 560,
      "let": 561,
      "solution ": 562,
      ", we ": 563,
      "tra": 564,
      "any ": 565,
      "s = ": 566,
      "ke": 567,
      "the": 568,
      "max_": 569,
      "first ": 570,
      "        for ": 571,
      "dist": 572,
      "on ": 573,
      "ll ": 574,
      "string": 575,
      "gri": 576,
      "cul": 577,
      "List[int": 578,
      "-1": 579,
      "2, ": 580,
      "tot": 581,
      "dp": 582,
      "2\r\n": 583,
      "left": 584,
      "possible ": 585,
      "ate ": 586,
      "peration": 587,
      "posi": 588,
      "ge ": 589,
      "            if ": 590,
      "+= ": 591,
      "ces": 592,
      "\" ": 593,
      "3 ": 594,
      "\", ": 595,
      "tre": 596,
      "5,": 597,
      "ic": 598,
      "sw": 599,
      "0, ": 600,
      "typ": 601,
      "ha": 602,
      "dig": 603,
      "par": 604,
      "alcul": 605,
      "right": 606,
      "mov": 607,
      "arr": 608,
      "ff": 609,
      "s\r\n": 610,
      "row": 611,
      "\"\r\n": 612,
      "current ": 613,
      "its ": 614,
      "**: ": 615,
      "gra": 616,
      "index ": 617,
      "index": 618,
      "Retur": 619,
      "oun": 620,
      "            # ": 621,
      "id ": 622,
      "so ": 623,
      "start": 624,
      "mat": 625,
      "sp": 626,
      "minimum ": 627,
      "length": 628,
      "ces ": 629,
      "operation": 630,
      "This solution ": 631,
      "00": 632,
      "5\r\n": 633,
      "iz": 634,
      ". **": 635,
      "ary ": 636,
      "sort": 637,
      "[1,": 638,
      "targe": 639,
      "e\r\n": 640,
      "you ": 641,
      "current": 642,
      "id": 643,
      "d the ": 644,
      "can be ": 645,
      "to": 646,
      "m the ": 647,
      "this ": 648,
      "where ": 649,
      "point": 650,
      "Explanation:\r\n": 651,
      "sequen": 652,
      "You are ": 653,
      "] = ": 654,
      "equ": 655,
      "value ": 656,
      "count ": 657,
      "ct ": 658,
      "em": 659,
      "ore ": 660,
      "node ": 661,
      "which ": 662,
      "].\r\n": 663,
      "cre": 664,
      "s to ": 665,
      "ates ": 666,
      "bin": 667,
      "), ": 668,
      "will ": 669,
      "wor": 670,
      "ci": 671,
      "nums = [": 672,
      "result": 673,
      "n = ": 674,
      "us": 675,
      "s[": 676,
      "List[int]": 677,
      "nums[": 678,
      "typing ": 679,
      "hea": 680,
      "from typing ": 681,
      "from typing import ": 682,
      "0,0,": 683,
      "'s ": 684,
      "repres": 685,
      "ach ": 686,
      "int:\r\n": 687,
      "List\r\n": 688,
      "diff": 689,
      "For ": 690,
      ") -> int:\r\n": 691,
      "ind": 692,
      "only ": 693,
      "from typing import List\r\n": 694,
      "' ": 695,
      "It ": 696,
      "ph": 697,
      "que": 698,
      "quer": 699,
      "no ": 700,
      "use": 701,
      ": int": 702,
      "ffi": 703,
      "can": 704,
      "consi": 705,
      "[i]": 706,
      "position": 707,
      "oo": 708,
      "s that ": 709,
      "grid": 710,
      "is a ": 711,
      "ther ": 712,
      "from the ": 713,
      "ple": 714,
      "current_": 715,
      "there ": 716,
      "answ": 717,
      "has ": 718,
      "ate the ": 719,
      "eigh": 720,
      "have ": 721,
      "ev": 722,
      "tive ": 723,
      "pair": 724,
      "+ 1": 725,
      "element ": 726,
      "elements ": 727,
      "time ": 728,
      "0 <= ": 729,
      "pri": 730,
      "ast ": 731,
      "left ": 732,
      "nex": 733,
      "our": 734,
      "represent": 735,
      ". If ": 736,
      "indi": 737,
      "ame ": 738,
      "You are given ": 739,
      "s and ": 740,
      "Input: nums = [": 741,
      "character": 742,
      "Return the ": 743,
      "cel": 744,
      "s(": 745,
      "i, ": 746,
      "use ": 747,
      "ation ": 748,
      "list ": 749,
      "ach": 750,
      "4\r\n": 751,
      "than ": 752,
      "is": 753,
      "ed to ": 754,
      ", the ": 755,
      "1] ": 756,
      "iti": 757,
      "[i][": 758,
      "secon": 759,
      "sol": 760,
      "            \r\n": 761,
      "gre": 762,
      "such ": 763,
      "ction ": 764,
      "s are ": 765,
      "            return ": 766,
      "ollow": 767,
      "]]\r\n": 768,
      "bu": 769,
      "r\r\n": 770,
      "prefi": 771,
      "with the ": 772,
      "ep": 773,
      "sm": 774,
      "i in range(": 775,
      "du": 776,
      "3\r\n": 777,
      "\\r\r\n": 778,
      "differ": 779,
      "3, ": 780,
      "list": 781,
      "A ": 782,
      "k = ": 783,
      "om": 784,
      "                if ": 785,
      "then ": 786,
      "total ": 787,
      "graph": 788,
      "ase ": 789,
      ".length <= 10": 790,
      "calcul": 791,
      "alse": 792,
      "valid ": 793,
      "right ": 794,
      "j ": 795,
      "e.\r\n": 796,
      "s in ": 797,
      "chec": 798,
      "3:\r\n": 799,
      "ep ": 800,
      ").\r\n": 801,
      "append": 802,
      "ffici": 803,
      "distan": 804,
      "follow": 805,
      "appro": 806,
      "s[i] ": 807,
      "sc": 808,
      "4 ": 809,
      "alle": 810,
      "n - ": 811,
      "+= 1\r\n": 812,
      "while ": 813,
      "rou": 814,
      "equal ": 815,
      "Output: [": 816,
      "binary ": 817,
      "same ": 818,
      "effici": 819,
      "            for ": 820,
      "s: ": 821,
      "Example 3:\r\n": 822,
      " in ": 823,
      "j] ": 824,
      "ob": 825,
      ", it ": 826,
      "There ": 827,
      "fun": 828,
      "cost ": 829,
      ".append": 830,
      "result ": 831,
      "1,2,": 832,
      ".append(": 833,
      ".length": 834,
      "fter ": 835,
      "siz": 836,
      "ity ": 837,
      "number": 838,
      "trac": 839,
      "are": 840,
      "an integer ": 841,
      "plac": 842,
      "twe": 843,
      "tree ": 844,
      "fre": 845,
      "betwe": 846,
      "ks ": 847,
      "conta": 848,
      "new": 849,
      "Ch": 850,
      "character ": 851,
      "e, ": 852,
      "ded ": 853,
      "6,": 854,
      "prob": 855,
      "5 ": 856,
      "act": 857,
      "ence ": 858,
      "s. ": 859,
      "iter": 860,
      "s a ": 861,
      "ke ": 862,
      "ang": 863,
      "]:\r\n": 864,
      "order": 865,
      "Explanation: The ": 866,
      "t the ": 867,
      "target": 868,
      "sequence ": 869,
      "))\r\n": 870,
      "stac": 871,
      "nums[i] ": 872,
      "numbers ": 873,
      "\"ab": 874,
      "and": 875,
      "root": 876,
      "set": 877,
      "min_": 878,
      "self.": 879,
      "et": 880,
      "ase": 881,
      "non": 882,
      "uni": 883,
      "matri": 884,
      "2 = ": 885,
      "letter": 886,
      "op": 887,
      "end ": 888,
      "ear": 889,
      "ori": 890,
      "en the ": 891,
      "heigh": 892,
      "smalle": 893,
      "/ ": 894,
      "max(": 895,
      "way": 896,
      "divi": 897,
      "function ": 898,
      "rema": 899,
      "11": 900,
      "Given ": 901,
      "7,": 902,
      "zer": 903,
      "itial": 904,
      "ere": 905,
      "digit": 906,
      "set ": 907,
      "if the ": 908,
      "])\r\n": 909,
      "1,1,": 910,
      "No": 911,
      "ay ": 912,
      "ed by ": 913,
      "oc": 914,
      "        for i in range(": 915,
      "dire": 916,
      "\"a": 917,
      "total": 918,
      "values ": 919,
      "answer ": 920,
      "comp": 921,
      "heap": 922,
      "emp": 923,
      "ard": 924,
      "find the ": 925,
      "return the ": 926,
      "tru": 927,
      "1 and ": 928,
      "roo": 929,
      "`.\r\n": 930,
      "return": 931,
      "red ": 932,
      "on the ": 933,
      "cor": 934,
      "pu": 935,
      "smallest ": 936,
      "do": 937,
      "Coun": 938,
      "ding ": 939,
      "ve": 940,
      "subarray ": 941,
      "move ": 942,
      "form": 943,
      "..": 944,
      "ate": 945,
      "efficient": 946,
      "1]\r\n": 947,
      "large": 948,
      "   - ": 949,
      "lon": 950,
      "non-": 951,
      "ld ": 952,
      "and the ": 953,
      "1.\r\n": 954,
      "\", \"": 955,
      "nums ": 956,
      "ould ": 957,
      "queri": 958,
      "es the ": 959,
      "subarray": 960,
      "approach ": 961,
      "case ": 962,
      "_sum": 963,
      "od": 964,
      "ther": 965,
      "path ": 966,
      "% ": 967,
      "lin": 968,
      "rough": 969,
      "  # ": 970,
      "!= ": 971,
      "()\r\n": 972,
      "through": 973,
      "        if ": 974,
      "sum of ": 975,
      "vel": 976,
      "ater ": 977,
      "der": 978,
      "word ": 979,
      "\".\r\n": 980,
      "step": 981,
      "[0] ": 982,
      "ir ": 983,
      "track ": 984,
      "sit": 985,
      "nodes ": 986,
      "        def ": 987,
      "our ": 988,
      "x, ": 989,
      "second ": 990,
      "contain": 991,
      "into ": 992,
      ". It ": 993,
      "integers ": 994,
      "for the ": 995,
      "else": 996,
      "St": 997,
      "alse\r\n": 998,
      "tri": 999,
      "need to ": 1000,
      "indices ": 1001,
      "between ": 1002,
      "0:\r\n": 1003,
      "other ": 1004,
      "Calcul": 1005,
      "ty ": 1006,
      "last ": 1007,
      "cu": 1008,
      ".length\r\n": 1009,
      "Fin": 1010,
      "that the ": 1011,
      "most ": 1012,
      "starting ": 1013,
      "spec": 1014,
      "order ": 1015,
      "00\r\n": 1016,
      "1],[": 1017,
      "else:\r\n": 1018,
      "y.\r\n": 1019,
      "tion ": 1020,
      "st_": 1021,
      "pe": 1022,
      "les": 1023,
      "n\r\n": 1024,
      "lower": 1025,
      "consist": 1026,
      "ow ": 1027,
      "Input: s = ": 1028,
      "all the ": 1029,
      "size ": 1030,
      "incre": 1031,
      "tic": 1032,
      "0.\r\n": 1033,
      "an array ": 1034,
      "ag": 1035,
      "one": 1036,
      "Tru": 1037,
      "y, ": 1038,
      "edge": 1039,
      "able ": 1040,
      "                # ": 1041,
      "itializ": 1042,
      "ser": 1043,
      "9\r\n": 1044,
      "of a ": 1045,
      "cell": 1046,
      "score ": 1047,
      "sh ": 1048,
      "queu": 1049,
      "cost": 1050,
      "df": 1051,
      "inter": 1052,
      "both ": 1053,
      "after ": 1054,
      "Not": 1055,
      "substring": 1056,
      "roup": 1057,
      "find": 1058,
      "Node": 1059,
      "range ": 1060,
      "En": 1061,
      "pi": 1062,
      "prefix": 1063,
      "4, ": 1064,
      "est ": 1065,
      "start ": 1066,
      "For each ": 1067,
      "1) ": 1068,
      "ment": 1069,
      "requ": 1070,
      "at the ": 1071,
      "ated ": 1072,
      "2.\r\n": 1073,
      "remov": 1074,
      "D ": 1075,
      "s(self, ": 1076,
      ".length == ": 1077,
      "their ": 1078,
      "form ": 1079,
      "Input: n = ": 1080,
      "zero": 1081,
      "becom": 1082,
      "mul": 1083,
      "_count": 1084,
      "grid ": 1085,
      "sa": 1086,
      "for each ": 1087,
      "('": 1088,
      "ust ": 1089,
      "sorted ": 1090,
      "1 = ": 1091,
      "2] ": 1092,
      "[0,": 1093,
      "                return ": 1094,
      ".length <= ": 1095,
      "ic ": 1096,
      "efficiently ": 1097,
      "OR": 1098,
      "equal to ": 1099,
      "av": 1100,
      "group": 1101,
      "is not ": 1102,
      "6\r\n": 1103,
      "requi": 1104,
      "longe": 1105,
      "loc": 1106,
      "This solution use": 1107,
      "visit": 1108,
      "1], ": 1109,
      "very ": 1110,
      "position ": 1111,
      "es.\r\n": 1112,
      "min(": 1113,
      "next": 1114,
      "eca": 1115,
      "2],[": 1116,
      "distin": 1117,
      "n = len(": 1118,
      "next ": 1119,
      ". This ": 1120,
      "colum": 1121,
      "**: We ": 1122,
      "remain": 1123,
      "bit": 1124,
      "8,": 1125,
      "substring ": 1126,
      "day": 1127,
      "following ": 1128,
      "5, ": 1129,
      "sear": 1130,
      "` and ": 1131,
      "-index": 1132,
      "`k": 1133,
      "[2,": 1134,
      "adj": 1135,
      "colle": 1136,
      "empty ": 1137,
      " and ": 1138,
      "ild": 1139,
      "exam": 1140,
      "cell ": 1141,
      "O(": 1142,
      "there are ": 1143,
      "te": 1144,
      "ener": 1145,
      "greater ": 1146,
      "distance ": 1147,
      "n):\r\n": 1148,
      "You are given a ": 1149,
      "path": 1150,
      "more ": 1151,
      "beca": 1152,
      "` to ": 1153,
      "thre": 1154,
      "of each ": 1155,
      "(0, ": 1156,
      "total_": 1157,
      "def": 1158,
      "proces": 1159,
      "To ": 1160,
      "digit ": 1161,
      "There are ": 1162,
      "int ": 1163,
      "List[List[int]": 1164,
      "root ": 1165,
      "squ": 1166,
      "alind": 1167,
      "conne": 1168,
      "alindro": 1169,
      "clu": 1170,
      "track of the ": 1171,
      "Ali": 1172,
      "`nums": 1173,
      "mid": 1174,
      "ence": 1175,
      "using ": 1176,
      "OR ": 1177,
      "foun": 1178,
      "example": 1179,
      "ei": 1180,
      "1 + ": 1181,
      "neigh": 1182,
      "ates the ": 1183,
      "neighb": 1184,
      "produ": 1185,
      "least ": 1186,
      "termin": 1187,
      "dfs(": 1188,
      "gli": 1189,
      "in a ": 1190,
      "Engli": 1191,
      "Chec": 1192,
      "English ": 1193,
      ": List[int]": 1194,
      "problem": 1195,
      "make ": 1196,
      "largest ": 1197,
      "wind": 1198,
      ": int, ": 1199,
      "corre": 1200,
      "node.": 1201,
      "nam": 1202,
      "frequen": 1203,
      ": int) -> int:\r\n": 1204,
      "target ": 1205,
      "flo": 1206,
      "upd": 1207,
      "d.\r\n": 1208,
      "Output: 2\r\n": 1209,
      "cted ": 1210,
      "with a ": 1211,
      "own ": 1212,
      "bac": 1213,
      "ver ": 1214,
      "n == ": 1215,
      "dition": 1216,
      "cy ": 1217,
      "minimum number of ": 1218,
      "es = [": 1219,
      "sure": 1220,
      "count = ": 1221,
      "add": 1222,
      "ince ": 1223,
      " = [": 1224,
      "lowercase ": 1225,
      "ve the ": 1226,
      "gin": 1227,
      "up ": 1228,
      "they ": 1229,
      "prefix ": 1230,
      "difference ": 1231,
      "// ": 1232,
      "ous ": 1233,
      "s in the ": 1234,
      "ensure": 1235,
      "ese ": 1236,
      "ending ": 1237,
      "you can ": 1238,
      "palindro": 1239,
      "3.\r\n": 1240,
      "g ": 1241,
      "becomes ": 1242,
      "3,4,": 1243,
      "que ": 1244,
      "nee": 1245,
      "keep ": 1246,
      "0-index": 1247,
      ">= ": 1248,
      "s)\r\n": 1249,
      "                        ": 1250,
      "longest ": 1251,
      "tas": 1252,
      "FS": 1253,
      ", return ": 1254,
      "also ": 1255,
      "stru": 1256,
      "king ": 1257,
      "List[int], ": 1258,
      "such that ": 1259,
      "10,": 1260,
      "Initializ": 1261,
      "we can ": 1262,
      "', ": 1263,
      "e that ": 1264,
      "ensures that ": 1265,
      "ga": 1266,
      "high": 1267,
      "rever": 1268,
      "Here": 1269,
      "length of the ": 1270,
      "height": 1271,
      "* (": 1272,
      "subsequence ": 1273,
      "exact": 1274,
      "ctions ": 1275,
      "search ": 1276,
      "<= 105\r\n": 1277,
      "mas": 1278,
      "sig": 1279,
      "1]": 1280,
      "2]\r\n": 1281,
      "play": 1282,
      "ull": 1283,
      "int(": 1284,
      "exactly ": 1285,
      "answer": 1286,
      "ating ": 1287,
      "Calculate the ": 1288,
      "Alice ": 1289,
      "English letter": 1290,
      ".length <= 105\r\n": 1291,
      "multi": 1292,
      "3,4": 1293,
      "less ": 1294,
      "3],[": 1295,
      "core": 1296,
      "cannot ": 1297,
      "sing": 1298,
      "constraint": 1299,
      "-1\r\n": 1300,
      "2], ": 1301,
      "9,": 1302,
      "must ": 1303,
      "sur": 1304,
      "these ": 1305,
      "comput": 1306,
      "spac": 1307,
      "determin": 1308,
      "wise": 1309,
      "new ": 1310,
      "ally ": 1311,
      "Output: 3\r\n": 1312,
      "queries": 1313,
      "ith ": 1314,
      "ed.\r\n": 1315,
      "which is ": 1316,
      "speci": 1317,
      "bi": 1318,
      "d_": 1319,
      "dp[": 1320,
      "[1, ": 1321,
      "at least ": 1322,
      "all possible ": 1323,
      "k\r\n": 1324,
      "Check ": 1325,
      "sum of the ": 1326,
      "\"abc": 1327,
      "0],[": 1328,
      "adjac": 1329,
      "[i][j] ": 1330,
      "dict": 1331,
      "comple": 1332,
      "Return ": 1333,
      "        n = len(": 1334,
      "positive ": 1335,
      "ked ": 1336,
      "spl": 1337,
      "origin": 1338,
      "        while ": 1339,
      ") and ": 1340,
      "If the ": 1341,
      "put ": 1342,
      " is ": 1343,
      "lement": 1344,
      "out ": 1345,
      "through the ": 1346,
      "n, ": 1347,
      "reach": 1348,
      "s[i]": 1349,
      "because ": 1350,
      "In ": 1351,
      "bot": 1352,
      "if": 1353,
      "occurr": 1354,
      "False\r\n": 1355,
      "2 + ": 1356,
      "stor": 1357,
      "gu": 1358,
      ", we can ": 1359,
      "characters ": 1360,
      "0] ": 1361,
      "complex": 1362,
      "Input: s = \"": 1363,
      "ment ": 1364,
      "-= ": 1365,
      "1. **": 1366,
      "2. **": 1367,
      "3]\r\n": 1368,
      "atter": 1369,
      "operations ": 1370,
      ") = ": 1371,
      "pers": 1372,
      "may ": 1373,
      "sion": 1374,
      "should ": 1375,
      "tak": 1376,
      "la": 1377,
      "ove ": 1378,
      "choo": 1379,
      "pop": 1380,
      " in range(": 1381,
      ". We ": 1382,
      "[i - ": 1383,
      "iven the ": 1384,
      "null": 1385,
      "Output: 1\r\n": 1386,
      "edg": 1387,
      "either ": 1388,
      "Each ": 1389,
      "s` ": 1390,
      "Su": 1391,
      "pr": 1392,
      "integer": 1393,
      "match": 1394,
      "to find the ": 1395,
      "diction": 1396,
      "0 and ": 1397,
      "bre": 1398,
      "matrix ": 1399,
      "i = ": 1400,
      "[i][j": 1401,
      "aa": 1402,
      "s. The ": 1403,
      "gram": 1404,
      "s of the ": 1405,
      "inclu": 1406,
      "asing ": 1407,
      "ed_": 1408,
      "For example": 1409,
      "iterates ": 1410,
      "##": 1411,
      "exist": 1412,
      "appear": 1413,
      "hou": 1414,
      "ree": 1415,
      ") - ": 1416,
      "3], ": 1417,
      "goo": 1418,
      "ari": 1419,
      "1 <= nums": 1420,
      "distinct ": 1421,
      "aul": 1422,
      "         ": 1423,
      "inf": 1424,
      ", so ": 1425,
      "ctly ": 1426,
      "there is ": 1427,
      "### ": 1428,
      "pow": 1429,
      "neighbor": 1430,
      "))": 1431,
      "l the ": 1432,
      ": List[int], ": 1433,
      "7\r\n": 1434,
      "s_": 1435,
      "defaul": 1436,
      "Di": 1437,
      "null,": 1438,
      "            else:\r\n": 1439,
      "und": 1440,
      "interval": 1441,
      "remaining ": 1442,
      "3. **": 1443,
      "every ": 1444,
      "perm": 1445,
      "), (": 1446,
      "default": 1447,
      "digits ": 1448,
      "color": 1449,
      "candi": 1450,
      "consider": 1451,
      "lowercase English letter": 1452,
      "6 ": 1453,
      "cy": 1454,
      "chan": 1455,
      "[1,2,": 1456,
      "'s the ": 1457,
      "score": 1458,
      "prev": 1459,
      "#         ": 1460,
      "sing ": 1461,
      "calculates the ": 1462,
      "stack": 1463,
      "0-indexed ": 1464,
      "of length ": 1465,
      "required ": 1466,
      "#         self.": 1467,
      "solve ": 1468,
      "pp": 1469,
      "\"]\r\n": 1470,
      "me ": 1471,
      ".\",\"": 1472,
      "Bob": 1473,
      "unique ": 1474,
      "three ": 1475,
      "hel": 1476,
      "at most ": 1477,
      "(self, nums": 1478,
      "True\r\n": 1479,
      "i < ": 1480,
      "therwise": 1481,
      "defaultdict": 1482,
      "\\(": 1483,
      "matrix": 1484,
      "​​": 1485,
      "new_": 1486,
      "Output: 0\r\n": 1487,
      "comm": 1488,
      "over": 1489,
      "= 0\r\n": 1490,
      "it is ": 1491,
      "enti": 1492,
      "tis": 1493,
      "secu": 1494,
      "vers": 1495,
      "XOR ": 1496,
      "ome ": 1497,
      "`n": 1498,
      "values": 1499,
      "an integer array ": 1500,
      "__": 1501,
      "base": 1502,
      "s is ": 1503,
      "Here's the ": 1504,
      "ard ": 1505,
      "j in range(": 1506,
      "3] ": 1507,
      "e.": 1508,
      "point ": 1509,
      "check ": 1510,
      "cat": 1511,
      "* 10": 1512,
      "satis": 1513,
      "row ": 1514,
      "consecu": 1515,
      "12": 1516,
      "ity": 1517,
      "3,2,": 1518,
      "9 + ": 1519,
      "ce the ": 1520,
      "mar": 1521,
      "0,0,0,0,": 1522,
      "use a ": 1523,
      "-1, ": 1524,
      "ant ": 1525,
      "per ": 1526,
      "<= 109\r\n": 1527,
      "replac": 1528,
      "ally": 1529,
      "key": 1530,
      "does ": 1531,
      "less than ": 1532,
      "ensur": 1533,
      "allow": 1534,
      "child": 1535,
      "minim": 1536,
      "will be ": 1537,
      "fli": 1538,
      "nums2": 1539,
      "array.\r\n": 1540,
      "i + ": 1541,
      "list of ": 1542,
      "Sub": 1543,
      "s (": 1544,
      "] == ": 1545,
      "checks ": 1546,
      "dep": 1547,
      "Output: \"": 1548,
      "`dp": 1549,
      "        max_": 1550,
      "num ": 1551,
      "code": 1552,
      ": List[int]) -> int:\r\n": 1553,
      "mod": 1554,
      "even ": 1555,
      "coin": 1556,
      "in the range ": 1557,
      "defin": 1558,
      "1 <= n ": 1559,
      "Tim": 1560,
      "patter": 1561,
      "s.": 1562,
      ", and the ": 1563,
      "### Explanation:\r\n": 1564,
      "dy": 1565,
      "condition": 1566,
      "as the ": 1567,
      "even": 1568,
      "consists of ": 1569,
      "possible to ": 1570,
      "step ": 1571,
      "frequency ": 1572,
      "store the ": 1573,
      "solve this ": 1574,
      "ud": 1575,
      "ston": 1576,
      "able": 1577,
      ". S": 1578,
      "from colle": 1579,
      "2 <= ": 1580,
      "ext": 1581,
      "mean": 1582,
      "ctions import ": 1583,
      "from collections import ": 1584,
      ")]\r\n": 1585,
      "does not ": 1586,
      "right = ": 1587,
      "pair ": 1588,
      "cd": 1589,
      "nega": 1590,
      "greater than ": 1591,
      "time": 1592,
      "\"b": 1593,
      "ute ": 1594,
      "subsequen": 1595,
      "needed ": 1596,
      "shown ": 1597,
      "ni": 1598,
      "[i], ": 1599,
      "second": 1600,
      "`, ": 1601,
      ": str": 1602,
      ") + ": 1603,
      "]], ": 1604,
      "m, ": 1605,
      "left_": 1606,
      "float": 1607,
      "them ": 1608,
      "integer array ": 1609,
      ". \r\n": 1610,
      "1 to ": 1611,
      "` is ": 1612,
      "clo": 1613,
      "some ": 1614,
      "weigh": 1615,
      "        # Initializ": 1616,
      "times ": 1617,
      "sion ": 1618,
      "gener": 1619,
      "decre": 1620,
      "cont": 1621,
      "work": 1622,
      "bal": 1623,
      "time complex": 1624,
      "After ": 1625,
      "do ": 1626,
      "maximum number of ": 1627,
      "`i": 1628,
      "represents the ": 1629,
      "keep track of the ": 1630,
      "stri": 1631,
      "valid": 1632,
      "moves ": 1633,
      "Counter": 1634,
      "2D ": 1635,
      "true\r\n": 1636,
      "operation ": 1637,
      "(i": 1638,
      "ming ": 1639,
      "parti": 1640,
      "De": 1641,
      "Output: true\r\n": 1642,
      "Tree": 1643,
      "lem ": 1644,
      "[1": 1645,
      "hand": 1646,
      "different ": 1647,
      "direction": 1648,
      "is_": 1649,
      "To solve this ": 1650,
      "', '": 1651,
      "4.\r\n": 1652,
      "complet": 1653,
      "List[List[int]]": 1654,
      "namic ": 1655,
      "lar": 1656,
      "combin": 1657,
      "implement": 1658,
      "height ": 1659,
      "- **": 1660,
      "edge ": 1661,
      "board": 1662,
      "contains ": 1663,
      "calculate the ": 1664,
      "over ": 1665,
      "input ": 1666,
      "[i + ": 1667,
      "+ 1):\r\n": 1668,
      "Note that ": 1669,
      "problem ": 1670,
      "Al": 1671,
      "age": 1672,
      "den": 1673,
      "consecutive ": 1674,
      "0]\r\n": 1675,
      "k.\r\n": 1676,
      "repe": 1677,
      "rans": 1678,
      "conver": 1679,
      "product ": 1680,
      "0 to ": 1681,
      "unique": 1682,
      "-10": 1683,
      "item": 1684,
      "previ": 1685,
      "parent": 1686,
      "ways to ": 1687,
      "For example, ": 1688,
      "inu": 1689,
      "ences ": 1690,
      "is to ": 1691,
      "equal": 1692,
      "read": 1693,
      "ore": 1694,
      "short": 1695,
      "fact": 1696,
      "wise ": 1697,
      "ts ": 1698,
      ") for ": 1699,
      "optim": 1700,
      "brea": 1701,
      "coord": 1702,
      "maxim": 1703,
      "This solution uses a ": 1704,
      "window ": 1705,
      "person ": 1706,
      "rect": 1707,
      "ses ": 1708,
      "count_": 1709,
      "e if ": 1710,
      "nums1": 1711,
      "used ": 1712,
      "back": 1713,
      ")):\r\n": 1714,
      "xi": 1715,
      "case": 1716,
      "ar ": 1717,
      "We can ": 1718,
      "strings ": 1719,
      "Output: 4\r\n": 1720,
      "ulo ": 1721,
      "-b": 1722,
      "Ad": 1723,
      "sum(": 1724,
      "swap": 1725,
      "Output: 1": 1726,
      "It can be ": 1727,
      "Iter": 1728,
      "permut": 1729,
      "rectang": 1730,
      "go": 1731,
      "cursi": 1732,
      "key ": 1733,
      "way ": 1734,
      "above ": 1735,
      "'.\r\n": 1736,
      "has a ": 1737,
      "stud": 1738,
      "for a ": 1739,
      "[j": 1740,
      "a, ": 1741,
      ". Th": 1742,
      "left = ": 1743,
      "ate(": 1744,
      "y the ": 1745,
      "On": 1746,
      "[\"": 1747,
      "day ": 1748,
      "returns ": 1749,
      "bea": 1750,
      "lim": 1751,
      "bool": 1752,
      "                    if ": 1753,
      "left, ": 1754,
      "program": 1755,
      "fter": 1756,
      "chang": 1757,
      "i, j": 1758,
      "None": 1759,
      "Sum": 1760,
      "than": 1761,
      "es\r\n": 1762,
      ", return the ": 1763,
      "sed ": 1764,
      "Op": 1765,
      "nums)\r\n": 1766,
      "== 0:\r\n": 1767,
      ": int) -> ": 1768,
      "box": 1769,
      "sible ": 1770,
      "without ": 1771,
      "original ": 1772,
      "balan": 1773,
      "_ in range(": 1774,
      "a string ": 1775,
      "s: str": 1776,
      "adjacent ": 1777,
      "-= 1\r\n": 1778,
      "b ": 1779,
      "since ": 1780,
      "degre": 1781,
      "good ": 1782,
      "amoun": 1783,
      "words": 1784,
      "ways ": 1785,
      "namic program": 1786,
      "y-": 1787,
      "- 1": 1788,
      "final ": 1789,
      "odd ": 1790,
      "5]\r\n": 1791,
      "`k` ": 1792,
      "cle": 1793,
      "sent": 1794,
      "val ": 1795,
      "roup ": 1796,
      "expres": 1797,
      "right_": 1798,
      "single ": 1799,
      "run": 1800,
      "x = ": 1801,
      ", we need to ": 1802,
      "keep": 1803,
      "botto": 1804,
      "Iterate ": 1805,
      "5.\r\n": 1806,
      "cap": 1807,
      "dynamic program": 1808,
      "coordin": 1809,
      "t of ": 1810,
      "unti": 1811,
      "letter ": 1812,
      "jum": 1813,
      "remove ": 1814,
      "points ": 1815,
      "achi": 1816,
      "visited": 1817,
      "modulo ": 1818,
      ") % ": 1819,
      "using the ": 1820,
      "compon": 1821,
      "DFS": 1822,
      "bb": 1823,
      "order.\r\n": 1824,
      "multiple ": 1825,
      "dictionary ": 1826,
      "acc": 1827,
      "        # S": 1828,
      "than the ": 1829,
      "You can ": 1830,
      "ate a ": 1831,
      "'a": 1832,
      "MO": 1833,
      "trans": 1834,
      "get ": 1835,
      "first": 1836,
      "result\r\n": 1837,
      "works ": 1838,
      "total number of ": 1839,
      "lowercase English letters.\r\n": 1840,
      "To solve this problem": 1841,
      "bool:\r\n": 1842,
      "mak": 1843,
      "2,2,": 1844,
      "continu": 1845,
      "distance": 1846,
      "` and `": 1847,
      "9 ": 1848,
      "tivel": 1849,
      "desc": 1850,
      "ing a ": 1851,
      "[i] = ": 1852,
      "ild ": 1853,
      "0000": 1854,
      "resulting ": 1855,
      "max(max_": 1856,
      "mid ": 1857,
      "1,0,": 1858,
      "inf'": 1859,
      "float('": 1860,
      "previous ": 1861,
      "gori": 1862,
      "approach": 1863,
      "seg": 1864,
      "through ": 1865,
      "Pa": 1866,
      "add ": 1867,
      "find ": 1868,
      "heapq": 1869,
      "<= 100\r\n": 1870,
      "value of ": 1871,
      "Find the ": 1872,
      "TreeNode": 1873,
      "jo": 1874,
      "k the ": 1875,
      "else ": 1876,
      "column ": 1877,
      "based ": 1878,
      "would ": 1879,
      "            while ": 1880,
      "spon": 1881,
      "gorith": 1882,
      "- The ": 1883,
      "elif ": 1884,
      "fini": 1885,
      "but ": 1886,
      "edges ": 1887,
      "6, ": 1888,
      " = 0\r\n": 1889,
      "            for j in range(": 1890,
      "common ": 1891,
      "fu": 1892,
      "travers": 1893,
      "indices": 1894,
      "2 and ": 1895,
      "count the ": 1896,
      "\"],[": 1897,
      "i\r\n": 1898,
      "eng": 1899,
      "List[str": 1900,
      "-1.\r\n": 1901,
      "have the ": 1902,
      "to_": 1903,
      "List[int]:\r\n": 1904,
      "query": 1905,
      "shortest ": 1906,
      "4. **": 1907,
      "les ": 1908,
      "There is ": 1909,
      "MOD": 1910,
      "group ": 1911,
      "out": 1912,
      "8\r\n": 1913,
      "Po": 1914,
      "c ": 1915,
      "Output: f": 1916,
      "Bob ": 1917,
      "top": 1918,
      "use the ": 1919,
      "prefix_sum": 1920,
      "square": 1921,
      "hal": 1922,
      "1. ": 1923,
      "umer": 1924,
      "Output: false\r\n": 1925,
      "Val": 1926,
      "ary": 1927,
      "divis": 1928,
      "[3,": 1929,
      "negative ": 1930,
      "ince the ": 1931,
      "vow": 1932,
      "square ": 1933,
      "time complexity ": 1934,
      "perform": 1935,
      "binary search ": 1936,
      "queue": 1937,
      "pic": 1938,
      "wher": 1939,
      "Explanation: \r\n": 1940,
      "tree": 1941,
      "7.\r\n": 1942,
      "y = ": 1943,
      "2 * ": 1944,
      "O(n": 1945,
      "dynamic programming ": 1946,
      "age ": 1947,
      "your ": 1948,
      "1 - ": 1949,
      "        # C": 1950,
      "\" and ": 1951,
      "an array of ": 1952,
      "bl": 1953,
      "lexi": 1954,
      "inta": 1955,
      "ect": 1956,
      "Finally": 1957,
      "mon": 1958,
      "sele": 1959,
      "Co": 1960,
      "enumer": 1961,
      "small": 1962,
      "approach ensures that ": 1963,
      "-1,": 1964,
      "many ": 1965,
      "event": 1966,
      "correspon": 1967,
      "enumerate(": 1968,
      "get": 1969,
      "when ": 1970,
      "array is ": 1971,
      "choose ": 1972,
      "3 + ": 1973,
      "abs(": 1974,
      "+ 1)\r\n": 1975,
      "queue ": 1976,
      "delet": 1977,
      "befor": 1978,
      "us ": 1979,
      "count of ": 1980,
      "between the ": 1981,
      "'1": 1982,
      "sk": 1983,
      "s):\r\n": 1984,
      ", c": 1985,
      "1 = [": 1986,
      "1 <= nums[i] ": 1987,
      "s of length ": 1988,
      "ful": 1989,
      "alread": 1990,
      "algorith": 1991,
      "cograph": 1992,
      "100": 1993,
      "prime ": 1994,
      "7 ": 1995,
      "ort the ": 1996,
      "lexicograph": 1997,
      "All ": 1998,
      "Up": 1999,
      "reach ": 2000,
      "mainta": 2001,
      "log": 2002,
      "This solution works ": 2003,
      "obta": 2004,
      "grid = [": 2005,
      "count = 0\r\n": 2006,
      "ing_": 2007,
      "value": 2008,
      "shif": 2009,
      "sorted": 2010,
      "lock": 2011,
      "next_": 2012,
      "4],[": 2013,
      "query ": 2014,
      "ation of the ": 2015,
      "n and ": 2016,
      "ed as ": 2017,
      "constru": 2018,
      "minut": 2019,
      "[0][": 2020,
      "form the ": 2021,
      "last_": 2022,
      "denot": 2023,
      ".e.": 2024,
      "[0, ": 2025,
      "'0": 2026,
      ") to ": 2027,
      "True": 2028,
      "print(": 2029,
      "ly": 2030,
      "tional": 2031,
      "num in ": 2032,
      "side ": 2033,
      "The number of ": 2034,
      ".length <= 100\r\n": 2035,
      "This solution uses ": 2036,
      "up to ": 2037,
      "how ": 2038,
      "[i]\r\n": 2039,
      "<= 1000\r\n": 2040,
      "found ": 2041,
      "already ": 2042,
      "Upd": 2043,
      "plic": 2044,
      "ation of ": 2045,
      "stack ": 2046,
      "\"],[\"": 2047,
      "Non": 2048,
      "fru": 2049,
      "rot": 2050,
      "answer is ": 2051,
      "column": 2052,
      "childr": 2053,
      "lexicographic": 2054,
      "`s": 2055,
      "where the ": 2056,
      "ip": 2057,
      "op ": 2058,
      "ting ": 2059,
      "at index ": 2060,
      "val = ": 2061,
      "1 <= s": 2062,
      "fter the ": 2063,
      "(1, ": 2064,
      "sect": 2065,
      "code ": 2066,
      "Input: grid = [": 2067,
      "], k = ": 2068,
      "price ": 2069,
      "You are given a 0-indexed ": 2070,
      "add(": 2071,
      "sign": 2072,
      "8 ": 2073,
      "fore": 2074,
      "has": 2075,
      "s with ": 2076,
      "level": 2077,
      "10\r\n": 2078,
      "meet": 2079,
      "23": 2080,
      "99": 2081,
      "Wh": 2082,
      "times": 2083,
      ". If the ": 2084,
      "iterate ": 2085,
      "1)": 2086,
      "inn": 2087,
      "to store the ": 2088,
      "* n\r\n": 2089,
      "indic": 2090,
      "graph[": 2091,
      "root = [": 2092,
      "ide": 2093,
      "respec": 2094,
      "**: For each ": 2095,
      "city ": 2096,
      "= \"": 2097,
      "Input: root = [": 2098,
      "counter": 2099,
      "        # Calculate the ": 2100,
      "we return ": 2101,
      "vel ": 2102,
      "a, b": 2103,
      "Optional": 2104,
      "float('inf'": 2105,
      "now": 2106,
      "cost of ": 2107,
      "Given the ": 2108,
      "att": 2109,
      "# print(": 2110,
      "freq": 2111,
      "or equal to ": 2112,
      "1: ": 2113,
      "e a ": 2114,
      "**:\r\n": 2115,
      "palindrom": 2116,
      "task": 2117,
      "shown that ": 2118,
      "_index": 2119,
      "aver": 2120,
      "   ": 2121,
      "string.\r\n": 2122,
      "d\r\n": 2123,
      "                for ": 2124,
      "count\r\n": 2125,
      "Choo": 2126,
      "line ": 2127,
      "split ": 2128,
      ".\",\".\",\"": 2129,
      "reverse": 2130,
      "smaller ": 2131,
      "2: ": 2132,
      "thir": 2133,
      "bound": 2134,
      ". It then ": 2135,
      "increasing ": 2136,
      "] + ": 2137,
      "Input: nums = [1,2,": 2138,
      "close": 2139,
      "strictly ": 2140,
      "[j] ": 2141,
      "fri": 2142,
      "Explanation: There are ": 2143,
      "target = ": 2144,
      "graph ": 2145,
      "ger ": 2146,
      "4]\r\n": 2147,
      "be the ": 2148,
      "recursi": 2149,
      "or the ": 2150,
      "always ": 2151,
      "cho": 2152,
      "possible": 2153,
      "efficient ": 2154,
      "returns the ": 2155,
      "lead": 2156,
      "absol": 2157,
      "ce.\r\n": 2158,
      "component": 2159,
      "vowel": 2160,
      "False": 2161,
      "room": 2162,
      "window": 2163,
      "1][": 2164,
      "2) ": 2165,
      "initi": 2166,
      "leet": 2167,
      "dest": 2168,
      "k <= ": 2169,
      "medi": 2170,
      "absolute ": 2171,
      "5],[": 2172,
      "led ": 2173,
      "that can be ": 2174,
      "        # F": 2175,
      "form a ": 2176,
      "'\r\n": 2177,
      "7, ": 2178,
      "        dp": 2179,
      "ant": 2180,
      "dif": 2181,
      "if it ": 2182,
      "color ": 2183,
      "visited ": 2184,
      "2. ": 2185,
      "Pro": 2186,
      "ail": 2187,
      "gi": 2188,
      "lea": 2189,
      "divisible ": 2190,
      "connect": 2191,
      "Use ": 2192,
      "uti": 2193,
      "arrays ": 2194,
      "until ": 2195,
      "1]]\r\n": 2196,
      "cir": 2197,
      "sim": 2198,
      "s = 0\r\n": 2199,
      "follows:\r\n": 2200,
      "text": 2201,
      "0 or ": 2202,
      "len(nums": 2203,
      "ket": 2204,
      "top ": 2205,
      "remaind": 2206,
      "Star": 2207,
      "':\r\n": 2208,
      "k, ": 2209,
      "of": 2210,
      "suffi": 2211,
      "that is ": 2212,
      "= []\r\n": 2213,
      "        return result\r\n": 2214,
      "them": 2215,
      "binary tree ": 2216,
      "defaultdict(": 2217,
      "val\r\n": 2218,
      "from 0 to ": 2219,
      "exce": 2220,
      "[0]": 2221,
      "area ": 2222,
      "power ": 2223,
      "))  # ": 2224,
      "caten": 2225,
      "approach:\r\n": 2226,
      "3 = ": 2227,
      "BFS": 2228,
      "et ": 2229,
      "cover": 2230,
      "        # Iterate ": 2231,
      "i and ": 2232,
      "i - ": 2233,
      "linked ": 2234,
      "factor": 2235,
      "of size ": 2236,
      "it's ": 2237,
      "zero ": 2238,
      "        for i in range(1, ": 2239,
      "-by-": 2240,
      "[-1": 2241,
      "pas": 2242,
      "}\r\n": 2243,
      "th-": 2244,
      "an empty ": 2245,
      "**: The ": 2246,
      "equal to the ": 2247,
      "push": 2248,
      "...": 2249,
      "step-by-": 2250,
      "peo": 2251,
      "change": 2252,
      "corresponding ": 2253,
      "0)\r\n": 2254,
      "Ar": 2255,
      "Num": 2256,
      "cn": 2257,
      "ating the ": 2258,
      "2,3,": 2259,
      "special ": 2260,
      "step-by-step ": 2261,
      "[x": 2262,
      "bit ": 2263,
      "d, ": 2264,
      "ry ": 2265,
      "10 ": 2266,
      "are the ": 2267,
      "sol.": 2268,
      "2]": 2269,
      "cour": 2270,
      "ame": 2271,
      "not in ": 2272,
      "right\r\n": 2273,
      "occur": 2274,
      "occurrences ": 2275,
      "divisible by ": 2276,
      "Of": 2277,
      "ing of ": 2278,
      "rang": 2279,
      "ally, ": 2280,
      "needed to ": 2281,
      "        # Initialize the ": 2282,
      "Per": 2283,
      "ba": 2284,
      "mer": 2285,
      "rib": 2286,
      "head ": 2287,
      "nodes in the ": 2288,
      "Optional[": 2289,
      "[4,": 2290,
      ". The `": 2291,
      "within the ": 2292,
      "part": 2293,
      "require": 2294,
      "third ": 2295,
      "fe": 2296,
      "given the ": 2297,
      "otherwise": 2298,
      "to a ": 2299,
      "1,3,": 2300,
      "from 1 to ": 2301,
      "place ": 2302,
      "_count[": 2303,
      "required to ": 2304,
      "ates": 2305,
      "node.\r\n": 2306,
      "sequence of ": 2307,
      "trip": 2308,
      "connected ": 2309,
      "ball": 2310,
      "nums.\r\n": 2311,
      "s, and ": 2312,
      "sum is ": 2313,
      "s[i] = [": 2314,
      "satisf": 2315,
      "sli": 2316,
      "tho": 2317,
      "tive": 2318,
      "appl": 2319,
      "<= 104\r\n": 2320,
      "board ": 2321,
      "is the number of ": 2322,
      "tree.\r\n": 2323,
      "buil": 2324,
      "avo": 2325,
      "pattern": 2326,
      "subsequences ": 2327,
      "-1 ": 2328,
      "s) ": 2329,
      "ct the ": 2330,
      "heap ": 2331,
      "set of ": 2332,
      "\"], ": 2333,
      "Operation": 2334,
      "inser": 2335,
      "have a ": 2336,
      "partition": 2337,
      "List[List[int]]) -> int:\r\n": 2338,
      "\"0": 2339,
      "& ": 2340,
      "50\r\n": 2341,
      "Ma": 2342,
      "memo": 2343,
      "student": 2344,
      "# print(sol.": 2345,
      "leading ": 2346,
      "'.": 2347,
      "(`": 2348,
      "mask ": 2349,
      "* 104\r\n": 2350,
      "means ": 2351,
      "beauti": 2352,
      "k: int) -> int:\r\n": 2353,
      "se the ": 2354,
      ", which ": 2355,
      "left\r\n": 2356,
      "(i.e.": 2357,
      "(x": 2358,
      "ong ": 2359,
      "subtree ": 2360,
      "approach to ": 2361,
      "task ": 2362,
      "All the ": 2363,
      "way to ": 2364,
      "Otherwise": 2365,
      "            max_": 2366,
      "s, the ": 2367,
      ") -> bool:\r\n": 2368,
      "take ": 2369,
      "cc": 2370,
      "     ": 2371,
      "fit ": 2372,
      "        for i in range(n):\r\n": 2373,
      "player ": 2374,
      "P ": 2375,
      "ok": 2376,
      "map": 2377,
      ") -> List[int]:\r\n": 2378,
      "' and ": 2379,
      "left and ": 2380,
      ".length <= 1000\r\n": 2381,
      "more than ": 2382,
      "make the ": 2383,
      "heapq.": 2384,
      "[1] ": 2385,
      ", you ": 2386,
      "bitwise ": 2387,
      "determine the ": 2388,
      "            current_": 2389,
      "                \r\n": 2390,
      "This approach ensures that ": 2391,
      "starting from ": 2392,
      "it.\r\n": 2393,
      "result.append(": 2394,
      "            for i in range(": 2395,
      "space ": 2396,
      "overl": 2397,
      "initial ": 2398,
      "].append(": 2399,
      "length of ": 2400,
      "contain ": 2401,
      "e that the ": 2402,
      "+ 1\r\n": 2403,
      "array\r\n": 2404,
      ".length == 2\r\n": 2405,
      "constraints.\r\n": 2406,
      "ful ": 2407,
      "        # Cre": 2408,
      "before ": 2409,
      "'t ": 2410,
      "1].\r\n": 2411,
      "2n": 2412,
      "man": 2413,
      "Output: 5\r\n": 2414,
      "ed by the ": 2415,
      "to keep track of the ": 2416,
      "        # If ": 2417,
      "i <= ": 2418,
      "(self, s: str": 2419,
      "complete ": 2420,
      "Valu": 2421,
      "how many ": 2422,
      "lexicographically ": 2423,
      "in `": 2424,
      "To solve this problem, we need to ": 2425,
      "cach": 2426,
      "another ": 2427,
      ". For each ": 2428,
      "diag": 2429,
      "[0] = ": 2430,
      ", we return ": 2431,
      "corn": 2432,
      "subarrays ": 2433,
      "satisfi": 2434,
      "decreasing ": 2435,
      "] += 1\r\n": 2436,
      "list.\r\n": 2437,
      "minimum": 2438,
      "0.": 2439,
      "1)\r\n": 2440,
      "ure": 2441,
      "ater": 2442,
      "        return max_": 2443,
      "solve the ": 2444,
      "such that the ": 2445,
      "do not ": 2446,
      "hour": 2447,
      "ing.\r\n": 2448,
      "wid": 2449,
      "== '": 2450,
      "been ": 2451,
      "true if ": 2452,
      "avail": 2453,
      "found": 2454,
      "`dp` ": 2455,
      "It can be shown that ": 2456,
      "bottom": 2457,
      "heapq.heap": 2458,
      "6.\r\n": 2459,
      "An": 2460,
      "Pre": 2461,
      "s by ": 2462,
      "side": 2463,
      "es a ": 2464,
      "as follows:\r\n": 2465,
      "break\r\n": 2466,
      "redu": 2467,
      "0 + ": 2468,
      "                    # ": 2469,
      "                    return ": 2470,
      "string is ": 2471,
      "This solution efficiently ": 2472,
      "should be ": 2473,
      "per function ": 2474,
      "(i, j": 2475,
      "        result ": 2476,
      ". You ": 2477,
      "concaten": 2478,
      "In the ": 2479,
      "length = ": 2480,
      "prime": 2481,
      "Hence": 2482,
      "Se": 2483,
      "el ": 2484,
      "init": 2485,
      "Step ": 2486,
      "`n` ": 2487,
      "__init": 2488,
      "unique.\r\n": 2489,
      "__init__": 2490,
      "4 + ": 2491,
      "5], ": 2492,
      "cent": 2493,
      "sour": 2494,
      "child ": 2495,
      "str:\r\n": 2496,
      "    def min": 2497,
      "where each ": 2498,
      "grid[": 2499,
      "team": 2500,
      "midd": 2501,
      "bisect": 2502,
      "house": 2503,
      "optimal ": 2504,
      "lab": 2505,
      "You are also ": 2506,
      "achiev": 2507,
      "algorithm ": 2508,
      "s.append(": 2509,
      "s for ": 2510,
      "1 <": 2511,
      "elements in the ": 2512,
      "must be ": 2513,
      "ont": 2514,
      "sorted_": 2515,
      "grid[i][j] ": 2516,
      "iterates through the ": 2517,
      "returns `": 2518,
      "join": 2519,
      "4] ": 2520,
      "happ": 2521,
      "initializ": 2522,
      "num_": 2523,
      ") // ": 2524,
      "prefix_": 2525,
      "house ": 2526,
      "there is no ": 2527,
      "(n": 2528,
      ".val ": 2529,
      "ly.\r\n": 2530,
      "ties ": 2531,
      "Output: 6\r\n": 2532,
      "0,1,": 2533,
      "(self, n": 2534,
      "Com": 2535,
      "x n ": 2536,
      "Conver": 2537,
      "You are given an integer array ": 2538,
      "build": 2539,
      "distinct": 2540,
      "check if ": 2541,
      "2)": 2542,
      "2)\r\n": 2543,
      "mis": 2544,
      "other": 2545,
      "robo": 2546,
      "                else:\r\n": 2547,
      "expl": 2548,
      "    def max": 2549,
      "guar": 2550,
      "backtrac": 2551,
      "Arra": 2552,
      "Numb": 2553,
      ".add(": 2554,
      "j - ": 2555,
      "num = ": 2556,
      "count += 1\r\n": 2557,
      "non-empty ": 2558,
      "specifi": 2559,
      "([": 2560,
      "0], ": 2561,
      "Sort": 2562,
      "false": 2563,
      "sti": 2564,
      "old": 2565,
      "cess": 2566,
      "consist ": 2567,
      "compute the ": 2568,
      "split": 2569,
      "occurrence ": 2570,
      "from collections import defaultdict": 2571,
      "respectivel": 2572,
      ".next": 2573,
      ") == ": 2574,
      "subset": 2575,
      "we have ": 2576,
      "far": 2577,
      "oriz": 2578,
      "        # The ": 2579,
      "prices": 2580,
      "appears ": 2581,
      "jump": 2582,
      "have the same ": 2583,
      "\"1": 2584,
      "dur": 2585,
      "re ": 2586,
      "> 0:\r\n": 2587,
      "    def find": 2588,
      "within ": 2589,
      "2, 3, ": 2590,
      "pointer ": 2591,
      "reach the ": 2592,
      "__init__(self, ": 2593,
      "that": 2594,
      "ill": 2595,
      "Return the number of ": 2596,
      "Count the ": 2597,
      "there are no ": 2598,
      "change ": 2599,
      "keeps ": 2600,
      "1st ": 2601,
      "5 + ": 2602,
      "`x": 2603,
      "ward": 2604,
      "fil": 2605,
      "tern": 2606,
      "maximum possible ": 2607,
      "            # Check ": 2608,
      "at least one ": 2609,
      "limit": 2610,
      "You are also given ": 2611,
      "tigu": 2612,
      "Input: arr": 2613,
      "char in ": 2614,
      "ize the ": 2615,
      ".length, ": 2616,
      "cust": 2617,
      "Here's the implement": 2618,
      "At ": 2619,
      "\\) ": 2620,
      "= (": 2621,
      "1,4,": 2622,
      "[0])\r\n": 2623,
      "part ": 2624,
      "You are given two ": 2625,
      "x, y": 2626,
      "One ": 2627,
      "Update the ": 2628,
      "2nd ": 2629,
      "--": 2630,
      "1] = ": 2631,
      "n <= ": 2632,
      "contigu": 2633,
      "extra": 2634,
      "end of the ": 2635,
      "ensuring ": 2636,
      "flip": 2637,
      " = 1": 2638,
      "Output: -1\r\n": 2639,
      "odd": 2640,
      "diagon": 2641,
      ".\\r\r\n": 2642,
      "ros": 2643,
      "roun": 2644,
      "dec": 2645,
      "m == ": 2646,
      "-1):\r\n": 2647,
      "element in the ": 2648,
      "mask": 2649,
      "exactly one ": 2650,
      "This solution works by ": 2651,
      "0]]\r\n": 2652,
      "cle ": 2653,
      "dis": 2654,
      "sort()\r\n": 2655,
      "only one ": 2656,
      "duplic": 2657,
      "tical ": 2658,
      "MOD\r\n": 2659,
      "divisor": 2660,
      "car": 2661,
      "obstac": 2662,
      "        n = len(nums)\r\n": 2663,
      "n.\r\n": 2664,
      "        # Check ": 2665,
      "node, ": 2666,
      "Resul": 2667,
      "energ": 2668,
      "pair of ": 2669,
      "based on the ": 2670,
      "average ": 2671,
      "ante": 2672,
      "exp": 2673,
      "pairs ": 2674,
      "Given a ": 2675,
      "(0, 0": 2676,
      "destin": 2677,
      "`. The ": 2678,
      "e(": 2679,
      "giv": 2680,
      "| ": 2681,
      "initial": 2682,
      "result = ": 2683,
      "into a ": 2684,
      "stones ": 2685,
      "accord": 2686,
      "custom": 2687,
      "seen": 2688,
      "coul": 2689,
      "for _ in range(": 2690,
      "][c": 2691,
      "represent ": 2692,
      "edges": 2693,
      "server": 2694,
      "product": 2695,
      "guarante": 2696,
      "_to_": 2697,
      "gcd": 2698,
      "ance": 2699,
      "level ": 2700,
      "\" -> ": 2701,
      "sorted in ": 2702,
      "segment": 2703,
      "Choose ": 2704,
      "3].\r\n": 2705,
      "Uni": 2706,
      "es, ": 2707,
      "palindrome": 2708,
      "avoid ": 2709,
      "This approach ensures that we ": 2710,
      "1 << ": 2711,
      "contiguous ": 2712,
      "dat": 2713,
      "land": 2714,
      "sy": 2715,
      "abc": 2716,
      "added ": 2717,
      "type ": 2718,
      "worker": 2719,
      "permutation": 2720,
      "orizont": 2721,
      "2].\r\n": 2722,
      "3]": 2723,
      "AN": 2724,
      "[5,": 2725,
      "dow": 2726,
      "vari": 2727,
      "→ ": 2728,
      "Str": 2729,
      "cannot be ": 2730,
      "`i` ": 2731,
      "maximum": 2732,
      "could ": 2733,
      "=0, ": 2734,
      "Fir": 2735,
      "stat": 2736,
      ". Finally": 2737,
      "1 is ": 2738,
      "two": 2739,
      "lower ": 2740,
      "paren": 2741,
      "Return the minimum number of ": 2742,
      "process ": 2743,
      "25": 2744,
      "horizont": 2745,
      "ima": 2746,
      "lam": 2747,
      "ster": 2748,
      "is either ": 2749,
      "                current_": 2750,
      "` function ": 2751,
      "k = 2\r\n": 2752,
      "empty": 2753,
      "consisting of ": 2754,
      "edges = [": 2755,
      "cycle": 2756,
      "Array": 2757,
      "n:\r\n": 2758,
      "stic": 2759,
      "we": 2760,
      "not": 2761,
      "dp[i][j": 2762,
      "pile": 2763,
      "may be ": 2764,
      ".pop": 2765,
      "4], ": 2766,
      "he": 2767,
      "are not ": 2768,
      "as a ": 2769,
      "Explanation: We can ": 2770,
      "back ": 2771,
      "Time": 2772,
      "de the ": 2773,
      "moun": 2774,
      "positive integer ": 2775,
      "null,null,": 2776,
      "(self, nums: List[int]) -> int:\r\n": 2777,
      "        # Create a ": 2778,
      "robot ": 2779,
      "Sear": 2780,
      "of all ": 2781,
      "2 is ": 2782,
      "by the ": 2783,
      "-1]\r\n": 2784,
      "        if not ": 2785,
      "1],[1,": 2786,
      "idea ": 2787,
      "leetcode": 2788,
      "32": 2789,
      "3: ": 2790,
      "No ": 2791,
      "Qu": 2792,
      "Tra": 2793,
      "ad ": 2794,
      "table ": 2795,
      "in_": 2796,
      "2 - ": 2797,
      "s = [[1,": 2798,
      "[0]\r\n": 2799,
      "move the ": 2800,
      "elements in ": 2801,
      "j < ": 2802,
      "vely ": 2803,
      "This solution uses dynamic programming ": 2804,
      "beg": 2805,
      "four ": 2806,
      "so": 2807,
      "# De": 2808,
      "proper": 2809,
      "nums is ": 2810,
      "#     ": 2811,
      "5] ": 2812,
      "An ": 2813,
      "card": 2814,
      "# class ": 2815,
      "subtre": 2816,
      "\",\"b": 2817,
      "            if not ": 2818,
      "neede": 2819,
      "depth ": 2820,
      "generated ": 2821,
      "finition ": 2822,
      "# Definition ": 2823,
      "#     def ": 2824,
      "=None": 2825,
      "Bu": 2826,
      "DP ": 2827,
      "^ ": 2828,
      "fit": 2829,
      "        min_": 2830,
      "            elif ": 2831,
      "                max_": 2832,
      "nums:\r\n": 2833,
      "words ": 2834,
      "upper": 2835,
      "#         self.val = ": 2836,
      "frequency of each ": 2837,
      "weight": 2838,
      "children": 2839,
      "from collections import defaultdict\r\n": 2840,
      "#     def __init__(self, ": 2841,
      "'b": 2842,
      "). ": 2843,
      ")` ": 2844,
      "m = ": 2845,
      "- We ": 2846,
      "impossible to ": 2847,
      "nums[0] ": 2848,
      "starts ": 2849,
      "triang": 2850,
      "join(": 2851,
      "any number of ": 2852,
      "000": 2853,
      "track of ": 2854,
      "increment": 2855,
      "cells ": 2856,
      "in the range [1, ": 2857,
      "count the number of ": 2858,
      "diff ": 2859,
      "middle ": 2860,
      "=None):\r\n": 2861,
      "lay": 2862,
      "arrang": 2863,
      "es to ": 2864,
      "words = [": 2865,
      "    def count": 2866,
      "minimum cost ": 2867,
      "s that can be ": 2868,
      "large ": 2869,
      "1):\r\n": 2870,
      "Mo": 2871,
      "[:": 2872,
      "e. ": 2873,
      "5,6": 2874,
      "), len(": 2875,
      "room ": 2876,
      "non-decreasing ": 2877,
      "prev_": 2878,
      "through each ": 2879,
      "idea is to ": 2880,
      "fac": 2881,
      "red": 2882,
      "arri": 2883,
      "simul": 2884,
      ") is ": 2885,
      "ous": 2886,
      "val=0, ": 2887,
      "is the maximum ": 2888,
      "            # If ": 2889,
      "sequence": 2890,
      "set to ": 2891,
      "(self, nums: List[int], ": 2892,
      "keeps track of the ": 2893,
      "AND ": 2894,
      "#         self.val = val\r\n": 2895,
      "#     def __init__(self, val=0, ": 2896,
      "20": 2897,
      "Bo": 2898,
      "mi": 2899,
      "ying ": 2900,
      "ong": 2901,
      "d = ": 2902,
      "deque": 2903,
      "[i-1": 2904,
      "arr[i] ": 2905,
      "n - 1\r\n": 2906,
      "set(": 2907,
      "using a ": 2908,
      "sorted(": 2909,
      "(i.e., ": 2910,
      "\"c": 2911,
      "1:": 2912,
      "Tri": 2913,
      "Your ": 2914,
      "]` ": 2915,
      "game ": 2916,
      "ency ": 2917,
      "of the current ": 2918,
      "number is ": 2919,
      "show": 2920,
      "there is a ": 2921,
      "power": 2922,
      "closest ": 2923,
      "(2, ": 2924,
      "[2, ": 2925,
      "mes": 2926,
      "was ": 2927,
      "altern": 2928,
      "nums and ": 2929,
      "rule": 2930,
      "moving ": 2931,
      "only of ": 2932,
      "[i].length\r\n": 2933,
      "checking ": 2934,
      "binary represent": 2935,
      "s. It ": 2936,
      "        def dfs(": 2937,
      "Note": 2938,
      "1 <= nums.length <= 105\r\n": 2939,
      "\\( ": 2940,
      "beautiful ": 2941,
      "3. ": 2942,
      "4].\r\n": 2943,
      "k-": 2944,
      "k:\r\n": 2945,
      "get the ": 2946,
      "assign": 2947,
      "\" is ": 2948,
      "representing the ": 2949,
      "List[List[int]], ": 2950,
      "neighbor ": 2951,
      "i + 1, ": 2952,
      "Since ": 2953,
      "j, ": 2954,
      "j = ": 2955,
      "once ": 2956,
      "asc": 2957,
      "Output: 2": 2958,
      "ely ": 2959,
      "        # Find the ": 2960,
      "has the ": 2961,
      "--> ": 2962,
      "Here ": 2963,
      "To": 2964,
      "us the ": 2965,
      "want ": 2966,
      "yi": 2967,
      "ones ": 2968,
      "store ": 2969,
      "ali": 2970,
      "at each ": 2971,
      "10^": 2972,
      "ends ": 2973,
      "elements of ": 2974,
      "start, ": 2975,
      "check": 2976,
      "size": 2977,
      ": str, ": 2978,
      "3r": 2979,
      "water ": 2980,
      "separ": 2981,
      "10, ": 2982,
      "ight ": 2983,
      "        for i, ": 2984,
      "000\r\n": 2985,
      "values of ": 2986,
      "* (n ": 2987,
      "candies ": 2988,
      "entire ": 2989,
      "1 <= n <= ": 2990,
      "Cost": 2991,
      "left and right ": 2992,
      "s2": 2993,
      "subtra": 2994,
      "perform ": 2995,
      "tree is ": 2996,
      "erefore": 2997,
      "correct ": 2998,
      "original": 2999,
      "inclusi": 3000,
      "0,0,0,0,0,0,0,0,": 3001,
      "balanc": 3002,
      "th-first ": 3003,
      ",\r\n": 3004,
      "ST": 3005,
      "alse ": 3006,
      "in any ": 3007,
      "mapp": 3008,
      "nums2 = ": 3009,
      "head": 3010,
      "            return 0\r\n": 3011,
      "if the current ": 3012,
      "candid": 3013,
      "help": 3014,
      "less than or equal to ": 3015,
      "2]]\r\n": 3016,
      "7]\r\n": 3017,
      "regi": 3018,
      "stone ": 3019,
      "dition ": 3020,
      "ite": 3021,
      "nums1 = [": 3022,
      "ough": 3023,
      "s in a ": 3024,
      "s(self, nums": 3025,
      "2],[2,": 3026,
      "length of the longest ": 3027,
      "​​​​": 3028,
      "checks if ": 3029,
      "valid_": 3030,
      "2D integer array ": 3031,
      "capac": 3032,
      "Optional[TreeNode": 3033,
      "Dist": 3034,
      "s**: ": 3035,
      "101": 3036,
      "count[": 3037,
      "pairs of ": 3038,
      "number\r\n": 3039,
      "queries = [": 3040,
      "combination": 3041,
      "DFS ": 3042,
      "List[str]": 3043,
      "blu": 3044,
      "now ": 3045,
      "people ": 3046,
      "triplet": 3047,
      "')\r\n": 3048,
      "Word": 3049,
      "down ": 3050,
      "win": 3051,
      "x\r\n": 3052,
      "into the ": 3053,
      ", where ": 3054,
      "to be ": 3055,
      "ator": 3056,
      "ap ": 3057,
      "ListNode": 3058,
      "3,3,": 3059,
      "1 <= k <= ": 3060,
      "3 and ": 3061,
      "parent ": 3062,
      "ement": 3063,
      "are:\r\n": 3064,
      "directed ": 3065,
      "Node.val ": 3066,
      "leading zero": 3067,
      "th-first search ": 3068,
      "mone": 3069,
      "r, c": 3070,
      "10**": 3071,
      "element is ": 3072,
      "Given a string ": 3073,
      "You are given a string ": 3074,
      "helper function ": 3075,
      "indicates ": 3076,
      "ever": 3077,
      "in-": 3078,
      "inv": 3079,
      "times.\r\n": 3080,
      "s = []\r\n": 3081,
      "formed ": 3082,
      "   - We ": 3083,
      "node.right": 3084,
      "continue\r\n": 3085,
      "consist of ": 3086,
      "mounta": 3087,
      "Since the ": 3088,
      "bits ": 3089,
      "ck": 3090,
      "job": 3091,
      "state ": 3092,
      "profit ": 3093,
      "number of ways to ": 3094,
      "low ": 3095,
      "value of the ": 3096,
      "Pair": 3097,
      "_cach": 3098,
      "lru": 3099,
      "ences": 3100,
      "umul": 3101,
      "ation**: We ": 3102,
      ") if ": 3103,
      "ack ": 3104,
      "whe": 3105,
      "one of the ": 3106,
      ". If it ": 3107,
      "set()\r\n": 3108,
      "descending ": 3109,
      "memoiz": 3110,
      "lru_cach": 3111,
      "3]]\r\n": 3112,
      "8, ": 3113,
      "[]\r\n": 3114,
      "after the ": 3115,
      "twi": 3116,
      "rest ": 3117,
      ". In ": 3118,
      "a given ": 3119,
      "m x n ": 3120,
      "Incre": 3121,
      "= [0] ": 3122,
      "result is ": 3123,
      ", we can use a ": 3124,
      "over each ": 3125,
      "sentence": 3126,
      "time complexity of ": 3127,
      "obtain": 3128,
      "hash": 3129,
      "4 = ": 3130,
      "stam": 3131,
      "] - ": 3132,
      "es of ": 3133,
      "nums[i]": 3134,
      "Output: [1,": 3135,
      "        # Step ": 3136,
      "box ": 3137,
      "5,6,": 3138,
      "larger ": 3139,
      "Fro": 3140,
      "`, we ": 3141,
      "false ": 3142,
      "wri": 3143,
      "+ 1, ": 3144,
      ") -> str:\r\n": 3145,
      "It is ": 3146,
      "0 <= nums[i] ": 3147,
      "% 2 ": 3148,
      "update the ": 3149,
      "prefix sum": 3150,
      "considered ": 3151,
      "2.": 3152,
      "Let": 3153,
      "us to ": 3154,
      "2,1,": 3155,
      "],\r\n": 3156,
      "s, return ": 3157,
      "solution:\r\n": 3158,
      "arr[": 3159,
      "1111": 3160,
      "substrings ": 3161,
      "want to ": 3162,
      "((": 3163,
      "bloc": 3164,
      "r][c": 3165,
      "s.length\r\n": 3166,
      "109 + ": 3167,
      "profit": 3168,
      "1, and ": 3169,
      "rows ": 3170,
      "spe": 3171,
      "s[j": 3172,
      "1] + ": 3173,
      "\"aa": 3174,
      "odd_": 3175,
      "palindrome ": 3176,
      "3,4]\r\n": 3177,
      "convert": 3178,
      "construct": 3179,
      "When ": 3180,
      "Start ": 3181,
      "Tw": 3182,
      "[root": 3183,
      "ines": 3184,
      "seat": 3185,
      "ure ": 3186,
      "ation:\r\n": 3187,
      "cess ": 3188,
      "character in the ": 3189,
      "Count ": 3190,
      "Note that the ": 3191,
      "over the ": 3192,
      "rectangle": 3193,
      "ascending ": 3194,
      "Bin": 3195,
      "city": 3196,
      "eve ": 3197,
      "== 1:\r\n": 3198,
      "ility ": 3199,
      "present ": 3200,
      "equi": 3201,
      "uses ": 3202,
      "uses a ": 3203,
      "steps ": 3204,
      "highest ": 3205,
      "allows ": 3206,
      "maintain": 3207,
      "shift": 3208,
      "None, ": 3209,
      "9, ": 3210,
      "ack": 3211,
      "for all ": 3212,
      "<= 106\r\n": 3213,
      "len(s": 3214,
      "row and ": 3215,
      "removing ": 3216,
      "'a' ": 3217,
      "For the ": 3218,
      "bc": 3219,
      "bd": 3220,
      "ball ": 3221,
      "bag": 3222,
      "der ": 3223,
      "        total_": 3224,
      "n + 1):\r\n": 3225,
      "provi": 3226,
      "forma": 3227,
      "first_": 3228,
      "s = \"": 3229,
      "queries ": 3230,
      "subsequence of ": 3231,
      "Here's the step-by-step ": 3232,
      "segment ": 3233,
      "O(n) ": 3234,
      "'.join(": 3235,
      "        result = []\r\n": 3236,
      "bisect_": 3237,
      "backtrack": 3238,
      "parenthe": 3239,
      "3rd ": 3240,
      "(DFS": 3241,
      "-2,": 3242,
      "Move ": 3243,
      "calle": 3244,
      "tup": 3245,
      "        current_": 3246,
      "ance ": 3247,
      "plo": 3248,
      "Explanation: We ": 3249,
      "takes ": 3250,
      "taken ": 3251,
      "Counter(": 3252,
      "rectangle ": 3253,
      "amount of ": 3254,
      "modulo 109 + ": 3255,
      "sliding ": 3256,
      "_count = ": 3257,
      "ban": 3258,
      "bri": 3259,
      "y_": 3260,
      "reque": 3261,
      ". A ": 3262,
      "in each ": 3263,
      "number in the ": 3264,
      "lement ": 3265,
      "adding ": 3266,
      "dp(": 3267,
      ". If no ": 3268,
      "The number of nodes in the ": 3269,
      "Here is the ": 3270,
      "11,": 3271,
      "Sw": 3272,
      "ef": 3273,
      "i)\r\n": 3274,
      "s consists of ": 3275,
      ". Each ": 3276,
      "        # Di": 3277,
      "hav": 3278,
      "Time ": 3279,
      "Counter\r\n": 3280,
      "queue.append(": 3281,
      "otherwise.\r\n": 3282,
      "\", and ": 3283,
      "land ": 3284,
      "s[i": 3285,
      "of its ": 3286,
      "ing to the ": 3287,
      "ite ": 3288,
      "ell": 3289,
      "ed, ": 3290,
      "    def minimum": 3291,
      "operations.\r\n": 3292,
      "Return the maximum ": 3293,
      "nums becomes ": 3294,
      "tic ": 3295,
      "they are ": 3296,
      ") % MOD\r\n": 3297,
      "1.": 3298,
      "1's ": 3299,
      "9.\r\n": 3300,
      "; ": 3301,
      "leav": 3302,
      "rank": 3303,
      "elements.\r\n": 3304,
      "distrib": 3305,
      "represents a ": 3306,
      "score of ": 3307,
      "repeat": 3308,
      "Add ": 3309,
      "expression": 3310,
      "15": 3311,
      "tiv": 3312,
      "alph": 3313,
      "Initi": 3314,
      "prov": 3315,
      "apping ": 3316,
      "element in ": 3317,
      "keep track of ": 3318,
      "stones": 3319,
      "used to ": 3320,
      "would be ": 3321,
      "        # Fil": 3322,
      "LC": 3323,
      "b = ": 3324,
      "ist ": 3325,
      "s.length <= ": 3326,
      "ones": 3327,
      "numer": 3328,
      "who ": 3329,
      "x + ": 3330,
      "        # Count the ": 3331,
      "Input: nums = [1,": 3332,
      "person": 3333,
      "from collections import Counter\r\n": 3334,
      "degree ": 3335,
      "\t\r\n": 3336,
      "0 = ": 3337,
      "Leng": 3338,
      "ques": 3339,
      "itself": 3340,
      "of the array ": 3341,
      "need ": 3342,
      "1 <= m, ": 3343,
      "ffer": 3344,
      "list(": 3345,
      "placed ": 3346,
      "Given an integer array ": 3347,
      "Find ": 3348,
      "jump ": 3349,
      "There is no ": 3350,
      "Max": 3351,
      "called ": 3352,
      "le the ": 3353,
      "num\r\n": 3354,
      "1 (": 3355,
      "log ": 3356,
      "* n ": 3357,
      "length\r\n": 3358,
      "Return the minimum ": 3359,
      "\"aaa": 3360,
      "containing ": 3361,
      "greater than the ": 3362,
      "expression ": 3363,
      "palindromic ": 3364,
      "chos": 3365,
      "width ": 3366,
      "false.\r\n": 3367,
      "1` ": 3368,
      "5. **": 3369,
      "go ": 3370,
      "        count = 0\r\n": 3371,
      "s where ": 3372,
      ", or ": 3373,
      "encounter": 3374,
      "robot": 3375,
      "in enumerate(": 3376,
      "                            ": 3377,
      "s, we ": 3378,
      "increas": 3379,
      "`nums` ": 3380,
      "marked ": 3381,
      "Add the ": 3382,
      ".next\r\n": 3383,
      "_map": 3384,
      "pt": 3385,
      "turn": 3386,
      "from": 3387,
      "exclu": 3388,
      "addition": 3389,
      "string\r\n": 3390,
      ".length <= 104\r\n": 3391,
      "adjacency ": 3392,
      "sentence ": 3393,
      "still ": 3394,
      "Result": 3395,
      "(1,": 3396,
      "[3, ": 3397,
      "ai, ": 3398,
      "ho": 3399,
      "rece": 3400,
      "at a ": 3401,
      "is the minimum ": 3402,
      "        for num in ": 3403,
      "            # Update the ": 3404,
      "operation, ": 3405,
      "            return False\r\n": 3406,
      "buc": 3407,
      "list)\r\n": 3408,
      "n - 1, ": 3409,
      "numbered ": 3410,
      "reverse ": 3411,
      "pattern ": 3412,
      "achieve ": 3413,
      "corner ": 3414,
      "10**9 + ": 3415,
      "()": 3416,
      "BST": 3417,
      "`(": 3418,
      "e_": 3419,
      "pea": 3420,
      "ye": 3421,
      "in word": 3422,
      "Input: words = [": 3423,
      "        return count\r\n": 3424,
      "node = ": 3425,
      "price": 3426,
      "student ": 3427,
      "limit ": 3428,
      "fruit": 3429,
      "float('inf')\r\n": 3430,
      "Use a ": 3431,
      ") // 2\r\n": 3432,
      "16": 3433,
      "2):\r\n": 3434,
      "AA": 3435,
      "Follow": 3436,
      "r ": 3437,
      "ward ": 3438,
      "] != ": 3439,
      "quent ": 3440,
      "3,1,": 3441,
      "to the right ": 3442,
      "s of size ": 3443,
      "            # Calculate the ": 3444,
      "tok": 3445,
      "distances ": 3446,
      "_sum = ": 3447,
      "TreeNode:\r\n": 3448,
      "of_": 3449,
      "building": 3450,
      "explore ": 3451,
      "Search ": 3452,
      "1\",\"": 3453,
      "block": 3454,
      "wa": 3455,
      ", then ": 3456,
      "2,4,": 3457,
      "value\r\n": 3458,
      "][n": 3459,
      "left=": 3460,
      "usage": 3461,
      "list\r\n": 3462,
      "interse": 3463,
      "finding the ": 3464,
      "difference between the ": 3465,
      "-1, -1):\r\n": 3466,
      "half": 3467,
      "You are given a 0-indexed integer array ": 3468,
      "cnt": 3469,
      "beginn": 3470,
      "modulo 109 + 7.\r\n": 3471,
      "13": 3472,
      "2] = ": 3473,
      "Python": 3474,
      "base ": 3475,
      "ew": 3476,
      "slo": 3477,
      "teg": 3478,
      "is \"": 3479,
      "road": 3480,
      "and then ": 3481,
      "or more ": 3482,
      "upper ": 3483,
      "prefix sum ": 3484,
      "#         self.right = ": 3485,
      "#         self.left = ": 3486,
      "for a binary tree ": 3487,
      "GC": 3488,
      "bas": 3489,
      "j + ": 3490,
      "s from ": 3491,
      "cha": 3492,
      "and a ": 3493,
      "ator ": 3494,
      "returne": 3495,
      "of the same ": 3496,
      "sum = ": 3497,
      "directly ": 3498,
      "('a": 3499,
      "s[i].length == 2\r\n": 3500,
      "weight ": 3501,
      "worker ": 3502,
      "beaut": 3503,
      "coordinates ": 3504,
      "recursively ": 3505,
      "leaf ": 3506,
      "available ": 3507,
      "Union": 3508,
      "# class TreeNode:\r\n": 3509,
      "# Definition for a binary tree ": 3510,
      "# Definition for a binary tree node.\r\n": 3511,
      "20,": 3512,
      "After the ": 3513,
      "dp ": 3514,
      "lc": 3515,
      "s[i][": 3516,
      "an\r\n": 3517,
      "difi": 3518,
      "in this ": 3519,
      "ols ": 3520,
      "1000": 3521,
      "in the same ": 3522,
      "[0], ": 3523,
      "5,4,": 3524,
      "atest ": 3525,
      "because the ": 3526,
      "sign ": 3527,
      "depth": 3528,
      "half ": 3529,
      "Number": 3530,
      "Quer": 3531,
      "None, right": 3532,
      "sliding window ": 3533,
      "alphab": 3534,
      "left=None, right": 3535,
      "Tot": 3536,
      "| = ": 3537,
      "al_": 3538,
      "num)\r\n": 3539,
      "lever": 3540,
      "que\r\n": 3541,
      "fig": 3542,
      "loop ": 3543,
      "Input: nums1 = [": 3544,
      "ord(": 3545,
      "s, return the ": 3546,
      "mem": 3547,
      "row, ": 3548,
      "cand": 3549,
      "s that are ": 3550,
      "replace ": 3551,
      "#     def __init__(self, val=0, left=None, right": 3552,
      "Note: ": 3553,
      "#         self.right = right\r\n": 3554,
      "#         self.left = left\r\n": 3555,
      "')": 3556,
      "15,": 3557,
      "500\r\n": 3558,
      "ll": 3559,
      "tt": 3560,
      "        self.": 3561,
      "        m, ": 3562,
      "is defin": 3563,
      "under": 3564,
      "making ": 3565,
      "ght": 3566,
      "node\r\n": 3567,
      "owever": 3568,
      "            # If the ": 3569,
      "count += ": 3570,
      "' or ": 3571,
      "can_": 3572,
      "order\r\n": 3573,
      "Given two ": 3574,
      "123": 3575,
      "recursive ": 3576,
      "requirement": 3577,
      "satisfy the ": 3578,
      "building ": 3579,
      "data ": 3580,
      "#     def __init__(self, val=0, left=None, right=None):\r\n": 3581,
      "1]:\r\n": 3582,
      "Col": 3583,
      "gic": 3584,
      "men": 3585,
      ": List[List[int]]) -> int:\r\n": 3586,
      "modifi": 3587,
      "arr ": 3588,
      "index i ": 3589,
      "nums[j": 3590,
      "1,2,3,4,": 3591,
      "[0,1,": 3592,
      "        # Sort the ": 3593,
      ". Finally, it ": 3594,
      "helps in ": 3595,
      "        m, n = len(": 3596,
      "2, and ": 3597,
      "just ": 3598,
      "zz": 3599,
      "ans\r\n": 3600,
      "to its ": 3601,
      "a valid ": 3602,
      "of the ith ": 3603,
      "        # Conver": 3604,
      "next = ": 3605,
      "buy ": 3606,
      "ed by a ": 3607,
      "returned ": 3608,
      "... ": 3609,
      "2],[1,": 3610,
      "difference between ": 3611,
      "chosen ": 3612,
      "10**9 + 7\r\n": 3613,
      "leverag": 3614,
      "?\r\n": 3615,
      "\\text": 3616,
      "        an": 3617,
      "condition ": 3618,
      "necess": 3619,
      "** ": 3620,
      "abo": 3621,
      "i == ": 3622,
      "ilar": 3623,
      "\", k = ": 3624,
      "arr2": 3625,
      "), (0, ": 3626,
      "is a contiguous ": 3627,
      "number.\r\n": 3628,
      "non-negative ": 3629,
      "starting from the ": 3630,
      "                return False\r\n": 3631,
      "`k`": 3632,
      ", return it ": 3633,
      "Alice and ": 3634,
      "pop(": 3635,
      "), (1, ": 3636,
      "unique_": 3637,
      "\" and \"": 3638,
      "thod ": 3639,
      "First ": 3640,
      "\\text{": 3641,
      "_index ": 3642,
      "sort ": 3643,
      "- 1, ": 3644,
      "nums, ": 3645,
      "Output: 7\r\n": 3646,
      "[1,1,": 3647,
      "with the same ": 3648,
      "due ": 3649,
      "domin": 3650,
      "[i - 1][": 3651,
      "interval ": 3652,
      "remainder": 3653,
      "them.\r\n": 3654,
      "defaultdict(list)\r\n": 3655,
      "allows us to ": 3656,
      "et the ": 3657,
      "y\r\n": 3658,
      "ane": 3659,
      "rac": 3660,
      ") * ": 3661,
      "it to the ": 3662,
      "i += 1\r\n": 3663,
      "time, ": 3664,
      "method ": 3665,
      "move": 3666,
      "arr1": 3667,
      "value is ": 3668,
      "nums[j] ": 3669,
      "'s a ": 3670,
      "total cost ": 3671,
      "consists ": 3672,
      "ment the ": 3673,
      "divisor ": 3674,
      "remainder ": 3675,
      "->": 3676,
      "6]\r\n": 3677,
      "7],[": 3678,
      ":\\r\r\n": 3679,
      "However": 3680,
      "once": 3681,
      "seq": 3682,
      "to efficiently ": 3683,
      "] and ": 3684,
      "nums.length\r\n": 3685,
      "10.\r\n": 3686,
      "peri": 3687,
      "sum += ": 3688,
      "left()\r\n": 3689,
      "right:\r\n": 3690,
      "difference": 3691,
      "   - If ": 3692,
      "serv": 3693,
      "push(": 3694,
      "heal": 3695,
      "Binary ": 3696,
      "tuple": 3697,
      "ols import ": 3698,
      "12,": 3699,
      "[node": 3700,
      "`j": 3701,
      "s[0] ": 3702,
      "infin": 3703,
      "= max(max_": 3704,
      "dele": 3705,
      "to the next ": 3706,
      "prices ": 3707,
      "digits.\r\n": 3708,
      "1,1,1,": 3709,
      "Count": 3710,
      "x, n": 3711,
      "finds the ": 3712,
      "checks if the ": 3713,
      "boxes ": 3714,
      "occurrences of each ": 3715,
      "ploye": 3716,
      "Siz": 3717,
      "_of_": 3718,
      "res": 3719,
      "rearrang": 3720,
      "action": 3721,
      "[i] - ": 3722,
      "value.\r\n": 3723,
      "gram ": 3724,
      "sort(": 3725,
      "\"aab": 3726,
      "become ": 3727,
      "BFS ": 3728,
      ".sort()\r\n": 3729,
      "Ke": 3730,
      "ip ": 3731,
      "s**: We ": 3732,
      "xi, ": 3733,
      "{}\r\n": 3734,
      "s to the ": 3735,
      "to make ": 3736,
      " = Solution": 3737,
      "Inde": 3738,
      "[i] is the ": 3739,
      "3 <= ": 3740,
      "current = ": 3741,
      "This solution iterates ": 3742,
      ", it returns `": 3743,
      "large, return it ": 3744,
      "player": 3745,
      "positive integers ": 3746,
      "minimiz": 3747,
      "degree": 3748,
      " = Solution()\r\n": 3749,
      "0)": 3750,
      "3) ": 3751,
      "m):\r\n": 3752,
      "tex": 3753,
      "u, ": 3754,
      "ves ": 3755,
      ": Optional[TreeNode": 3756,
      "# Example ": 3757,
      "Input: num = ": 3758,
      "i != ": 3759,
      "s, it ": 3760,
      "an integer k": 3761,
      "search": 3762,
      "O(1) ": 3763,
      "traversal ": 3764,
      "pick ": 3765,
      "friend": 3766,
      "(self, n: int, ": 3767,
      "usage:\r\n": 3768,
      "# Example usage:\r\n": 3769,
      "Fun": 3770,
      "[1], ": 3771,
      "x_": 3772,
      "ying the ": 3773,
      "pli": 3774,
      ". Otherwise": 3775,
      "at any ": 3776,
      "ture ": 3777,
      "k - ": 3778,
      "all elements ": 3779,
      "add the ": 3780,
      "index = ": 3781,
      "1],[0,": 3782,
      ".length <= 2": 3783,
      "min(min_": 3784,
      "O(n ": 3785,
      "subsequence": 3786,
      ") + (": 3787,
      "shortest path ": 3788,
      "meeting": 3789,
      "iterate through the ": 3790,
      "        dp = [": 3791,
      "..., ": 3792,
      "Prefi": 3793,
      "source ": 3794,
      "that:\r\n": 3795,
      "String": 3796,
      "Two ": 3797,
      "''.join(": 3798,
      "19": 3799,
      "table": 3800,
      "deque\r\n": 3801,
      "s, so ": 3802,
      "counts the ": 3803,
      "first and ": 3804,
      "consider ": 3805,
      "triple": 3806,
      "thresh": 3807,
      "Path": 3808,
      "lambd": 3809,
      "false otherwise.\r\n": 3810,
      "\"]]\r\n": 3811,
      "ose ": 3812,
      "tice ": 3813,
      "round": 3814,
      "seen ": 3815,
      "in descending ": 3816,
      "qual": 3817,
      "                result.append(": 3818,
      " = [0] ": 3819,
      "[i] + ": 3820,
      "This code ": 3821,
      "on a ": 3822,
      "index of the ": 3823,
      "0,0,0,": 3824,
      "        # Initialize ": 3825,
      "repeated ": 3826,
      "balance ": 3827,
      "bottom ": 3828,
      "finish": 3829,
      "friend ": 3830,
      "(x, y": 3831,
      "18": 3832,
      "cros": 3833,
      "ding the ": 3834,
      "jk": 3835,
      "xor": 3836,
      "            graph[": 3837,
      "main ": 3838,
      "ed from ": 3839,
      "nums[i + ": 3840,
      "pot": 3841,
      "for i in range(": 3842,
      "perform the ": 3843,
      "        return True\r\n": 3844,
      "any two ": 3845,
      "3 is ": 3846,
      "value in the ": 3847,
      "), where ": 3848,
      "positions ": 3849,
      ". If there are ": 3850,
      "distances": 3851,
      "root.": 3852,
      "Calculate ": 3853,
      "piec": 3854,
      "node.left": 3855,
      "arith": 3856,
      ". So ": 3857,
      "2D array ": 3858,
      "occurs ": 3859,
      "#\",\"": 3860,
      "14": 3861,
      "year": 3862,
      "ti ": 3863,
      "map ": 3864,
      "an un": 3865,
      "that are ": 3866,
      "whose ": 3867,
      "ed\r\n": 3868,
      "compres": 3869,
      "Remove the ": 3870,
      "such a ": 3871,
      "Given an array of ": 3872,
      "\"abcd": 3873,
      "key=": 3874,
      "1 <= n <= 105\r\n": 3875,
      "None\r\n": 3876,
      "bottom-": 3877,
      "represent the ": 3878,
      "Let's ": 3879,
      "5].\r\n": 3880,
      "x < ": 3881,
      "3,5,": 3882,
      "paint": 3883,
      "time.\r\n": 3884,
      "s: List[List[int]]) -> int:\r\n": 3885,
      "root: Optional[TreeNode": 3886,
      "bitmask ": 3887,
      "ensures that the ": 3888,
      "3],[2,": 3889,
      "Subarray": 3890,
      "even_": 3891,
      "changes ": 3892,
      "full ": 3893,
      "respectively.\r\n": 3894,
      "messa": 3895,
      "memoization ": 3896,
      "(2,": 3897,
      "22": 3898,
      "sta": 3899,
      "of `": 3900,
      "colo": 3901,
      "a = ": 3902,
      "math": 3903,
      "char ": 3904,
      "Recursi": 3905,
      "have to ": 3906,
      "characters.\r\n": 3907,
      "subarray is ": 3908,
      "size of the ": 3909,
      "Return true if ": 3910,
      "MOD = ": 3911,
      "suffix ": 3912,
      "missing ": 3913,
      "consists only of ": 3914,
      "(num": 3915,
      ")] ": 3916,
      "Try ": 3917,
      "ake ": 3918,
      "br": 3919,
      "clock": 3920,
      "fa": 3921,
      "- 1\r\n": 3922,
      "ect ": 3923,
      "1 <= word": 3924,
      "ctionary ": 3925,
      "trail": 3926,
      "tree, ": 3927,
      "direction ": 3928,
      "remove the ": 3929,
      "floor": 3930,
      "runn": 3931,
      "children ": 3932,
      "from 0 to n - ": 3933,
      "10^9 + ": 3934,
      "returned.\r\n": 3935,
      "large, return it modulo 109 + 7.\r\n": 3936,
      "MOD = 10**9 + 7\r\n": 3937,
      ":  # ": 3938,
      "Base ": 3939,
      "cut": 3940,
      "nan\r\n": 3941,
      "s1": 3942,
      "enco": 3943,
      "ply ": 3944,
      "ation.\r\n": 3945,
      "modu": 3946,
      "from `": 3947,
      "1, 2, ": 3948,
      "                    break\r\n": 3949,
      "right, ": 3950,
      "employe": 3951,
      "cities ": 3952,
      "' to ": 3953,
      "0 <= i < ": 3954,
      "left to ": 3955,
      "island": 3956,
      "total of ": 3957,
      "remaining_": 3958,
      "computes the ": 3959,
      ": int) -> bool:\r\n": 3960,
      "Point": 3961,
      "minutes ": 3962,
      "extra ": 3963,
      "ough ": 3964,
      "'c": 3965,
      "', and ": 3966,
      "0].\r\n": 3967,
      "33": 3968,
      "[n": 3969,
      "stre": 3970,
      "] > ": 3971,
      "dist ": 3972,
      ") or ": 3973,
      "x and ": 3974,
      "[i] = [": 3975,
      "with an ": 3976,
      "array, ": 3977,
      "solution is ": 3978,
      "moves": 3979,
      "nums[2] ": 3980,
      "There is a ": 3981,
      "take the ": 3982,
      "cycle ": 3983,
      "depth-first search ": 3984,
      "defines a ": 3985,
      "excep": 3986,
      "diagonal": 3987,
      ".pop()\r\n": 3988,
      "balanced ": 3989,
      "stamp": 3990,
      "        # Dictionary ": 3991,
      "cri": 3992,
      "est": 3993,
      "hour ": 3994,
      "tu": 3995,
      "ust": 3996,
      ", (": 3997,
      "ority ": 3998,
      ": List[List[int]]": 3999,
      "] indicates ": 4000,
      "among ": 4001,
      "an m x n ": 4002,
      "1 -> ": 4003,
      "nums[i": 4004,
      "0 (": 4005,
      "with value ": 4006,
      "node's ": 4007,
      "s, where ": 4008,
      "elements\r\n": 4009,
      "You are given an array ": 4010,
      "are: ": 4011,
      "deriv": 4012,
      "convert ": 4013,
      "For example, if ": 4014,
      "pass": 4015,
      "heapq.heappush(": 4016,
      "region": 4017,
      "money ": 4018,
      "Sum ": 4019,
      "[1]": 4020,
      "]. ": 4021,
      "]. The ": 4022,
      "        result = ": 4023,
      "chni": 4024,
      "<= nums[i] ": 4025,
      "1 * ": 4026,
      "1 < ": 4027,
      "start = ": 4028,
      "will be the ": 4029,
      "5 * 104\r\n": 4030,
      "answer may be ": 4031,
      "root of a ": 4032,
      "exists ": 4033,
      "It can be prov": 4034,
      "based on ": 4035,
      "team ": 4036,
      "Here's the implementation of the ": 4037,
      "energy ": 4038,
      "a\"\r\n": 4039,
      "bar": 4040,
      "flow": 4041,
      "gard": 4042,
      "r, ": 4043,
      "v in ": 4044,
      "xy": 4045,
      "t is ": 4046,
      "old ": 4047,
      "streng": 4048,
      "are unique.\r\n": 4049,
      "subset ": 4050,
      "Explanation:": 4051,
      "with_": 4052,
      "s[j] ": 4053,
      "current_sum": 4054,
      ", it means ": 4055,
      "union": 4056,
      "true": 4057,
      "                return 0\r\n": 4058,
      "distance between ": 4059,
      "`nums2": 4060,
      "0-indexed": 4061,
      "struction": 4062,
      "In this ": 4063,
      "integer.\r\n": 4064,
      "linked list ": 4065,
      "solve the problem": 4066,
      "Follow ": 4067,
      "(1": 4068,
      "Every ": 4069,
      "Me": 4070,
      "dx, ": 4071,
      "eled ": 4072,
      "winn": 4073,
      "        MOD = 10**9 + 7\r\n": 4074,
      "] < ": 4075,
      "unit": 4076,
      "made ": 4077,
      "suit": 4078,
      "an edge ": 4079,
      "nums1 and ": 4080,
      "string `s": 4081,
      "    def maximum": 4082,
      "sorting ": 4083,
      "node is ": 4084,
      "result.\r\n": 4085,
      "second_": 4086,
      "sol = Solution()\r\n": 4087,
      "Input: n = 3, ": 4088,
      ": List[int]) -> List[int]:\r\n": 4089,
      "handle": 4090,
      "swap ": 4091,
      "solve the problem ": 4092,
      "decim": 4093,
      "[2] ": 4094,
      "ee": 4095,
      "four": 4096,
      "n)]\r\n": 4097,
      "restri": 4098,
      "stop": 4099,
      "y in ": 4100,
      "play ": 4101,
      "at indices ": 4102,
      "plant": 4103,
      "vertic": 4104,
      "[1,0,": 4105,
      "s: List[int]": 4106,
      "return\r\n": 4107,
      "pix": 4108,
      "determine ": 4109,
      "choose the ": 4110,
      "integers.\r\n": 4111,
      "appear ": 4112,
      "entif": 4113,
      "coins ": 4114,
      ". Then": 4115,
      "ip(": 4116,
      "labeled ": 4117,
      "initially ": 4118,
      "        for num in nums:\r\n": 4119,
      "3 - ": 4120,
      "`num": 4121,
      "`. This ": 4122,
      "evalu": 4123,
      "kth ": 4124,
      "s.length <= 105\r\n": 4125,
      "then the ": 4126,
      "once.\r\n": 4127,
      "ans ": 4128,
      "            total_": 4129,
      "rat": 4130,
      "] * ": 4131,
      "k is ": 4132,
      "apple": 4133,
      "index\r\n": 4134,
      "grid.\r\n": 4135,
      "0 <= n": 4136,
      "Output: [\"": 4137,
      "iterating ": 4138,
      "contains the ": 4139,
      "at most one ": 4140,
      "mark": 4141,
      "tively ": 4142,
      "traversal": 4143,
      "select ": 4144,
      "delete ": 4145,
      "course": 4146,
      "Hence, the ": 4147,
      "potenti": 4148,
      "10^9 + 7": 4149,
      "Follow up": 4150,
      "\"\"\r\n": 4151,
      "//": 4152,
      "7], ": 4153,
      "8]\r\n": 4154,
      ":i": 4155,
      "rin": 4156,
      "ron": 4157,
      "s ": 4158,
      "ug": 4159,
      "wall": 4160,
      ": The ": 4161,
      "of these ": 4162,
      "best ": 4163,
      "so that ": 4164,
      "match ": 4165,
      "calculation": 4166,
      "4 and ": 4167,
      "numbers.\r\n": 4168,
      "ther the ": 4169,
      "updates the ": 4170,
      "[i - 1] ": 4171,
      ": str) -> int:\r\n": 4172,
      "traverse the ": 4173,
      "The number of nodes in the tree is ": 4174,
      "lambda ": 4175,
      "\" + ": 4176,
      "), and ": 4177,
      "6],[": 4178,
      "B ": 4179,
      "Min": 4180,
      "\\).\r\n": 4181,
      "_count ": 4182,
      "`max_": 4183,
      "zip(": 4184,
      "end the ": 4185,
      "ing, ": 4186,
      "# sol = Solution()\r\n": 4187,
      "loop": 4188,
      "need": 4189,
      "it to ": 4190,
      "visi": 4191,
      "\" (": 4192,
      "length, ": 4193,
      "nums[1] ": 4194,
      "s: List[int], ": 4195,
      "numberOf": 4196,
      "itera": 4197,
      "1],[2,": 4198,
      "days ": 4199,
      "1 + 1 + ": 4200,
      "n == grid": 4201,
      "3,4],[": 4202,
      "[i][j] = ": 4203,
      "allowed to ": 4204,
      "2 <= n ": 4205,
      "amount": 4206,
      "course ": 4207,
      "stick": 4208,
      "separat": 4209,
      "helper function `": 4210,
      "token": 4211,
      "depth-first search (DFS": 4212,
      "X\",\"": 4213,
      "ties": 4214,
      "state": 4215,
      "roll": 4216,
      "des ": 4217,
      "            min_": 4218,
      "min-": 4219,
      "cture": 4220,
      ". The idea is to ": 4221,
      "index, ": 4222,
      "7,8,": 4223,
      "Here's a ": 4224,
      "dictionary": 4225,
      "left, right = ": 4226,
      "output ": 4227,
      "queue:\r\n": 4228,
      "denotes the ": 4229,
      "median ": 4230,
      "alice": 4231,
      "request": 4232,
      "handles the ": 4233,
      "-2": 4234,
      "By ": 4235,
      "a\",\"": 4236,
      "c in ": 4237,
      "is:\r\n": 4238,
      "try ": 4239,
      "us, ": 4240,
      "| + ": 4241,
      "umm": 4242,
      "es are ": 4243,
      "ed the ": 4244,
      "ed in the ": 4245,
      "sorts the ": 4246,
      "characters in ": 4247,
      "with the maximum ": 4248,
      "order of the ": 4249,
      "queue.": 4250,
      "verse the ": 4251,
      "black ": 4252,
      "connected component": 4253,
      "according": 4254,
      "alternating ": 4255,
      "Here's the step-by-step approach:\r\n": 4256,
      "-th ": 4257,
      "8.\r\n": 4258,
      "Ap": 4259,
      "Case": 4260,
      "`left": 4261,
      "her": 4262,
      "  ": 4263,
      "en that ": 4264,
      "0 is ": 4265,
      "she ": 4266,
      "boo": 4267,
      "ight": 4268,
      "ket ": 4269,
      "s: List[List[int]], ": 4270,
      "formul": 4271,
      "into two ": 4272,
      "List[List[int]]:\r\n": 4273,
      "because it ": 4274,
      "[j]": 4275,
      "Input: arr = ": 4276,
      "item ": 4277,
      "Alice and Bob ": 4278,
      "B\",\"": 4279,
      "cli": 4280,
      "dumm": 4281,
      "there": 4282,
      "inver": 4283,
      "rel": 4284,
      "st, ": 4285,
      "and its ": 4286,
      "ation**: ": 4287,
      "ed in ": 4288,
      "sub-": 4289,
      "2 to ": 4290,
      "Remove ": 4291,
      "    def is": 4292,
      "        return ans\r\n": 4293,
      ". If a ": 4294,
      "Input: nums = [2,": 4295,
      "ation is ": 4296,
      "greatest ": 4297,
      "character in ": 4298,
      "5 and ": 4299,
      "Notice ": 4300,
      "aga": 4301,
      "score is ": 4302,
      "find(": 4303,
      "s(self, n": 4304,
      "techni": 4305,
      "updating the ": 4306,
      "stack.append(": 4307,
      "in the range [0, ": 4308,
      "handle ": 4309,
      ": int) -> List[int]:\r\n": 4310,
      "coordinate ": 4311,
      "defaultdict(int": 4312,
      "few": 4313,
      "satisfies the ": 4314,
      "This approach ensures that we efficiently ": 4315,
      "minimum cost to ": 4316,
      "Length": 4317,
      "colored ": 4318,
      "4. ": 4319,
      "Pri": 4320,
      "agram ": 4321,
      "j\r\n": 4322,
      "m\r\n": 4323,
      "sen": 4324,
      "th the ": 4325,
      "] -= 1\r\n": 4326,
      "quic": 4327,
      "easi": 4328,
      "array and ": 4329,
      "compar": 4330,
      "cto": 4331,
      "shap": 4332,
      "being ": 4333,
      "You are given an array of ": 4334,
      "functo": 4335,
      "There are no ": 4336,
      "stack[-1": 4337,
      "-bit ": 4338,
      "circul": 4339,
      "destination": 4340,
      "basket": 4341,
      "Total ": 4342,
      "key=lambda ": 4343,
      "(0,": 4344,
      "-1:\r\n": 4345,
      ".com": 4346,
      "1\"\r\n": 4347,
      "Div": 4348,
      "On ": 4349,
      "i.\r\n": 4350,
      "know": 4351,
      "off": 4352,
      "pq": 4353,
      "tow": 4354,
      "in nums": 4355,
      "ed at ": 4356,
      "[i] == ": 4357,
      "bob": 4358,
      "counts ": 4359,
      "words[i] ": 4360,
      "(self, root: Optional[TreeNode": 4361,
      "element\r\n": 4362,
      "string, ": 4363,
      "5,5,": 4364,
      "points.\r\n": 4365,
      "represents ": 4366,
      "actu": 4367,
      "order of ": 4368,
      "server ": 4369,
      "head = [": 4370,
      "tive_": 4371,
      "heapq.heappop(": 4372,
      "        # Fill the ": 4373,
      "log n": 4374,
      "deletion": 4375,
      "1).\r\n": 4376,
      "Element": 4377,
      "done ": 4378,
      "ies": 4379,
      "col ": 4380,
      "1, 1, ": 4381,
      "like ": 4382,
      "1 <= k ": 4383,
      "This solution iterates through the ": 4384,
      "build ": 4385,
      "right - ": 4386,
      "ded by ": 4387,
      "target.\r\n": 4388,
      "for the current ": 4389,
      "processing ": 4390,
      "In one ": 4391,
      ", return the number of ": 4392,
      "This solution works as follows:\r\n": 4393,
      "fruit ": 4394,
      "0 or 1.\r\n": 4395,
      "those ": 4396,
      "space complex": 4397,
      "Sorted": 4398,
      "guaranteed ": 4399,
      "added to the ": 4400,
      "[i-1][": 4401,
      "| + |": 4402,
      "\")\r\n": 4403,
      "(1 << ": 4404,
      "[neighbor": 4405,
      "_id": 4406,
      "nor": 4407,
      "sort the ": 4408,
      "ves": 4409,
      "xx": 4410,
      "x: ": 4411,
      "ange": 4412,
      "endi": 4413,
      "if it is ": 4414,
      "exist ": 4415,
      "value, ": 4416,
      "If we ": 4417,
      "two integers ": 4418,
      "so far": 4419,
      "s[1] ": 4420,
      "has an ": 4421,
      "have been ": 4422,
      "Input: nums = [4,": 4423,
      "and\r\n": 4424,
      "Differ": 4425,
      "greater than or equal to ": 4426,
      "mid = (": 4427,
      "Value": 4428,
      "ensuring that ": 4429,
      "* (n + 1)\r\n": 4430,
      "Initially, ": 4431,
      "trailing ": 4432,
      "nums1 and nums": 4433,
      "0] = ": 4434,
      "45": 4435,
      "`) ": 4436,
      "sam": 4437,
      "stea": 4438,
      "le.\r\n": 4439,
      "or equal to the ": 4440,
      "acce": 4441,
      " = \"": 4442,
      "[i] <= ": 4443,
      "format": 4444,
      "s = [[0,": 4445,
      "node:\r\n": 4446,
      "ill ": 4447,
      ", we return the ": 4448,
      "represented as ": 4449,
      "Given an integer ": 4450,
      "word = ": 4451,
      "cost\r\n": 4452,
      "avor": 4453,
      "` to `": 4454,
      "spaces ": 4455,
      "values(": 4456,
      "transaction": 4457,
      "time complexity is ": 4458,
      "power of ": 4459,
      "people": 4460,
      "edges = [[0,": 4461,
      "speed ": 4462,
      "Here is the implement": 4463,
      "GCD ": 4464,
      "Here's a step-by-step ": 4465,
      "13,": 4466,
      "1  # ": 4467,
      "BB": 4468,
      "t = [": 4469,
      "= 1\r\n": 4470,
      "= deque": 4471,
      "ord ": 4472,
      "ory ": 4473,
      "lect ": 4474,
      "            self.": 4475,
      "or not ": 4476,
      "an adjacency ": 4477,
      "ity.\r\n": 4478,
      "str(": 4479,
      "each": 4480,
      "x - ": 4481,
      "vertical ": 4482,
      "with cost ": 4483,
      "time\r\n": 4484,
      "which is the ": 4485,
      "character\r\n": 4486,
      "binary string ": 4487,
      "min_heap": 4488,
      "        def is_": 4489,
      "s(self, s: str": 4490,
      "paths ": 4491,
      "0],[0,": 4492,
      "considering ": 4493,
      ". Since ": 4494,
      "goal": 4495,
      "accumul": 4496,
      "describ": 4497,
      "ected ": 4498,
      "overlapping ": 4499,
      "(self, s: str, ": 4500,
      "-3,": 4501,
      "As ": 4502,
      "Hel": 4503,
      "l, ": 4504,
      "s)": 4505,
      "a new ": 4506,
      "] is ": 4507,
      "in graph[": 4508,
      "at time ": 4509,
      "m and ": 4510,
      "2 (": 4511,
      "\",\"c": 4512,
      "view": 4513,
      "(self, grid": 4514,
      "sum.\r\n": 4515,
      "so the ": 4516,
      "sequences ": 4517,
      "Output: [0,": 4518,
      "direct": 4519,
      "pile ": 4520,
      "mid\r\n": 4521,
      "correctly ": 4522,
      "Return an array ": 4523,
      "candies": 4524,
      "do the ": 4525,
      "until the ": 4526,
      "dictionary to ": 4527,
      "top-": 4528,
      "redund": 4529,
      "additional ": 4530,
      "explore all possible ": 4531,
      "due to the ": 4532,
      "26": 4533,
      "[u": 4534,
      "ak": 4535,
      "a\", ": 4536,
      "fl": 4537,
      "The input ": 4538,
      "plan:\r\n": 4539,
      "        # If the ": 4540,
      "before": 4541,
      "colli": 4542,
      "pointers ": 4543,
      "ement ": 4544,
      "is a valid ": 4545,
      "Output: []\r\n": 4546,
      "target:\r\n": 4547,
      "order traversal ": 4548,
      "find_": 4549,
      "frequency": 4550,
      "3,4], ": 4551,
      "3],[1,": 4552,
      ", so the ": 4553,
      "partition ": 4554,
      "over all possible ": 4555,
      "product of ": 4556,
      "maximiz": 4557,
      "        # Sort ": 4558,
      "shift ": 4559,
      "overlap": 4560,
      "image ": 4561,
      "blue ": 4562,
      "beauty ": 4563,
      "jkstra": 4564,
      "defaultdict(int)\r\n": 4565,
      "redundant ": 4566,
      "1])\r\n": 4567,
      "3)": 4568,
      "5 = ": 4569,
      "[0,0,": 4570,
      "`)": 4571,
      "bel": 4572,
      "brac": 4573,
      "were ": 4574,
      "water": 4575,
      "th, ": 4576,
      "        else:\r\n": 4577,
      "er.\r\n": 4578,
      "rela": 4579,
      "secre": 4580,
      "and only ": 4581,
      "1 if ": 4582,
      "Output: 10\r\n": 4583,
      "pref": 4584,
      "Explanation: One ": 4585,
      "][y": 4586,
      "        return False\r\n": 4587,
      "integer arrays ": 4588,
      "any other ": 4589,
      "you will ": 4590,
      "is: ": 4591,
      "letters ": 4592,
      "Node ": 4593,
      "players ": 4594,
      "popleft()\r\n": 4595,
      "Substring": 4596,
      "merg": 4597,
      "' and '": 4598,
      "available": 4599,
      "`x` ": 4600,
      "This solution works by first ": 4601,
      "generated such that ": 4602,
      "ong the ": 4603,
      "inclusive": 4604,
      "equival": 4605,
      "suitable ": 4606,
      "queue.popleft()\r\n": 4607,
      "0) ": 4608,
      "3, and ": 4609,
      "ID": 4610,
      "So ": 4611,
      "c = ": 4612,
      "nes": 4613,
      "te ": 4614,
      "road ": 4615,
      ". You are also given ": 4616,
      "ity, ": 4617,
      "10],[": 4618,
      "ase the ": 4619,
      ". The key ": 4620,
      "counter ": 4621,
      "sum_": 4622,
      "-1]": 4623,
      "start_": 4624,
      "This solution first ": 4625,
      "you are ": 4626,
      "[i]:\r\n": 4627,
      "element of ": 4628,
      "ed to be ": 4629,
      "differences ": 4630,
      "stack = ": 4631,
      "trib": 4632,
      "Input: n = 5, ": 4633,
      "[1, 2, ": 4634,
      "For example, the ": 4635,
      "flipp": 4636,
      "items(": 4637,
      "obtain ": 4638,
      "minutes": 4639,
      "merge": 4640,
      "Input: arr = [": 4641,
      "round ": 4642,
      "mountain ": 4643,
      "backtrack(": 4644,
      "1 <= m, n <= ": 4645,
      "modified ": 4646,
      "0th ": 4647,
      "Pl": 4648,
      "`target": 4649,
      "mb": 4650,
      "pass ": 4651,
      "son": 4652,
      "v ": 4653,
      "            dp": 4654,
      "where": 4655,
      "each other": 4656,
      "not be ": 4657,
      "implement ": 4658,
      "ers of ": 4659,
      "is the sum of the ": 4660,
      "s and the ": 4661,
      "list and ": 4662,
      "list, ": 4663,
      "1,1,1,1,": 4664,
      "linear": 4665,
      "groups ": 4666,
      "is not a ": 4667,
      "flip ": 4668,
      "contains only ": 4669,
      "factor ": 4670,
      ") for _ in range(": 4671,
      "component ": 4672,
      "queue = deque": 4673,
      "deleting ": 4674,
      "possible.\r\n": 4675,
      "Comp": 4676,
      "Buil": 4677,
      "block ": 4678,
      "arithme": 4679,
      "(3, ": 4680,
      "4]]\r\n": 4681,
      "Gra": 4682,
      "Now": 4683,
      "[k": 4684,
      "gam": 4685,
      "name ": 4686,
      "ored ": 4687,
      "arrange": 4688,
      "ory": 4689,
      "is found": 4690,
      "maz": 4691,
      "sition": 4692,
      "1 or ": 4693,
      "if they ": 4694,
      "k + 1": 4695,
      "subtree": 4696,
      "node):\r\n": 4697,
      "nodes are ": 4698,
      "possibly ": 4699,
      "up the ": 4700,
      "index.\r\n": 4701,
      "from the `": 4702,
      "left + ": 4703,
      "list is ": 4704,
      "A subarray ": 4705,
      "s[i] == ": 4706,
      "frequent ": 4707,
      "removed ": 4708,
      "following condition": 4709,
      "minimum number of operations ": 4710,
      "special": 4711,
      "Both ": 4712,
      "receiv": 4713,
      "relative ": 4714,
      "24": 4715,
      "As": 4716,
      "dd": 4717,
      "flower": 4718,
      "s for each ": 4719,
      "= max(": 4720,
      "enem": 4721,
      "aliz": 4722,
      ". After ": 4723,
      "atch": 4724,
      "mail": 4725,
      "                elif ": 4726,
      "Input: head = [": 4727,
      "k == ": 4728,
      "from functo": 4729,
      "2 * 10": 4730,
      "import heapq": 4731,
      "\" are ": 4732,
      "create a ": 4733,
      "left += 1\r\n": 4734,
      "efficiently": 4735,
      "substring of ": 4736,
      "Alice": 4737,
      "frequenci": 4738,
      "update ": 4739,
      "up to the ": 4740,
      "struc": 4741,
      "10,10,": 4742,
      "dp[n": 4743,
      "it is possible to ": 4744,
      "frequency of ": 4745,
      "permutation ": 4746,
      "happines": 4747,
      "uppercase ": 4748,
      "question": 4749,
      "Build the ": 4750,
      "from functools import ": 4751,
      "import heapq\r\n": 4752,
      "5]]\r\n": 4753,
      "Cour": 4754,
      "Row": 4755,
      "]))  # ": 4756,
      "eff": 4757,
      "k):\r\n": 4758,
      "s).\r\n": 4759,
      "since the ": 4760,
      "ve.\r\n": 4761,
      "encode": 4762,
      "stoc": 4763,
      "devi": 4764,
      ". You can ": 4765,
      "a and ": 4766,
      ") / ": 4767,
      "post": 4768,
      "ord('a": 4769,
      "x is ": 4770,
      "modif": 4771,
      "i + 1": 4772,
      "s = [\"": 4773,
      ". The function ": 4774,
      "present": 4775,
      "append ": 4776,
      "3 * ": 4777,
      "5,2,": 4778,
      "can't ": 4779,
      "Return the maximum number of ": 4780,
      "calculated ": 4781,
      "an integer k.\r\n": 4782,
      "values of the ": 4783,
      "formed by ": 4784,
      "Alice can ": 4785,
      ", we can use ": 4786,
      "\\(10^9 + 7": 4787,
      "visited.add(": 4788,
      "List[str], ": 4789,
      "maintain a ": 4790,
      "Optional[ListNode": 4791,
      "lexicographically smallest ": 4792,
      "source": 4793,
      "Here's the implementation:\r\n": 4794,
      "horizontal ": 4795,
      "However, ": 4796,
      "key=lambda x: ": 4797,
      "(BFS": 4798,
      "0: ": 4799,
      "7 + ": 4800,
      "9]\r\n": 4801,
      "Fri": 4802,
      "Score": 4803,
      "`s` ": 4804,
      "dro": 4805,
      "foo": 4806,
      "hatt": 4807,
      "py": 4808,
      "x-": 4809,
      "ses the ": 4810,
      "n + 1": 4811,
      "oub": 4812,
      "Output: 3": 4813,
      "loo": 4814,
      "ular ": 4815,
      "book": 4816,
      "to the left ": 4817,
      "element.\r\n": 4818,
      "        return total_": 4819,
      "is the length of the ": 4820,
      "points": 4821,
      "node in the ": 4822,
      "work ": 4823,
      "            return True\r\n": 4824,
      "k = 1\r\n": 4825,
      "function": 4826,
      "divide ": 4827,
      "true.\r\n": 4828,
      "`nums1": 4829,
      "] == 0:\r\n": 4830,
      "[1][": 4831,
      "swaps ": 4832,
      "keeping ": 4833,
      "modulo \\(10^9 + 7": 4834,
      "skill": 4835,
      "len(nums)):\r\n": 4836,
      "capacity ": 4837,
      "from_": 4838,
      "gical ": 4839,
      "bottom-right ": 4840,
      "It can be proven that ": 4841,
      "11 ": 4842,
      "15\r\n": 4843,
      "6 = ": 4844,
      "c, ": 4845,
      "e-": 4846,
      "        @": 4847,
      "enough ": 4848,
      "is even": 4849,
      "rid": 4850,
      "ed with ": 4851,
      "ed as the ": 4852,
      "                while ": 4853,
      "val)\r\n": 4854,
      "ash": 4855,
      "in the array ": 4856,
      "Explanation: You can ": 4857,
      "both the ": 4858,
      "                    queue.append(": 4859,
      "words, ": 4860,
      "travel ": 4861,
      "**: This ": 4862,
      "equation": 4863,
      "[i]` ": 4864,
      "current_sum ": 4865,
      "event ": 4866,
      "You are given an integer ": 4867,
      "Input: n = 4, ": 4868,
      "longest": 4869,
      "ensure ": 4870,
      "minimize the ": 4871,
      "Determin": 4872,
      "repeating ": 4873,
      "equals ": 4874,
      "True)\r\n": 4875,
      "obstacle": 4876,
      "This solution uses dynamic programming to ": 4877,
      "shows the ": 4878,
      ". If no such ": 4879,
      "] indicates that ": 4880,
      ".is": 4881,
      "cup": 4882,
      "da": 4883,
      "ly, ": 4884,
      "q ": 4885,
      "} ": 4886,
      "input": 4887,
      "remo": 4888,
      "station": 4889,
      "unction ": 4890,
      "[i].\r\n": 4891,
      "of the two ": 4892,
      "2 are ": 4893,
      "verte": 4894,
      "below": 4895,
      "toge": 4896,
      "pointer": 4897,
      "list to ": 4898,
      "Output: [2,": 4899,
      "1,2,3,": 4900,
      "earli": 4901,
      "does": 4902,
      "   - For each ": 4903,
      "sum of all ": 4904,
      "_count\r\n": 4905,
      ". This is ": 4906,
      "1]], ": 4907,
      "less than the ": 4908,
      "determine if ": 4909,
      "        while left ": 4910,
      "s` function ": 4911,
      "matches ": 4912,
      "1 <= nums.length <= ": 4913,
      ", so we return ": 4914,
      "from collections import deque\r\n": 4915,
      "break": 4916,
      "maximize the ": 4917,
      "        # Function ": 4918,
      "bitwise AND ": 4919,
      "ously ": 4920,
      "in any order.\r\n": 4921,
      "depth-first search (DFS) ": 4922,
      "Ty": 4923,
      "piv": 4924,
      "same": 4925,
      "= 2\r\n": 4926,
      "alC": 4927,
      "radi": 4928,
      "                min_": 4929,
      "                continue\r\n": 4930,
      "max ": 4931,
      "Output: 8\r\n": 4932,
      "k and ": 4933,
      "k in range(": 4934,
      "in the `": 4935,
      "number of valid ": 4936,
      "                    max_": 4937,
      "element, ": 4938,
      "len(word": 4939,
      "within a ": 4940,
      "on day ": 4941,
      "operations to ": 4942,
      "[i])\r\n": 4943,
      "elements are ": 4944,
      "A and ": 4945,
      "smallest": 4946,
      "start and ": 4947,
      "There are n ": 4948,
      "reachable ": 4949,
      "find a ": 4950,
      "            for j in range(n):\r\n": 4951,
      "split the ": 4952,
      "task is to ": 4953,
      "bitwise OR ": 4954,
      "                    return False\r\n": 4955,
      "occurrence of ": 4956,
      "s(self, nums: List[int]) -> int:\r\n": 4957,
      "Follow up: ": 4958,
      "'A": 4959,
      ".e. ": 4960,
      "4: ": 4961,
      "Dec": 4962,
      "Gener": 4963,
      "On the ": 4964,
      " \\r\r\n": 4965,
      "        left, right = ": 4966,
      "ing\r\n": 4967,
      "Therefore": 4968,
      "ation\r\n": 4969,
      ") <= ": 4970,
      "Indi": 4971,
      "val, ": 4972,
      "assum": 4973,
      "Output: 9\r\n": 4974,
      "in the first ": 4975,
      "ability ": 4976,
      "0 - ": 4977,
      ". The solution ": 4978,
      "tag": 4979,
      "t = \"": 4980,
      "            # Add the ": 4981,
      "length.\r\n": 4982,
      "where `": 4983,
      "s to be ": 4984,
      "characters in the ": 4985,
      "with the current ": 4986,
      "        for i in range(len(": 4987,
      "processed ": 4988,
      ", return -1.\r\n": 4989,
      "higher ": 4990,
      "houses ": 4991,
      "considering the ": 4992,
      "check if the ": 4993,
      "categ": 4994,
      ". Therefore": 4995,
      "None:\r\n": 4996,
      "amount ": 4997,
      "performing ": 4998,
      "circle": 4999,
      "th-First ": 5000,
      "insert": 5001,
      "Secon": 5002,
      "according to the ": 5003,
      "node.right)\r\n": 5004,
      "        # Count the frequency of each ": 5005,
      ")  # ": 5006,
      "66": 5007,
      "6 + ": 5008,
      "= ": 5009,
      "car ": 5010,
      "nea": 5011,
      "r = ": 5012,
      "        nums": 5013,
      "n // ": 5014,
      "+ nums[": 5015,
      "10]\r\n": 5016,
      "array of ": 5017,
      "we cannot ": 5018,
      "Explanation: In this ": 5019,
      "nodes.\r\n": 5020,
      "You may ": 5021,
      "sum\r\n": 5022,
      "is the same ": 5023,
      "        for char in ": 5024,
      "row\r\n": 5025,
      "' is ": 5026,
      "k = 3\r\n": 5027,
      "4 <= ": 5028,
      "s: List[str]": 5029,
      "2 = \"": 5030,
      "longer ": 5031,
      "edges:\r\n": 5032,
      "0],[0,0,": 5033,
      "Only ": 5034,
      "select": 5035,
      "get_": 5036,
      "indicating ": 5037,
      "Given the constraint": 5038,
      "destination ": 5039,
      "dp[i][j] = ": 5040,
      "provided ": 5041,
      "\", and \"": 5042,
      "running ": 5043,
      "decimal ": 5044,
      "iteratively ": 5045,
      "accept": 5046,
      "redundant calculation": 5047,
      "'z": 5048,
      "(n - ": 5049,
      "-2, ": 5050,
      "1. The ": 5051,
      "Lef": 5052,
      "[char": 5053,
      "[4, ": 5054,
      "ax": 5055,
      "dol": 5056,
      "t.\r\n": 5057,
      "stop ": 5058,
      "ing:\r\n": 5059,
      ") > ": 5060,
      "nums[i]\r\n": 5061,
      "look": 5062,
      "we are ": 5063,
      "perform a ": 5064,
      "values.\r\n": 5065,
      "4,2,": 5066,
      "operations:\r\n": 5067,
      "head\r\n": 5068,
      "such that:\r\n": 5069,
      "                # If ": 5070,
      "pie": 5071,
      "                return True\r\n": 5072,
      ". We can ": 5073,
      "s.sort()\r\n": 5074,
      "equal.\r\n": 5075,
      "above approach:\r\n": 5076,
      "reverse=": 5077,
      "len(nums) - ": 5078,
      "* n for _ in range(": 5079,
      "pixel": 5080,
      "th-First Search ": 5081,
      "'ll ": 5082,
      "(0-indexed": 5083,
      "Be": 5084,
      "II": 5085,
      "Now ": 5086,
      "[6,": 5087,
      "`).\r\n": 5088,
      "ck ": 5089,
      "don": 5090,
      "oper": 5091,
      "pen": 5092,
      "s**: For each ": 5093,
      "tane": 5094,
      "ware": 5095,
      "        graph": 5096,
      "insi": 5097,
      "stored ": 5098,
      "to avoid ": 5099,
      "plit ": 5100,
      "            mid = (": 5101,
      "                        if ": 5102,
      "The first ": 5103,
      "we need to ": 5104,
      "boun": 5105,
      "][k": 5106,
      "maximum score ": 5107,
      "position\r\n": 5108,
      "grid[0])\r\n": 5109,
      "0 <= Node.val ": 5110,
      "priority ": 5111,
      "cost = ": 5112,
      "7,7,": 5113,
      "path from ": 5114,
      "most frequent ": 5115,
      "Input: s = \"abc": 5116,
      "is not possible to ": 5117,
      "addres": 5118,
      "        n = len(s)\r\n": 5119,
      "gues": 5120,
      "choosing ": 5121,
      ". Since the ": 5122,
      "generate ": 5123,
      "Given the root of a ": 5124,
      "window\r\n": 5125,
      "similar": 5126,
      "m == grid": 5127,
      "two-": 5128,
      "properties ": 5129,
      "Union-": 5130,
      "fourth ": 5131,
      "structure ": 5132,
      "piece ": 5133,
      "0]": 5134,
      "6], ": 5135,
      "Heigh": 5136,
      "Man": 5137,
      "`Counter": 5138,
      "fra": 5139,
      "pec": 5140,
      "r + ": 5141,
      "slow": 5142,
      "s. If ": 5143,
      "test ": 5144,
      "ui, ": 5145,
      "want": 5146,
      "x.\r\n": 5147,
      "ree ": 5148,
      "er of ": 5149,
      "ature": 5150,
      "suc": 5151,
      ") in ": 5152,
      "proj": 5153,
      "verse ": 5154,
      "0 else ": 5155,
      "force ": 5156,
      "with memoization ": 5157,
      "char_": 5158,
      "\",\"0": 5159,
      "counted ": 5160,
      ", and then ": 5161,
      "-1` ": 5162,
      "5,3,": 5163,
      "This solution calculates the ": 5164,
      "s[left": 5165,
      "calculating the ": 5166,
      ", it is ": 5167,
      "values in the ": 5168,
      "edges[i] = [": 5169,
      "2],[0,": 5170,
      "correct": 5171,
      "last": 5172,
      "s.add(": 5173,
      "workers ": 5174,
      "optimiz": 5175,
      "mid + 1\r\n": 5176,
      "[x][y": 5177,
      "\" -> \"": 5178,
      "image": 5179,
      "whether ": 5180,
      "ai, bi": 5181,
      "text ": 5182,
      "passeng": 5183,
      "        # Function to ": 5184,
      "Union-Find ": 5185,
      "(r, c": 5186,
      "2. The ": 5187,
      "2), ": 5188,
      "9], ": 5189,
      "batter": 5190,
      "p = ": 5191,
      "sing the ": 5192,
      "s.length == ": 5193,
      "ange ": 5194,
      "num + ": 5195,
      "to reach ": 5196,
      "dimen": 5197,
      "es and ": 5198,
      "of the first ": 5199,
      "when the ": 5200,
      "` that ": 5201,
      "length = 0\r\n": 5202,
      "array to ": 5203,
      "compa": 5204,
      "Explanation: There is no ": 5205,
      "string \"": 5206,
      "given constraints.\r\n": 5207,
      "sum, ": 5208,
      "        return ''.join(": 5209,
      "ally.\r\n": 5210,
      "            if i ": 5211,
      "nums[right": 5212,
      "with the smallest ": 5213,
      "true ": 5214,
      "   - `": 5215,
      "_sum\r\n": 5216,
      ". It can be ": 5217,
      "edges.\r\n": 5218,
      "found.\r\n": 5219,
      "1 + 2 + ": 5220,
      "subsequence is ": 5221,
      "consider the ": 5222,
      "visited:\r\n": 5223,
      "1 <= s.length <= 105\r\n": 5224,
      "has_": 5225,
      "boundary ": 5226,
      "Process ": 5227,
      "duplicate ": 5228,
      "down": 5229,
      "variable ": 5230,
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,": 5231,
      "home": 5232,
      "making it ": 5233,
      "an undirected ": 5234,
      "encoded ": 5235,
      "solve the problem of ": 5236,
      "s: List[int]) -> int:\r\n": 5237,
      "visit ": 5238,
      "n == grid[i].length\r\n": 5239,
      "circular ": 5240,
      "space complexity ": 5241,
      "arithmetic ": 5242,
      "vertex ": 5243,
      "peci": 5244,
      "\": ": 5245,
      "(\"": 5246,
      "2).\r\n": 5247,
      "2) = ": 5248,
      "Sli": 5249,
      "[2": 5250,
      "`. If ": 5251,
      "eat ": 5252,
      "fur": 5253,
      "fea": 5254,
      "n't ": 5255,
      "pe ": 5256,
      "s2 ": 5257,
      "s1 = ": 5258,
      "y < ": 5259,
      "                return\r\n": 5260,
      " = defaultdict(list)\r\n": 5261,
      "100000": 5262,
      "1, y": 5263,
      "all other ": 5264,
      "two adjacent ": 5265,
      "is the smallest ": 5266,
      "0, 1, ": 5267,
      "            # Find the ": 5268,
      "time = ": 5269,
      "representing ": 5270,
      ", it returns ": 5271,
      "s. This ": 5272,
      "target\r\n": 5273,
      "numbers are ": 5274,
      "collect": 5275,
      "difference is ": 5276,
      "answer.\r\n": 5277,
      "        while queue:\r\n": 5278,
      "nifi": 5279,
      "`, which ": 5280,
      "handle the ": 5281,
      "- 1)\r\n": 5282,
      "before the ": 5283,
      "1 <= nums[i] <= 109\r\n": 5284,
      "231 - ": 5285,
      "linked list.\r\n": 5286,
      "distinct.\r\n": 5287,
      "        # Check if ": 5288,
      "could be ": 5289,
      "            if not node:\r\n": 5290,
      "simultane": 5291,
      "mountain": 5292,
      "hash ": 5293,
      "From ": 5294,
      "Swap ": 5295,
      "bucket": 5296,
      "triplet ": 5297,
      "clockwise ": 5298,
      "encoded": 5299,
      "dimension": 5300,
      "1'": 5301,
      "Dep": 5302,
      "Pic": 5303,
      "b\r\n": 5304,
      "dc": 5305,
      "here ": 5306,
      "jth ": 5307,
      "lu": 5308,
      "s can be ": 5309,
      "stand": 5310,
      "of them ": 5311,
      "to each ": 5312,
      "] += ": 5313,
      "                left = ": 5314,
      "                i += 1\r\n": 5315,
      "nums[i - ": 5316,
      "pos ": 5317,
      "10 + ": 5318,
      "contrib": 5319,
      "        return min_": 5320,
      "binary": 5321,
      "nums[left": 5322,
      "grid), len(": 5323,
      "subarray.\r\n": 5324,
      "signifi": 5325,
      "n, where ": 5326,
      "neighbor, ": 5327,
      "common": 5328,
      "continues ": 5329,
      "fully ": 5330,
      "], k = 2\r\n": 5331,
      "strictly increasing ": 5332,
      "exceed": 5333,
      "        for i in range(1, n):\r\n": 5334,
      "diagonal ": 5335,
      "32-bit ": 5336,
      "'b' ": 5337,
      "binary representation of ": 5338,
      "twice ": 5339,
      "wait": 5340,
      "figure ": 5341,
      "Function": 5342,
      "perform the following ": 5343,
      "flowers ": 5344,
      "potential ": 5345,
      "Graph": 5346,
      "grid), len(grid[0])\r\n": 5347,
      "1), (": 5348,
      "Bit": 5349,
      "Cre": 5350,
      "Find": 5351,
      "Jum": 5352,
      "Mar": 5353,
      "Par": 5354,
      "a\" ": 5355,
      "aster": 5356,
      "ig": 5357,
      "kn": 5358,
      "omin": 5359,
      "ry": 5360,
      "        i = ": 5361,
      "s as ": 5362,
      "s all ": 5363,
      "ans.append(": 5364,
      "rec": 5365,
      "stree": 5366,
      "plus ": 5367,
      "diagram ": 5368,
      "acros": 5369,
      "conson": 5370,
      "file ": 5371,
      "x in ": 5372,
      "ed. ": 5373,
      "2 -> ": 5374,
      "by their ": 5375,
      "in range(1, ": 5376,
      "4,4,": 5377,
      "maximum value ": 5378,
      "right.\r\n": 5379,
      "query, ": 5380,
      "\"abab": 5381,
      "ate_": 5382,
      "at the current ": 5383,
      ".length == 3\r\n": 5384,
      ", return true if ": 5385,
      "if:\r\n": 5386,
      "matches the ": 5387,
      "score\r\n": 5388,
      "capit": 5389,
      "selected ": 5390,
      ".\",\".\",\".\",\"": 5391,
      "center": 5392,
      "grid[r][c": 5393,
      "parentheses ": 5394,
      "consists only of lowercase English letters.\r\n": 5395,
      "(self, root: Optional[TreeNode]": 5396,
      "Here is the implementation of the ": 5397,
      "The input is ": 5398,
      "jkstra's ": 5399,
      "'*": 5400,
      "': ": 5401,
      "2^": 5402,
      "4]": 5403,
      ">> ": 5404,
      "Ev": 5405,
      "[a": 5406,
      "`mid": 5407,
      "eet": 5408,
      "hold": 5409,
      "x:\r\n": 5410,
      "  - ": 5411,
      "ref": 5412,
      "ary.\r\n": 5413,
      "set = ": 5414,
      "            result.append(": 5415,
      ") < ": 5416,
      "ess": 5417,
      "0 -> ": 5418,
      "strateg": 5419,
      "s, we can ": 5420,
      ") -> List[List[int]]:\r\n": 5421,
      "    def num": 5422,
      "    def get": 5423,
      "any of the ": 5424,
      "so we return ": 5425,
      "you need to ": 5426,
      "nums[k": 5427,
      "grid[0][": 5428,
      "elements is ": 5429,
      "represented by ": 5430,
      "greater": 5431,
      "s[i] is the ": 5432,
      "place the ": 5433,
      "Calculation": 5434,
      "To solve the problem of ": 5435,
      "heights[": 5436,
      "stack.pop()\r\n": 5437,
      "Here's the complete ": 5438,
      "ensure that ": 5439,
      ": str) -> bool:\r\n": 5440,
      "valid.\r\n": 5441,
      "height of the ": 5442,
      "permutation of ": 5443,
      "List[str]:\r\n": 5444,
      "meeting ": 5445,
      "circle ": 5446,
      "occurrences of ": 5447,
      "label": 5448,
      "respectively": 5449,
      "gcd(": 5450,
      "is either 0 or 1.\r\n": 5451,
      "writt": 5452,
      "; otherwise": 5453,
      "module ": 5454,
      "tuple ": 5455,
      "strength ": 5456,
      "Now, ": 5457,
      "effec": 5458,
      ".items(": 5459,
      "15 ": 5460,
      "30": 5461,
      "3] = ": 5462,
      "Lim": 5463,
      "[3] ": 5464,
      "`count": 5465,
      "     - ": 5466,
      "anti": 5467,
      "sted ": 5468,
      "an array.\r\n": 5469,
      "1 == ": 5470,
      "                total_": 5471,
      "                right = ": 5472,
      "ution ": 5473,
      "1 <= words": 5474,
      "travel": 5475,
      "-1)": 5476,
      "row in ": 5477,
      "too ": 5478,
      "island ": 5479,
      "calculate ": 5480,
      "nums[i] - ": 5481,
      "push ": 5482,
      "        if len(": 5483,
      "at the same ": 5484,
      "**: We use a ": 5485,
      "`nums`": 5486,
      "gain ": 5487,
      "* (n - ": 5488,
      "        while i < ": 5489,
      "Dijkstra's ": 5490,
      "-1, 0": 5491,
      "means the ": 5492,
      "[1] = ": 5493,
      "group of ": 5494,
      "denoting the ": 5495,
      "times:\r\n": 5496,
      "a, b in ": 5497,
      "strictly increas": 5498,
      "(self, s: str) -> int:\r\n": 5499,
      "corner": 5500,
      "width": 5501,
      "specific ": 5502,
      "during the ": 5503,
      "gives ": 5504,
      "gives the ": 5505,
      "variable": 5506,
      "diff = ": 5507,
      "invol": 5508,
      "repeated": 5509,
      "itself.\r\n": 5510,
      "Prefix ": 5511,
      "equivalent ": 5512,
      "keeping track of the ": 5513,
      "Decre": 5514,
      "'B": 5515,
      "4th ": 5516,
      "AB": 5517,
      "[r][c": 5518,
      "_max": 5519,
      "call ": 5520,
      "favor": 5521,
      "he ": 5522,
      "hol": 5523,
      "e = ": 5524,
      "        total": 5525,
      "        visited ": 5526,
      "sed": 5527,
      "The maximum ": 5528,
      "number in ": 5529,
      "rank ": 5530,
      "perf": 5531,
      "s = [1,": 5532,
      "s, which ": 5533,
      "end, ": 5534,
      "-1] ": 5535,
      "types of ": 5536,
      "move, ": 5537,
      "minimum possible ": 5538,
      "operation.\r\n": 5539,
      "you have ": 5540,
      "open": 5541,
      "cut ": 5542,
      "order and ": 5543,
      "                # If the ": 5544,
      "very large, return it modulo 109 + 7.\r\n": 5545,
      ". This approach ensures that ": 5546,
      "adjust": 5547,
      "reversed ": 5548,
      "matrix = [": 5549,
      "None)\r\n": 5550,
      "multiple of ": 5551,
      "binary search to find the ": 5552,
      "1 <= nums[i] <= ": 5553,
      "9999": 5554,
      "Explanation: There are no ": 5555,
      "cnt ": 5556,
      "reduc": 5557,
      "customer": 5558,
      "sorted in non-decreasing ": 5559,
      "left and right subtre": 5560,
      "candy ": 5561,
      "A subarray is a contiguous ": 5562,
      "dama": 5563,
      "alCut": 5564,
      "written ": 5565,
      "\"].\r\n": 5566,
      "(0": 5567,
      ".next = ": 5568,
      "110": 5569,
      "21": 5570,
      "4) ": 5571,
      "Day": 5572,
      "`: ": 5573,
      "doub": 5574,
      "j]\r\n": 5575,
      "        queue = deque": 5576,
      "invalid ": 5577,
      "one.\r\n": 5578,
      "alk ": 5579,
      "nums of length ": 5580,
      "- T": 5581,
      "immedi": 5582,
      "const": 5583,
      "= [1,": 5584,
      "from each ": 5585,
      "[i] is ": 5586,
      "                    for ": 5587,
      "word.\r\n": 5588,
      "max_heap": 5589,
      "5,1,": 5590,
      "sorting the ": 5591,
      "queen": 5592,
      "1] and ": 5593,
      "bud": 5594,
      "j += 1\r\n": 5595,
      "2 = [": 5596,
      "word is ": 5597,
      "position in the ": 5598,
      "name": 5599,
      "3],[4,": 5600,
      "including ": 5601,
      "2 <= nums": 5602,
      "-109 ": 5603,
      "goes ": 5604,
      "goal ": 5605,
      "monster": 5606,
      "Update ": 5607,
      "smaller than ": 5608,
      "Starting ": 5609,
      "given the constraints.\r\n": 5610,
      "-1 if ": 5611,
      "initialize ": 5612,
      "customer ": 5613,
      "sorted in ascending ": 5614,
      "assigned ": 5615,
      "lru_cache(": 5616,
      "rank[root": 5617,
      "Input: words = [\"": 5618,
      "        # Convert the ": 5619,
      "health ": 5620,
      "except ": 5621,
      "        # Dictionary to store the ": 5622,
      "units of ": 5623,
      "hattan ": 5624,
      "nearest ": 5625,
      "reverse=True)\r\n": 5626,
      "m == grid.length\r\n": 5627,
      "Graph ": 5628,
      "'+": 5629,
      "'X": 5630,
      ".values(": 5631,
      "2]], ": 5632,
      "Ed": 5633,
      "Pu": 5634,
      "[v": 5635,
      "eat": 5636,
      "fron": 5637,
      "lan": 5638,
      "mut": 5639,
      "s[i]\r\n": 5640,
      "x)\r\n": 5641,
      ", which is ": 5642,
      "= set()\r\n": 5643,
      "store": 5644,
      "in one ": 5645,
      "at position ": 5646,
      "1 in ": 5647,
      "ell ": 5648,
      "can only ": 5649,
      "each element ": 5650,
      "2 * 104\r\n": 5651,
      "1, c": 5652,
      "1 <= queries": 5653,
      "                    current_": 5654,
      "string by ": 5655,
      "words[": 5656,
      "    def numberOf": 5657,
      "sums ": 5658,
      "        return max(": 5659,
      "meet the ": 5660,
      "identif": 5661,
      "fficul": 5662,
      "character.\r\n": 5663,
      "s are unique.\r\n": 5664,
      "4 * ": 5665,
      "Char": 5666,
      "6,7,": 5667,
      "root\r\n": 5668,
      "end of ": 5669,
      "collect ": 5670,
      "make a ": 5671,
      "bread": 5672,
      "appear in ": 5673,
      "0-indexed integer array ": 5674,
      "going ": 5675,
      "], k = 3\r\n": 5676,
      "beautiful": 5677,
      "Traverse the ": 5678,
      "s(self, nums: List[int], ": 5679,
      "= [0] * n\r\n": 5680,
      "Swap": 5681,
      "operation, you can ": 5682,
      "`j` ": 5683,
      "first and last ": 5684,
      "message ": 5685,
      "formula ": 5686,
      "fewer ": 5687,
      "linear ": 5688,
      "significan": 5689,
      ".count": 5690,
      "3. The ": 5691,
      "Day ": 5692,
      "aab": 5693,
      "dx": 5694,
      "gc": 5695,
      "tr": 5696,
      "w ": 5697,
      ", but ": 5698,
      "on.\r\n": 5699,
      "is used to ": 5700,
      "deci": 5701,
      "n + ": 5702,
      "n where ": 5703,
      "                break\r\n": 5704,
      " = 0, ": 5705,
      "es:\r\n": 5706,
      "max-": 5707,
      "= [\"": 5708,
      "number of distinct ": 5709,
      "1 <= m ": 5710,
      "forward ": 5711,
      "with n ": 5712,
      "s = [[": 5713,
      ". The time complexity is ": 5714,
      "best_": 5715,
      "word1": 5716,
      "        return [": 5717,
      "right` ": 5718,
      "You are given the ": 5719,
      "value in ": 5720,
      "only the ": 5721,
      "has been ": 5722,
      "1] - ": 5723,
      "different": 5724,
      "graph.\r\n": 5725,
      "character is ": 5726,
      "numbers in the ": 5727,
      "largest": 5728,
      "        if n == ": 5729,
      "for the first ": 5730,
      "1) and ": 5731,
      "distance = ": 5732,
      "connect ": 5733,
      "adding the ": 5734,
      "multiple": 5735,
      "multipli": 5736,
      "n, return the ": 5737,
      "s_to_": 5738,
      "allowed ": 5739,
      "Delet": 5740,
      "To solve this problem ": 5741,
      "Output: 12\r\n": 5742,
      "O(n^": 5743,
      "-1,-1,": 5744,
      "rotated ": 5745,
      "level_": 5746,
      "        # Iterate over each ": 5747,
      "energy": 5748,
      "palindrome.\r\n": 5749,
      "constructs the ": 5750,
      "bisect_left": 5751,
      "distribut": 5752,
      "table\r\n": 5753,
      ". If there are multiple ": 5754,
      "node.left)\r\n": 5755,
      "Notice that ": 5756,
      "Manhattan ": 5757,
      "street ": 5758,
      "-inf'": 5759,
      "2), (": 5760,
      "Could ": 5761,
      "Play": 5762,
      "Sort the ": 5763,
      "\\)": 5764,
      "e\",\"": 5765,
      ", you can ": 5766,
      "ans[": 5767,
      "states ": 5768,
      ": List[List[int]], ": 5769,
      "det": 5770,
      "to any ": 5771,
      "a list of ": 5772,
      "Input: point": 5773,
      "subset of ": 5774,
      "2 in ": 5775,
      "== len(": 5776,
      "                    continue\r\n": 5777,
      "sible": 5778,
      "< n\r\n": 5779,
      "used": 5780,
      "from the first ": 5781,
      "list `": 5782,
      "s[i] <= ": 5783,
      "binary tree, ": 5784,
      "!= 0:\r\n": 5785,
      "computed ": 5786,
      "0],[1,": 5787,
      "score.\r\n": 5788,
      "conditions.\r\n": 5789,
      "seconds.\r\n": 5790,
      "denomin": 5791,
      "changing the ": 5792,
      "balance": 5793,
      "float('-inf'": 5794,
      "performing the ": 5795,
      "statement": 5796,
      "parenthese": 5797,
      "ai, b": 5798,
      "Recursive ": 5799,
      "The number of nodes in the tree is in the range [1, ": 5800,
      "again": 5801,
      "quick": 5802,
      "actual ": 5803,
      "right - left ": 5804,
      "where:\r\n": 5805,
      "lookup": 5806,
      "231 - 1\r\n": 5807,
      "lru_cache(None)\r\n": 5808,
      "\"10": 5809,
      "(root": 5810,
      "5]": 5811,
      "9],[": 5812,
      "X ": 5813,
      "`, the ": 5814,
      "by": 5815,
      "bul": 5816,
      "fall": 5817,
      "fold": 5818,
      "gg": 5819,
      "        stack = ": 5820,
      "ti, ": 5821,
      "utt": 5822,
      "to get ": 5823,
      "ately ": 5824,
      "turn ": 5825,
      "constra": 5826,
      "Inser": 5827,
      "= [2,": 5828,
      "Output: [1,2,": 5829,
      "self ": 5830,
      "example ": 5831,
      "low, ": 5832,
      "You have ": 5833,
      "is the only ": 5834,
      "thest ": 5835,
      "        for u, ": 5836,
      "            if len(": 5837,
      "point.\r\n": 5838,
      "s[right": 5839,
      "nums[3] ": 5840,
      "characters are ": 5841,
      "with the first ": 5842,
      "non-overlapping ": 5843,
      "approach to find the ": 5844,
      "between two ": 5845,
      "increment ": 5846,
      "dfs` function ": 5847,
      "substrings of ": 5848,
      "collection": 5849,
      "longest common ": 5850,
      "tasks ": 5851,
      "s. The `": 5852,
      "Times": 5853,
      "cases are ": 5854,
      "left, right": 5855,
      "boxes": 5856,
      "prime factor": 5857,
      "Otherwise, ": 5858,
      "specified ": 5859,
      "fill": 5860,
      "part of the ": 5861,
      "obstacle ": 5862,
      "needed.\r\n": 5863,
      "Since the answer may be ": 5864,
      "beginning ": 5865,
      "        # Convert ": 5866,
      "math.": 5867,
      "technique ": 5868,
      "SortedList": 5869,
      "guaranteed that ": 5870,
      "Determine the ": 5871,
      "Could you ": 5872,
      "\". ": 5873,
      "0's ": 5874,
      "a\r\n": 5875,
      "k)\r\n": 5876,
      "lit": 5877,
      "mou": 5878,
      "nx, n": 5879,
      "t\r\n": 5880,
      "v, ": 5881,
      "thod": 5882,
      "aroun": 5883,
      "tile": 5884,
      "y + ": 5885,
      "num, ": 5886,
      "ply the ": 5887,
      "it\r\n": 5888,
      "term": 5889,
      "        # Build the ": 5890,
      "counting the ": 5891,
      "to the current ": 5892,
      "    def longest": 5893,
      "tail": 5894,
      "4,1,": 5895,
      "leftmost ": 5896,
      "arr)\r\n": 5897,
      "index i = ": 5898,
      "minimum and ": 5899,
      "value = ": 5900,
      "only lowercase English letters.\r\n": 5901,
      "query.\r\n": 5902,
      "has no ": 5903,
      "free ": 5904,
      "max(0, ": 5905,
      "largest_": 5906,
      "Ener": 5907,
      "1) = ": 5908,
      "2],[3,": 5909,
      "total_sum ": 5910,
      ": List[int]) -> bool:\r\n": 5911,
      "with a time complexity of ": 5912,
      ") - ord('a": 5913,
      "intervals ": 5914,
      "in the range [": 5915,
      "\"bc": 5916,
      ": str) -> str:\r\n": 5917,
      ": int) -> str:\r\n": 5918,
      "transforma": 5919,
      "Cost ": 5920,
      "give ": 5921,
      "increments the ": 5922,
      "(self, nums: List[int], k: int) -> int:\r\n": 5923,
      "rules:\r\n": 5924,
      "yiel": 5925,
      "Distance": 5926,
      "rest of the ": 5927,
      "Base case": 5928,
      "Explanation: ": 5929,
      "\" + \"": 5930,
      "Helper function ": 5931,
      "dollar": 5932,
      "two-pointer ": 5933,
      "(inclusive": 5934,
      "50": 5935,
      "8 + ": 5936,
      "RL": 5937,
      "_list": 5938,
      "gen": 5939,
      "is, ": 5940,
      "s[i], ": 5941,
      "us, the ": 5942,
      "well": 5943,
      "int the ": 5944,
      "urr": 5945,
      "math ": 5946,
      "moiz": 5947,
      "from index ": 5948,
      "as it ": 5949,
      "exec": 5950,
      "with `": 5951,
      "lowest ": 5952,
      "word\r\n": 5953,
      "Represent": 5954,
      "4,5,": 5955,
      "met": 5956,
      "            if nums[i] ": 5957,
      "trees ": 5958,
      "swapp": 5959,
      "**: If ": 5960,
      "operations\r\n": 5961,
      "[1,3,": 5962,
      "count in ": 5963,
      "                if not ": 5964,
      ".length <= 10\r\n": 5965,
      "s[i] = ": 5966,
      "        for i in range(m):\r\n": 5967,
      "   - The ": 5968,
      "   - If the ": 5969,
      "need to be ": 5970,
      "removing the ": 5971,
      "zeros": 5972,
      "constraints ": 5973,
      ") and (": 5974,
      "include ": 5975,
      "including the ": 5976,
      "4],[2,": 5977,
      "1 <= s.length <= ": 5978,
      "meets the ": 5979,
      "average": 5980,
      "Input: nums = [1,2,3,4,": 5981,
      "median": 5982,
      "not in visited:\r\n": 5983,
      "Hence, ": 5984,
      "center ": 5985,
      "backtracking ": 5986,
      "ensuring that the ": 5987,
      "Your task is to ": 5988,
      "having ": 5989,
      "figur": 5990,
      "underlin": 5991,
      "counts the number of ": 5992,
      "Memoiz": 5993,
      "Plac": 5994,
      "Course": 5995,
      "astero": 5996,
      "constraint ": 5997,
      "(-": 5998,
      "(the ": 5999,
      "(possibly ": 6000,
      ".split": 6001,
      "1), ": 6002,
      "2*": 6003,
      ":]\r\n": 6004,
      "[5, ": 6005,
      "`0": 6006,
      "ative ": 6007,
      "b)\r\n": 6008,
      "s1 and ": 6009,
      "x][n": 6010,
      "deque ": 6011,
      "            new_": 6012,
      "            left_": 6013,
      "            count = 0\r\n": 6014,
      "a single ": 6015,
      "a positive integer ": 6016,
      "1 for ": 6017,
      "olo": 6018,
      "nums.length ": 6019,
      "nums[i], ": 6020,
      "fix": 6021,
      "never ": 6022,
      "        # Helper function ": 6023,
      "ship ": 6024,
      "][col": 6025,
      "tain ": 6026,
      "dp[i - 1][": 6027,
      "izz": 6028,
      "you cannot ": 6029,
      "s to avoid ": 6030,
      "left corner ": 6031,
      "j and ": 6032,
      "4 is ": 6033,
      "numbers\r\n": 6034,
      "end = ": 6035,
      "\", \"c": 6036,
      "last element ": 6037,
      "cell.\r\n": 6038,
      "prefix of ": 6039,
      "brevi": 6040,
      "mark ": 6041,
      "        # Initialize a ": 6042,
      "changing ": 6043,
      "stack and ": 6044,
      "        # Iterate through the ": 6045,
      "applying the ": 6046,
      "needed": 6047,
      "triangle": 6048,
      "* (n + 1": 6049,
      "subtract ": 6050,
      "% 2 == 0:\r\n": 6051,
      "numbered from 0 to n - ": 6052,
      "        m, n = len(grid), len(grid[0])\r\n": 6053,
      "), (0, -1": 6054,
      "), (1, 0": 6055,
      "xi, yi": 6056,
      "do the following ": 6057,
      "implement this ": 6058,
      "deleting some ": 6059,
      "accepted.\r\n": 6060,
      "quickly ": 6061,
      "(a, b": 6062,
      "20\r\n": 6063,
      "4:\r\n": 6064,
      "6] ": 6065,
      "App": 6066,
      "Jo": 6067,
      "[index": 6068,
      "f(": 6069,
      "n))\r\n": 6070,
      "sr": 6071,
      "uf": 6072,
      "al.\r\n": 6073,
      "n is ": 6074,
      ". For example, ": 6075,
      "The": 6076,
      "enter": 6077,
      "- At ": 6078,
      "if and only ": 6079,
      "The total ": 6080,
      "configur": 6081,
      "= [[": 6082,
      "los": 6083,
      "k < ": 6084,
      "> 0 and ": 6085,
      "ed. The ": 6086,
      "        # Return the ": 6087,
      "from math ": 6088,
      "i to ": 6089,
      "s = [1,2,": 6090,
      "node]:\r\n": 6091,
      "word2": 6092,
      "taking ": 6093,
      "[0]:\r\n": 6094,
      "< right:\r\n": 6095,
      ", we calculate the ": 6096,
      "2, y": 6097,
      "            if num ": 6098,
      "\", s": 6099,
      "This solution defines a ": 6100,
      "position.\r\n": 6101,
      "+ 1))\r\n": 6102,
      "A substring ": 6103,
      "s in each ": 6104,
      "observ": 6105,
      "division ": 6106,
      "\"a\",\"b": 6107,
      "subarray of ": 6108,
      "subarrays of ": 6109,
      "saf": 6110,
      "ensures that we ": 6111,
      "3],[3,": 6112,
      "out of the ": 6113,
      "items ": 6114,
      "algorithm": 6115,
      "suffix": 6116,
      "exceed ": 6117,
      "balls ": 6118,
      "And": 6119,
      "            # Check if ": 6120,
      "customers ": 6121,
      "ancestor": 6122,
      "[::": 6123,
      "​​​​​​": 6124,
      "question ": 6125,
      "encountered ": 6126,
      "1 <= words[i]": 6127,
      "xyz": 6128,
      "secret ": 6129,
      "available_": 6130,
      "        @lru_cache(None)\r\n": 6131,
      "repeatedly ": 6132,
      "x][ny": 6133,
      "from math import ": 6134,
      "'L": 6135,
      "():\r\n": 6136,
      ".0000": 6137,
      "1`": 6138,
      "12 ": 6139,
      "4-": 6140,
      "8], ": 6141,
      "AT": 6142,
      "For": 6143,
      "Fli": 6144,
      "Let ": 6145,
      "[2], ": 6146,
      "_, ": 6147,
      "_with_": 6148,
      "`[": 6149,
      "agram": 6150,
      "cumul": 6151,
      "rt": 6152,
      "son ": 6153,
      "s[i + ": 6154,
      "}, ": 6155,
      "        row": 6156,
      "        sorted_": 6157,
      "erequi": 6158,
      ", current_": 6159,
      "only.\r\n": 6160,
      "any": 6161,
      "rover": 6162,
      "to find ": 6163,
      ". Note that ": 6164,
      "an element ": 6165,
      "itself ": 6166,
      "oly": 6167,
      "if a ": 6168,
      "m - ": 6169,
      "Input: ma": 6170,
      "orders ": 6171,
      "x == ": 6172,
      "0,2,": 6173,
      "version ": 6174,
      "number of operations ": 6175,
      "(self, arr": 6176,
      "maximum sum ": 6177,
      "is the sum of ": 6178,
      "minimum time ": 6179,
      "] = True\r\n": 6180,
      "count how many ": 6181,
      "create ": 6182,
      "For i = ": 6183,
      "n - 1 ": 6184,
      "s: List[List[int]]": 6185,
      ", it calculates the ": 6186,
      ", it returns the ": 6187,
      "s. We ": 6188,
      "target, ": 6189,
      "numbers in ": 6190,
      "option": 6191,
      "_sum = 0\r\n": 6192,
      "word in ": 6193,
      "x, y, ": 6194,
      "x, y = ": 6195,
      "1],[1,1,": 6196,
      "increment the ": 6197,
      "-indexed ": 6198,
      "Initialization**: We ": 6199,
      "arily ": 6200,
      "prev = ": 6201,
      "means that ": 6202,
      "does not contain ": 6203,
      "coordinates": 6204,
      "            for j in range(1, ": 6205,
      "ected": 6206,
      "_index = ": 6207,
      "it's not ": 6208,
      "`dp` array ": 6209,
      "Any ": 6210,
      ". You may ": 6211,
      "(nx, n": 6212,
      "neighbor in graph[": 6213,
      "region ": 6214,
      "Maximum ": 6215,
      "Python ": 6216,
      "recursive function ": 6217,
      "above.\r\n": 6218,
      "infinite ": 6219,
      "relation": 6220,
      "left + right": 6221,
      "minimum and maximum ": 6222,
      "erequisit": 6223,
      "\"11": 6224,
      "'9": 6225,
      "30\r\n": 6226,
      "4] = ": 6227,
      "7] ": 6228,
      "Curr": 6229,
      "bab": 6230,
      "carr": 6231,
      "mp": 6232,
      "s += 1\r\n": 6233,
      "ended ": 6234,
      "or\r\n": 6235,
      "stone": 6236,
      "of them.\r\n": 6237,
      "see if ": 6238,
      "a 2D integer array ": 6239,
      "- If ": 6240,
      "[i+": 6241,
      "if we ": 6242,
      "e the first ": 6243,
      "Input: word = ": 6244,
      "Input: matrix = [": 6245,
      "minute ": 6246,
      "in the sorted ": 6247,
      "from left to ": 6248,
      "sell ": 6249,
      "shor": 6250,
      "1 <= arr": 6251,
      "pai": 6252,
      "paw": 6253,
      "(self, num": 6254,
      "        return dfs(": 6255,
      "s of a ": 6256,
      "all(": 6257,
      "-1)\r\n": 6258,
      "result)\r\n": 6259,
      "user": 6260,
      ". If there is no ": 6261,
      "Return the maximum possible ": 6262,
      "1] == ": 6263,
      "following:\r\n": 6264,
      "track the ": 6265,
      "s. Each ": 6266,
      "Explanation: The longest ": 6267,
      "other words, ": 6268,
      "ages ": 6269,
      ".length == n\r\n": 6270,
      "`k`.\r\n": 6271,
      "[2,1,": 6272,
      "largest possible ": 6273,
      "node.children": 6274,
      "lowercase letter": 6275,
      "queries:\r\n": 6276,
      "0],[2,": 6277,
      "positive integer": 6278,
      "matching ": 6279,
      "exists.\r\n": 6280,
      "appears in ": 6281,
      ", so we ": 6282,
      "dictionary to store the ": 6283,
      "build the ": 6284,
      "insert ": 6285,
      "(self, n: int) -> int:\r\n": 6286,
      "2, 3, 4, ": 6287,
      "down, ": 6288,
      "wee": 6289,
      "subtract": 6290,
      "candidate ": 6291,
      "capacity": 6292,
      "lru_cache\r\n": 6293,
      "brick": 6294,
      "intersection": 6295,
      "alphabet": 6296,
      "xi, y": 6297,
      "an edge between ": 6298,
      "s(self, n: int, ": 6299,
      "So the ": 6300,
      "from functools import lru_cache\r\n": 6301,
      "Explanation: In this example": 6302,
      "constant ": 6303,
      "low, high": 6304,
      "0  # ": 6305,
      "17": 6306,
      "::": 6307,
      "Palindro": 6308,
      "Sim": 6309,
      "[3,2,": 6310,
      "ct = ": 6311,
      "est_": 6312,
      "gl": 6313,
      "ive ": 6314,
      "i.e.": 6315,
      "k_": 6316,
      "k]\r\n": 6317,
      "lang": 6318,
      "m)]\r\n": 6319,
      "nth ": 6320,
      "ot ": 6321,
      "sor": 6322,
      "s` to ": 6323,
      "        left = ": 6324,
      "iner": 6325,
      "inorder": 6326,
      "inside ": 6327,
      "reward": 6328,
      ". By ": 6329,
      "a total of ": 6330,
      "unit ": 6331,
      "an even ": 6332,
      "                result": 6333,
      "                count += 1\r\n": 6334,
      "nums1 ": 6335,
      "10 = ": 6336,
      "10], ": 6337,
      "ess ": 6338,
      "ght ": 6339,
      "        # Start ": 6340,
      "profi": 6341,
      "abbrevi": 6342,
      "verti": 6343,
      "sell": 6344,
      "as many ": 6345,
      "Explanation: It is ": 6346,
      "irr": 6347,
      "Replace ": 6348,
      "to the result ": 6349,
      ") -> List[str]:\r\n": 6350,
      "You must ": 6351,
      "elements, ": 6352,
      "        return -1\r\n": 6353,
      "[0..": 6354,
      "            if current_": 6355,
      "so that the ": 6356,
      "iden": 6357,
      "results of ": 6358,
      "[i].length == 2\r\n": 6359,
      "is a subsequence of ": 6360,
      "pairs (": 6361,
      "elements from the ": 6362,
      "representing a ": 6363,
      "            return -1\r\n": 6364,
      "j <= ": 6365,
      "sizes ": 6366,
      "6,2,": 6367,
      "set:\r\n": 6368,
      "digit\r\n": 6369,
      "digits, ": 6370,
      "        for i in range(n - ": 6371,
      "smallest possible ": 6372,
      "dot ": 6373,
      "efficiently.\r\n": 6374,
      "long ": 6375,
      "line": 6376,
      "                # Check ": 6377,
      "Input: n = 2, ": 6378,
      "group.\r\n": 6379,
      "make all ": 6380,
      "updated ": 6381,
      "n == nums.length\r\n": 6382,
      "structure": 6383,
      "prerequisit": 6384,
      "decreas": 6385,
      "ballo": 6386,
      "Output: 15\r\n": 6387,
      "first.\r\n": 6388,
      "To solve this problem, we can use a ": 6389,
      "Position": 6390,
      "float('inf')] ": 6391,
      "more than one ": 6392,
      "concatenated ": 6393,
      "larger than ": 6394,
      "slot": 6395,
      "Let's implement this ": 6396,
      "iterating through the ": 6397,
      "Indices": 6398,
      "        nums.sort()\r\n": 6399,
      "Given the constraints, ": 6400,
      "The input is generated such that ": 6401,
      "Base case: ": 6402,
      "\"ac": 6403,
      "\"],\r\n": 6404,
      "'e": 6405,
      ".sort(": 6406,
      "1. We ": 6407,
      "500": 6408,
      "5000\r\n": 6409,
      "O\",\"": 6410,
      "Roo": 6411,
      "[p": 6412,
      "_length": 6413,
      "cer": 6414,
      "hen": 6415,
      "j)\r\n": 6416,
      "nat": 6417,
      "pack": 6418,
      "sou": 6419,
      "ting the ": 6420,
      "win ": 6421,
      "        direction": 6422,
      "onto the ": 6423,
      "enari": 6424,
      "to store ": 6425,
      "ing this ": 6426,
      "n x n ": 6427,
      "Thus, ": 6428,
      "                left += 1\r\n": 6429,
      "for large ": 6430,
      "subproblem": 6431,
      "length of a ": 6432,
      "array by ": 6433,
      "number of unique ": 6434,
      "light": 6435,
      "by 1.\r\n": 6436,
      "Construction": 6437,
      ". The final ": 6438,
      "counting ": 6439,
      "        return dp": 6440,
      "up, ": 6441,
      "parts ": 6442,
      "row.\r\n": 6443,
      "You are given an m x n ": 6444,
      "graph\r\n": 6445,
      "right to ": 6446,
      "scenari": 6447,
      "cost is ": 6448,
      "result += ": 6449,
      "Change ": 6450,
      "Given an array ": 6451,
      "move to ": 6452,
      "Input: s = \"ab": 6453,
      "increase": 6454,
      "                # Calculate the ": 6455,
      "cost.\r\n": 6456,
      "local ": 6457,
      "This solution uses the ": 6458,
      "[2,3,": 6459,
      "[2,4,": 6460,
      "cell is ": 6461,
      "path.\r\n": 6462,
      "floor ": 6463,
      ", return false.\r\n": 6464,
      "also be ": 6465,
      "gain": 6466,
      "popul": 6467,
      "match the ": 6468,
      "matrix.\r\n": 6469,
      "3] and ": 6470,
      "first, ": 6471,
      "max(max_length, ": 6472,
      "else -1\r\n": 6473,
      "common divisor ": 6474,
      "Pos": 6475,
      "False`.\r\n": 6476,
      "it's impossible to ": 6477,
      "Values": 6478,
      "satisfies ": 6479,
      "length = max(max_length, ": 6480,
      "Select ": 6481,
      "Result ": 6482,
      "empty.\r\n": 6483,
      "leading zeros.\r\n": 6484,
      "whether the ": 6485,
      "time complexity of this ": 6486,
      "obtained by ": 6487,
      "mention": 6488,
      "        result = 0\r\n": 6489,
      "restriction": 6490,
      "Difference": 6491,
      "(BFS) ": 6492,
      "        graph = defaultdict(list)\r\n": 6493,
      "wants to ": 6494,
      "success": 6495,
      "4 - ": 6496,
      ":0": 6497,
      "Id": 6498,
      "`current_": 6499,
      "a\".\r\n": 6500,
      "call": 6501,
      "gn": 6502,
      "ili": 6503,
      "n)": 6504,
      "        \"": 6505,
      "ste": 6506,
      "leg": 6507,
      "ch the ": 6508,
      "desi": 6509,
      "cop": 6510,
      "in ascending ": 6511,
      "sup": 6512,
      ") are ": 6513,
      "                new_": 6514,
      "[i ": 6515,
      "gets ": 6516,
      "Integ": 6517,
      "Input: board ": 6518,
      "ned": 6519,
      "submatrix ": 6520,
      "length is ": 6521,
      "[i] <= 109\r\n": 6522,
      "share": 6523,
      "shop ": 6524,
      "Cont": 6525,
      "words.\r\n": 6526,
      "vide": 6527,
      "maximum and ": 6528,
      "< len(": 6529,
      "] = i\r\n": 6530,
      "node 0 ": 6531,
      "will store the ": 6532,
      "pairs.\r\n": 6533,
      "elements of the ": 6534,
      "priz": 6535,
      ", the number of ": 6536,
      "size\r\n": 6537,
      "numbers, ": 6538,
      "iterto": 6539,
      "return the answer ": 6540,
      "path is ": 6541,
      "cubo": 6542,
      "1],[3,": 6543,
      "remove": 6544,
      "next\r\n": 6545,
      ". This allows us to ": 6546,
      "You are given a 2D integer array ": 6547,
      "digit in ": 6548,
      "ending at ": 6549,
      "occurrence": 6550,
      "include": 6551,
      "good": 6552,
      "Bob's ": 6553,
      "less than or equal to the ": 6554,
      "even and ": 6555,
      "directions:\r\n": 6556,
      "-100": 6557,
      "change the ": 6558,
      "joint ": 6559,
      "skip": 6560,
      "Input: grid = [[1,": 6561,
      "avoid": 6562,
      "happy ": 6563,
      "missing": 6564,
      "triangle ": 6565,
      "Move the ": 6566,
      "O(n) time complex": 6567,
      "peak ": 6568,
      "row, col": 6569,
      "nums[j]": 6570,
      ". Finally, it returns the ": 6571,
      "tuple(": 6572,
      "dx, d": 6573,
      "try to ": 6574,
      "consonant": 6575,
      "14,": 6576,
      "77": 6577,
      "7 = ": 6578,
      "Dy": 6579,
      "More ": 6580,
      "[n - ": 6581,
      "`, and ": 6582,
      "ai and ": 6583,
      "butt": 6584,
      "cal": 6585,
      "ice ": 6586,
      "might ": 6587,
      "o, ": 6588,
      "        dfs(": 6589,
      "        prefix_sum": 6590,
      "s for the ": 6591,
      "en.\r\n": 6592,
      "ency": 6593,
      "arrange ": 6594,
      "ster ": 6595,
      "of n ": 6596,
      "plus the ": 6597,
      "Then": 6598,
      "ime": 6599,
      "active ": 6600,
      "nums):\r\n": 6601,
      "The sum of the ": 6602,
      "white ": 6603,
      "subse": 6604,
      "x <= ": 6605,
      "1, the ": 6606,
      "twor": 6607,
      "\",\"a": 6608,
      "                    new_": 6609,
      "                    count += 1\r\n": 6610,
      "(self, word": 6611,
      "    def can": 6612,
      "in range(n):\r\n": 6613,
      "        return len(": 6614,
      "two numbers ": 6615,
      "method": 6616,
      "s = sorted(": 6617,
      "kets ": 6618,
      "        for j in range(": 6619,
      "dp[i] = ": 6620,
      "\" to ": 6621,
      "rightmost ": 6622,
      "index is ": 6623,
      "operations, ": 6624,
      "sequences": 6625,
      "node in ": 6626,
      "which are ": 6627,
      "' in ": 6628,
      "from the second ": 6629,
      "time and ": 6630,
      "Input: nums = [3,": 6631,
      "k = 0\r\n": 6632,
      "graph is ": 6633,
      "n - 1:\r\n": 6634,
      "non_": 6635,
      "set bits ": 6636,
      "answer to the ": 6637,
      "non-zero ": 6638,
      "and the last ": 6639,
      "[0] * ": 6640,
      "intersect": 6641,
      "1) // ": 6642,
      "zero.\r\n": 6643,
      "2] and ": 6644,
      "3,4]]\r\n": 6645,
      "out of ": 6646,
      ". We then ": 6647,
      "s` module ": 6648,
      ": List[int], nums2": 6649,
      "at most k ": 6650,
      "replacement": 6651,
      "negative": 6652,
      "Defin": 6653,
      "Option ": 6654,
      "vowel ": 6655,
      "construct the ": 6656,
      "        # Iterate over the ": 6657,
      "Person ": 6658,
      "merge ": 6659,
      ", we return `": 6660,
      "In the first ": 6661,
      "occurrence of each ": 6662,
      "Return the minimum number of operations ": 6663,
      "needed\r\n": 6664,
      "Box": 6665,
      "% 2 == ": 6666,
      "bisect_right": 6667,
      "bric": 6668,
      "tive, ": 6669,
      "Result**: The ": 6670,
      "domino": 6671,
      "This solution iterates through each ": 6672,
      "easily ": 6673,
      "(self, grid: List[List[int]]) -> int:\r\n": 6674,
      "Generate ": 6675,
      "        left, right = 0, ": 6676,
      "            mid = (left + right": 6677,
      "knight ": 6678,
      "Push": 6679,
      "        # Helper function to ": 6680,
      "A substring is a contiguous ": 6681,
      "Continu": 6682,
      "'O": 6683,
      "12\r\n": 6684,
      "200\r\n": 6685,
      "3)\r\n": 6686,
      "30,": 6687,
      "54": 6688,
      "50,": 6689,
      "89": 6690,
      ":00": 6691,
      "Group": 6692,
      "Loo": 6693,
      "a)\r\n": 6694,
      "ced": 6695,
      "ld": 6696,
      "ping ": 6697,
      "    \r\n": 6698,
      "s += ": 6699,
      ", a ": 6700,
      "ing to ": 6701,
      "] for ": 6702,
      "Extra": 6703,
      "main": 6704,
      "fic": 6705,
      "that satisfies the ": 6706,
      "assign ": 6707,
      "loom": 6708,
      "nei": 6709,
      "networ": 6710,
      "version": 6711,
      "1 <= Node.val ": 6712,
      "with length ": 6713,
      "with all ": 6714,
      "char)\r\n": 6715,
      "<= 10\r\n": 6716,
      "s = [0] ": 6717,
      "\",\r\n": 6718,
      "Conne": 6719,
      "ilar ": 6720,
      "elements to ": 6721,
      "s = set()\r\n": 6722,
      "dp[i-1][": 6723,
      "3 * 104\r\n": 6724,
      "used_": 6725,
      "there exists ": 6726,
      "Input: nums = [0,": 6727,
      "s[i] is either ": 6728,
      "self.rank[root": 6729,
      "approach is ": 6730,
      "location": 6731,
      "cell in the ": 6732,
      "Check": 6733,
      "sign the ": 6734,
      "constraints and ": 6735,
      "space.\r\n": 6736,
      "adjacent": 6737,
      "1 <= nums.length <= 100\r\n": 6738,
      "it is impossible to ": 6739,
      "s.sort(": 6740,
      "consists of lowercase English letters.\r\n": 6741,
      "does not have ": 6742,
      "combined ": 6743,
      "-105 ": 6744,
      "backward": 6745,
      "fuel": 6746,
      "count the occurrences of each ": 6747,
      "'1'": 6748,
      "True`.\r\n": 6749,
      "fruits ": 6750,
      "from 1 to n": 6751,
      "Operation ": 6752,
      "            for i in range(1, ": 6753,
      "        # Check if the ": 6754,
      "1 <= m, n ": 6755,
      "Given an array of integers ": 6756,
      "bracket": 6757,
      "Second ": 6758,
      "        stack = []\r\n": 6759,
      "%= ": 6760,
      "(p": 6761,
      "1-": 6762,
      "16,": 6763,
      "1.length, ": 6764,
      "300\r\n": 6765,
      "3) = ": 6766,
      "3]], ": 6767,
      "Grid": 6768,
      "Hand": 6769,
      "It": 6770,
      "Y ": 6771,
      "[-": 6772,
      "b\"\r\n": 6773,
      "full": 6774,
      "ith": 6775,
      "ly-": 6776,
      "ming": 6777,
      "n)\r\n": 6778,
      "s))\r\n": 6779,
      "sand": 6780,
      "s[i - ": 6781,
      "tle": 6782,
      "temp": 6783,
      "v)\r\n": 6784,
      "s or ": 6785,
      "instruction": 6786,
      "t to ": 6787,
      "ans = ": 6788,
      "stines": 6789,
      "coin ": 6790,
      "n % ": 6791,
      "n is the length of the ": 6792,
      "turn, ": 6793,
      ") * (": 6794,
      "most_": 6795,
      "edy ": 6796,
      "i is ": 6797,
      "[i] and ": 6798,
      "s of each ": 6799,
      "integer matrix ": 6800,
      ", we will ": 6801,
      "points\r\n": 6802,
      "second.\r\n": 6803,
      "A string ": 6804,
      "1,2,2,": 6805,
      "angle": 6806,
      "function returns `": 6807,
      "heap = [": 6808,
      "nodes with ": 6809,
      ". It is ": 6810,
      "root node ": 6811,
      "answer[i] is the ": 6812,
      "space": 6813,
      "neighbor)\r\n": 6814,
      "i < n\r\n": 6815,
      "`n` is ": 6816,
      "replacing ": 6817,
      "[i], nums2": 6818,
      ") + 1\r\n": 6819,
      "parent[x": 6820,
      "for a cost of ": 6821,
      "            for j in range(i + 1, ": 6822,
      "There is only one ": 6823,
      "'1'.\r\n": 6824,
      "False] ": 6825,
      "similar ": 6826,
      "changed": 6827,
      "satisfy ": 6828,
      "appli": 6829,
      "apply the ": 6830,
      "].append((": 6831,
      "manag": 6832,
      "distinct_": 6833,
      "farthest ": 6834,
      "filled ": 6835,
      "mile": 6836,
      "consist of lowercase English letters.\r\n": 6837,
      "row and column ": 6838,
      "bag ": 6839,
      "threshol": 6840,
      "#\",\"#\",\"": 6841,
      "staur": 6842,
      "', and '": 6843,
      "true,": 6844,
      "min-heap ": 6845,
      "log n) ": 6846,
      "following conditions:\r\n": 6847,
      "pyra": 6848,
      "perfect ": 6849,
      "breadth-first search ": 6850,
      "This solution defines a helper function `": 6851,
      "Input: mat = [": 6852,
      "subsequent ": 6853,
      "(current_": 6854,
      ", ": 6855,
      "0, and ": 6856,
      "11, ": 6857,
      "12, ": 6858,
      "2` ": 6859,
      "200": 6860,
      "26\r\n": 6861,
      "5: ": 6862,
      "Fact": 6863,
      "Get the ": 6864,
      "Using ": 6865,
      "We": 6866,
      "[num": 6867,
      "[left": 6868,
      "`arr": 6869,
      "bloom": 6870,
      "dra": 6871,
      "poly": 6872,
      "sq": 6873,
      "s.length <= 100\r\n": 6874,
      "        count = ": 6875,
      "s + ": 6876,
      "s becomes ": 6877,
      "d of ": 6878,
      "ore the ": 6879,
      "allo": 6880,
      "is 2.\r\n": 6881,
      "er = ": 6882,
      "urch": 6883,
      "rati": 6884,
      "or \"": 6885,
      "mach": 6886,
      "ribb": 6887,
      "am ": 6888,
      "quad": 6889,
      "- `": 6890,
      "for this ": 6891,
      "from node ": 6892,
      "1 <= n == ": 6893,
      "fore ": 6894,
      "with its ": 6895,
      "\",\"ab": 6896,
      "string and ": 6897,
      "words in ": 6898,
      "sum = 0\r\n": 6899,
      "one or more ": 6900,
      "maximum profit ": 6901,
      "run ": 6902,
      "3 to ": 6903,
      "where `dp": 6904,
      "results in ": 6905,
      "is a string ": 6906,
      "answers ": 6907,
      "ison": 6908,
      "such as ": 6909,
      "none": 6910,
      "7,6,": 6911,
      "occup": 6912,
      "directions ": 6913,
      "puzz": 6914,
      "containing the ": 6915,
      "Calculation**: We ": 6916,
      "increase ": 6917,
      "position of the ": 6918,
      "remains ": 6919,
      "connection": 6920,
      "singly-": 6921,
      "spaces.\r\n": 6922,
      "powers of ": 6923,
      "[1,2,3,4,": 6924,
      "values\r\n": 6925,
      "ensure the ": 6926,
      "dy\r\n": 6927,
      "extend": 6928,
      "product is ": 6929,
      "descend": 6930,
      "num in enumerate(": 6931,
      "                for j in range(": 6932,
      "chocol": 6933,
      "suffix_": 6934,
      "covered ": 6935,
      "courses ": 6936,
      "partition the ": 6937,
      "otherwise ": 6938,
      "non-empty sequence of ": 6939,
      "Search": 6940,
      "DP table ": 6941,
      "nums[i])\r\n": 6942,
      "LCM": 6943,
      "Return the minimum possible ": 6944,
      "Binary Search ": 6945,
      "Prefix": 6946,
      "message": 6947,
      "Base Case": 6948,
      "x and y ": 6949,
      ": List[List[int]]) -> List[int]:\r\n": 6950,
      "greatest common divisor ": 6951,
      "removal": 6952,
      "redundant calculations.\r\n": 6953,
      "Given the root of a binary tree, ": 6954,
      "Height": 6955,
      "ui, vi": 6956,
      "                left = mid + 1\r\n": 6957,
      "front ": 6958,
      "To solve this problem efficiently": 6959,
      "asteroid": 6960,
      "certain ": 6961,
      "        directions = [": 6962,
      "34": 6963,
      "5 - ": 6964,
      "8],[": 6965,
      "Len": 6966,
      "Zer": 6967,
      "[start": 6968,
      "[3,4,": 6969,
      "]  # ": 6970,
      "`p": 6971,
      "i):\r\n": 6972,
      "k) ": 6973,
      "pizz": 6974,
      "r in range(": 6975,
      "arm": 6976,
      "art": 6977,
      "tition": 6978,
      "stor ": 6979,
      "along ": 6980,
      "of any ": 6981,
      "of this ": 6982,
      "cher": 6983,
      "see ": 6984,
      "to get the ": 6985,
      "to keep track of ": 6986,
      "cook": 6987,
      "] <= ": 6988,
      "put:": 6989,
      "diame": 6990,
      "or a ": 6991,
      "- Choose ": 6992,
      "for any ": 6993,
      "= [1,2,": 6994,
      "minus the ": 6995,
      "ed:\r\n": 6996,
      "        # We ": 6997,
      "Explanation: \"": 6998,
      "all pairs of ": 6999,
      "node)\r\n": 7000,
      "s the same ": 7001,
      "(self.": 7002,
      "word)\r\n": 7003,
      "tastines": 7004,
      "        return dp[": 7005,
      "moves\r\n": 7006,
      "            # Try ": 7007,
      "This solution sorts the ": 7008,
      "] = root": 7009,
      "ever ": 7010,
      "number, ": 7011,
      "\"a\", ": 7012,
      "find the maximum ": 7013,
      "word in word": 7014,
      "        def count_": 7015,
      "indices of ": 7016,
      "cells are ": 7017,
      "costs ": 7018,
      "2] -> ": 7019,
      "column\r\n": 7020,
      "following way": 7021,
      "determines the ": 7022,
      ") - 1\r\n": 7023,
      "help ": 7024,
      "define a ": 7025,
      "combination ": 7026,
      "input list ": 7027,
      "parent[root": 7028,
      "This solution uses a sliding window ": 7029,
      "To solve this problem, we can use ": 7030,
      "add it to the ": 7031,
      "indices\r\n": 7032,
      "squares ": 7033,
      "'1' ": 7034,
      "'0' ": 7035,
      "lexicographical ": 7036,
      "palindromes ": 7037,
      "absolute difference ": 7038,
      "        dp = [0] ": 7039,
      "connecting ": 7040,
      "Perform ": 7041,
      "            # Check if the current ": 7042,
      "# Definition for ": 7043,
      "Distance ": 7044,
      "ListNode:\r\n": 7045,
      "alphabet ": 7046,
      "is defined as the ": 7047,
      "Hence, the answer is ": 7048,
      "Minimum ": 7049,
      "2 <= n <= 105\r\n": 7050,
      "earliest ": 7051,
      "        while left < right:\r\n": 7052,
      "test cases are ": 7053,
      "with memoization to ": 7054,
      "space complexity is ": 7055,
      "To solve the problem of finding the ": 7056,
      "        queue = deque([": 7057,
      "immediately ": 7058,
      "uf.": 7059,
      "0).\r\n": 7060,
      "0]], ": 7061,
      "Pop": 7062,
      "RR": 7063,
      "T ": 7064,
      "Un": 7065,
      "XOR": 7066,
      "]):\r\n": 7067,
      "cry": 7068,
      "game": 7069,
      "n ": 7070,
      "instea": 7071,
      "ans": 7072,
      "= {}\r\n": 7073,
      "reserv": 7074,
      ": \"": 7075,
      "is used ": 7076,
      "rout": 7077,
      "            right_": 7078,
      "dir": 7079,
      "difficul": 7080,
      "Expl": 7081,
      "units ": 7082,
      "es that ": 7083,
      ") of the ": 7084,
      "ole ": 7085,
      "                count += ": 7086,
      "100,": 7087,
      "Inter": 7088,
      "for every ": 7089,
      "fill ": 7090,
      "oton": 7091,
      "> max_": 7092,
      "        # Calculate ": 7093,
      "0 if ": 7094,
      "finding ": 7095,
      "List[List[str]": 7096,
      "Consi": 7097,
      "][0] ": 7098,
      "while the ": 7099,
      "string `s` ": 7100,
      "words\r\n": 7101,
      "word1 = ": 7102,
      "You need to ": 7103,
      "first two ": 7104,
      "row][col": 7105,
      "current number ": 7106,
      "index `i": 7107,
      "where edges[i] = [": 7108,
      "which is a ": 7109,
      "), the ": 7110,
      "Input: nums = [1,1,": 7111,
      "characters\r\n": 7112,
      "bus ": 7113,
      "differences": 7114,
      "Output: [[1,": 7115,
      "nums[i] + ": 7116,
      "divided ": 7117,
      "divided by ": 7118,
      "[0] * n for _ in range(": 7119,
      ". It uses a ": 7120,
      "after removing ": 7121,
      "longest_": 7122,
      "[2,2,": 7123,
      "compute ": 7124,
      "1. **Graph ": 7125,
      "matched ": 7126,
      "iterates through each ": 7127,
      "1 <= nums.length <= 1000\r\n": 7128,
      "Dig": 7129,
      "#         self.next = ": 7130,
      "Subtra": 7131,
      "closing ": 7132,
      "[1])\r\n": 7133,
      "above shows the ": 7134,
      "distance\r\n": 7135,
      "1,0,1,": 7136,
      "fuel ": 7137,
      "indices.\r\n": 7138,
      "correspond": 7139,
      "'1's ": 7140,
      "'0'": 7141,
      "Choose the ": 7142,
      "mana ": 7143,
      "achieve the ": 7144,
      "            # Check if the ": 7145,
      "for _ in range(n)]\r\n": 7146,
      "# class ListNode:\r\n": 7147,
      "Moves": 7148,
      "Trie": 7149,
      "s. It then ": 7150,
      "in-place ": 7151,
      "converts the ": 7152,
      "intersection ": 7153,
      "dp array ": 7154,
      "is defined as ": 7155,
      "total cost is ": 7156,
      "This code defines a ": 7157,
      "Recursively ": 7158,
      "accordingly.\r\n": 7159,
      "boole": 7160,
      "modulo \\(10^9 + 7\\).\r\n": 7161,
      "Depth-First Search ": 7162,
      "Mark the ": 7163,
      "mutation": 7164,
      "bulb": 7165,
      "        left = 0\r\n": 7166,
      "maximum and minimum ": 7167,
      "            mid = (left + right) // 2\r\n": 7168,
      "We'll ": 7169,
      "singly-linked list.\r\n": 7170,
      "# Definition for singly-linked list.\r\n": 7171,
      "(a ": 7172,
      "). The ": 7173,
      "+1": 7174,
      ".\"],[\"": 7175,
      "2\",\"": 7176,
      "36": 7177,
      "5.": 7178,
      "7].\r\n": 7179,
      "SC": 7180,
      "Sh": 7181,
      "Set": 7182,
      "[b": 7183,
      "`start": 7184,
      "`(i, j": 7185,
      "bf": 7186,
      "bran": 7187,
      "i] ": 7188,
      "pon": 7189,
      "s[i][j] ": 7190,
      "s:\\r\r\n": 7191,
      "t_": 7192,
      "y)\r\n": 7193,
      "recor": 7194,
      "in which ": 7195,
      "- \"": 7196,
      "- Swap ": 7197,
      "account": 7198,
      "acces": 7199,
      "m - 1, ": 7200,
      "The second ": 7201,
      "Instea": 7202,
      "Output: 4": 7203,
      "lose": 7204,
      "number that ": 7205,
      "0 degre": 7206,
      "[i] != ": 7207,
      "[i] <= 105\r\n": 7208,
      "come ": 7209,
      "with no ": 7210,
      "                    dp[i][j] = ": 7211,
      "sibility ": 7212,
      "below ": 7213,
      "        return self.": 7214,
      "-1], ": 7215,
      "\", k = 2\r\n": 7216,
      "0, 0, ": 7217,
      "idx": 7218,
      "sequence.\r\n": 7219,
      "] = 0\r\n": 7220,
      "ood": 7221,
      "green ": 7222,
      "with the given ": 7223,
      "Output: [[": 7224,
      "result is the ": 7225,
      "probability ": 7226,
      "target_": 7227,
      "function `": 7228,
      "complement ": 7229,
      "heap\r\n": 7230,
      "non-increasing ": 7231,
      "starting point ": 7232,
      "at the end": 7233,
      "Input: n = 1\r\n": 7234,
      "zero_": 7235,
      "` to keep track of the ": 7236,
      "queries[i] = [": 7237,
      "1 <= n <= 100\r\n": 7238,
      "namic Pro": 7239,
      "strings word": 7240,
      "'a', '": 7241,
      "query is ": 7242,
      "construct ": 7243,
      "i and j ": 7244,
      "occur ": 7245,
      "In the second ": 7246,
      "filter": 7247,
      "(0, 0) ": 7248,
      "starts at ": 7249,
      "any number of times:\r\n": 7250,
      "inclusive ": 7251,
      ". In one ": 7252,
      "        # Step 1: ": 7253,
      "peak": 7254,
      "_sum = sum(": 7255,
      "lcm": 7256,
      "necessary ": 7257,
      "Here's the implementation of the above approach:\r\n": 7258,
      "ugly ": 7259,
      "belong": 7260,
      "priority queue ": 7261,
      "set = set(": 7262,
      "Here's the complete solution:\r\n": 7263,
      "fewer than ": 7264,
      "ological ": 7265,
      "time complexity of this solution is ": 7266,
      "dx, dy in ": 7267,
      "Dynamic Pro": 7268,
      "neither ": 7269,
      "Depth-First Search (DFS": 7270,
      "Dynamic Program": 7271,
      "'?": 7272,
      "(1 ": 7273,
      "(arr": 7274,
      "*= ": 7275,
      ". \r\n": 7276,
      "0. ": 7277,
      "6]]\r\n": 7278,
      ":** ": 7279,
      "At the ": 7280,
      "Dur": 7281,
      "Sk": 7282,
      "W\",\"": 7283,
      "]) -> ": 7284,
      "c.\r\n": 7285,
      "card ": 7286,
      "gir": 7287,
      "q = ": 7288,
      "sal": 7289,
      "s)):\r\n": 7290,
      " <= ": 7291,
      "thi": 7292,
      "= 3\r\n": 7293,
      "sters ": 7294,
      "nums of ": 7295,
      "chun": 7296,
      "ded": 7297,
      "er is ": 7298,
      "among the ": 7299,
      "an odd ": 7300,
      "itation": 7301,
      "of the approach:\r\n": 7302,
      "whole ": 7303,
      "` class ": 7304,
      "        # Re": 7305,
      "        # Count ": 7306,
      "each character ": 7307,
      "forward": 7308,
      "char_count[": 7309,
      "ire ": 7310,
      "all numbers ": 7311,
      "nodes, ": 7312,
      "s, and the ": 7313,
      "ending_": 7314,
      "t = 0\r\n": 7315,
      "strings.\r\n": 7316,
      "strings are ": 7317,
      "\" can be ": 7318,
      "part of ": 7319,
      "rows and ": 7320,
      "**: Finally": 7321,
      "idx ": 7322,
      "), which is ": 7323,
      "us_": 7324,
      "no two ": 7325,
      "no such ": 7326,
      "pairs\r\n": 7327,
      "element of the ": 7328,
      "elements within ": 7329,
      "represented by a ": 7330,
      "Input: nums = [1,3,": 7331,
      ", the answer is ": 7332,
      "greedy ": 7333,
      "with the minimum ": 7334,
      "stack\r\n": 7335,
      "\"aba": 7336,
      "rooted at ": 7337,
      "dog": 7338,
      "sum of a ": 7339,
      "word = \"": 7340,
      ". It keeps track of the ": 7341,
      "integers in ": 7342,
      "cells.\r\n": 7343,
      "start + ": 7344,
      "1) + ": 7345,
      "removes ": 7346,
      "Input: n = 2\r\n": 7347,
      "next=None):\r\n": 7348,
      "day.\r\n": 7349,
      "following rules:\r\n": 7350,
      "root of the ": 7351,
      "mid):\r\n": 7352,
      "English letters.\r\n": 7353,
      "dp[j": 7354,
      "exists a ": 7355,
      "shown in the ": 7356,
      "height of ": 7357,
      "-104 <= ": 7358,
      "cases ": 7359,
      "Output: 13\r\n": 7360,
      "without changing the ": 7361,
      "making the ": 7362,
      "distance, ": 7363,
      "respective ": 7364,
      "freq = ": 7365,
      "connected to ": 7366,
      "top of the ": 7367,
      "linked list": 7368,
      "        for i in range(1, n + 1):\r\n": 7369,
      "subsequences of ": 7370,
      "Answ": 7371,
      "You are given an integer array nums and ": 7372,
      "Number of ": 7373,
      "Sorting": 7374,
      "expected ": 7375,
      "seen_": 7376,
      "guaranteed to be ": 7377,
      "subtree\r\n": 7378,
      "#     def __init__(self, val=0, next=None):\r\n": 7379,
      "queries = [[0,": 7380,
      "= [0] * ": 7381,
      "Length ": 7382,
      "chair": 7383,
      "above": 7384,
      "Index": 7385,
      "processing all ": 7386,
      "prefer": 7387,
      "Alice's ": 7388,
      "a and b ": 7389,
      "This solution uses dynamic programming to solve the problem": 7390,
      "plit the ": 7391,
      "favorite": 7392,
      "Charac": 7393,
      "significant ": 7394,
      "max-heap ": 7395,
      "}, {": 7396,
      "(nx, ny": 7397,
      "paired ": 7398,
      "langu": 7399,
      "sqrt": 7400,
      "occupi": 7401,
      "#         self.next = next\r\n": 7402,
      "\"\\r\r\n": 7403,
      "'(": 7404,
      "++": 7405,
      "1\", \"": 7406,
      "12.\r\n": 7407,
      "3), (": 7408,
      "6. ": 7409,
      "6].\r\n": 7410,
      "7]]\r\n": 7411,
      "Bar": 7412,
      "FF": 7413,
      "Right": 7414,
      "[3], ": 7415,
      "`t": 7416,
      "bro": 7417,
      "ca": 7418,
      "c in range(": 7419,
      "ef ": 7420,
      "fits ": 7421,
      "gar": 7422,
      "i.e. ": 7423,
      "l = ": 7424,
      "q.append(": 7425,
      "s from the ": 7426,
      "recur": 7427,
      "along the ": 7428,
      "is [": 7429,
      "semi": 7430,
      "del": 7431,
      "cover ": 7432,
      "            current = ": 7433,
      "if you ": 7434,
      "The longest ": 7435,
      "frog ": 7436,
      "` pointer ": 7437,
      "k + 1):\r\n": 7438,
      "preorder": 7439,
      "edu": 7440,
      "        # dp": 7441,
      ". The `dp` ": 7442,
      "arrays.\r\n": 7443,
      "s = {": 7444,
      "3 -> ": 7445,
      "moves.\r\n": 7446,
      "current index ": 7447,
      "current element ": 7448,
      "current character ": 7449,
      "you must ": 7450,
      "has length ": 7451,
      "0 <= ai, b": 7452,
      "s and then ": 7453,
      "Input: nums = [2,3,": 7454,
      "            return count\r\n": 7455,
      "follows the ": 7456,
      "j] + ": 7457,
      "tree and ": 7458,
      "for the next ": 7459,
      "indices of the ": 7460,
      "order to ": 7461,
      "range of ": 7462,
      "1) / ": 7463,
      ".length <= 50\r\n": 7464,
      "path\r\n": 7465,
      "`nums`.\r\n": 7466,
      "node.val ": 7467,
      "answer\r\n": 7468,
      "Return an integer ": 7469,
      "print": 7470,
      "aaaa": 7471,
      "s of the same ": 7472,
      "there is an edge between ": 7473,
      "timestamp": 7474,
      "closed ": 7475,
      "some number of ": 7476,
      "This solution uses a depth-first search (DFS) ": 7477,
      "[j - ": 7478,
      "2,2,2,2,": 7479,
      "1 <= nums[i] <= 105\r\n": 7480,
      "prime number ": 7481,
      "True`": 7482,
      "column.\r\n": 7483,
      "simply ": 7484,
      "        for i in range(1, len(": 7485,
      ". The `dfs` function ": 7486,
      "        return max_length\r\n": 7487,
      "        result = [": 7488,
      "initialize a ": 7489,
      "char in enumerate(": 7490,
      "so_": 7491,
      "k-th ": 7492,
      "mapping ": 7493,
      "Increment the ": 7494,
      "stamp ": 7495,
      "        # Step 2: ": 7496,
      "LCA ": 7497,
      "list(range(": 7498,
      "leveraging the ": 7499,
      "        ans = []\r\n": 7500,
      "Key": 7501,
      "quality ": 7502,
      "finish the ": 7503,
      "xor_": 7504,
      "stair ": 7505,
      "Here's the implementation of the solution:\r\n": 7506,
      "In one operation, you can ": 7507,
      "nums1 and nums2 ": 7508,
      "2 * 105\r\n": 7509,
      "together": 7510,
      "Create a ": 7511,
      "        i = 0\r\n": 7512,
      ".items():\r\n": 7513,
      "        for u, v in ": 7514,
      "        \"\"\"\r\n": 7515,
      "sandwi": 7516,
      "brok": 7517,
      "\"]], ": 7518,
      "(i, ": 7519,
      "): ": 7520,
      ")))\r\n": 7521,
      ".val": 7522,
      "2\"\r\n": 7523,
      "2. We ": 7524,
      "5. ": 7525,
      "5) ": 7526,
      "88": 7527,
      "ID ": 7528,
      "Te": 7529,
      "Vi": 7530,
      "Word ": 7531,
      "]`.\r\n": 7532,
      "a.\r\n": 7533,
      "after": 7534,
      "edi": 7535,
      "ham": 7536,
      "kth": 7537,
      "min ": 7538,
      "maliz": 7539,
      "mirr": 7540,
      "plet": 7541,
      "spre": 7542,
      "s' ": 7543,
      "wra": 7544,
      "}.\r\n": 7545,
      "        left_": 7546,
      "s into ": 7547,
      "= False\r\n": 7548,
      "restaur": 7549,
      "            prefix_sum": 7550,
      "ing it ": 7551,
      ". When ": 7552,
      "ated by ": 7553,
      "Thus, the ": 7554,
      "an integer": 7555,
      "len = ": 7556,
      "- For ": 7557,
      "Input: num": 7558,
      "` (": 7559,
      "k - 1": 7560,
      "subseq": 7561,
      "length += 1\r\n": 7562,
      "mod ": 7563,
      "        # Process ": 7564,
      "in the given ": 7565,
      "array nums ": 7566,
      "array becomes ": 7567,
      "as we ": 7568,
      "share ": 7569,
      "ship": 7570,
      "Explanation: All ": 7571,
      "with each ": 7572,
      "low = ": 7573,
      "nodes\r\n": 7574,
      "\",\"d": 7575,
      ". The resulting ": 7576,
      "which the ": 7577,
      "bet": 7578,
      "bean": 7579,
      "count.\r\n": 7580,
      "sum + ": 7581,
      ", we have ": 7582,
      "traver": 7583,
      "-1],[": 7584,
      "3 (": 7585,
      "ical ": 7586,
      "0, 1, and ": 7587,
      "so return ": 7588,
      "lengths ": 7589,
      "lengths of ": 7590,
      "points to ": 7591,
      "] = 1\r\n": 7592,
      "creator": 7593,
      "will always ": 7594,
      "s that have ": 7595,
      "+ 1)]\r\n": 7596,
      "representation of the ": 7597,
      "s and t ": 7598,
      "s[i] != ": 7599,
      "contain the ": 7600,
      "numbers that ": 7601,
      "divides ": 7602,
      "direct ": 7603,
      "word in the ": 7604,
      "contains a ": 7605,
      "score = ": 7606,
      "ust the ": 7607,
      "2],[4,": 7608,
      "` and `nums2": 7609,
      "adds ": 7610,
      "[1, 2, 3, ": 7611,
      "Return an integer array ": 7612,
      "condition.\r\n": 7613,
      "decrement": 7614,
      "operation on ": 7615,
      "clean": 7616,
      "Valid": 7617,
      "        # Com": 7618,
      "signed ": 7619,
      "off ": 7620,
      "**: The `": 7621,
      "This solution efficiently finds the ": 7622,
      "This solution efficiently computes the ": 7623,
      "prime_": 7624,
      "achievable ": 7625,
      "Comput": 7626,
      "that, ": 7627,
      "----": 7628,
      "ancestor ": 7629,
      "stick ": 7630,
      "candidates": 7631,
      "twice": 7632,
      "format ": 7633,
      "distribute ": 7634,
      "tive.\r\n": 7635,
      "x + dx, ": 7636,
      "Query ": 7637,
      "once, ": 7638,
      "perio": 7639,
      "health": 7640,
      "Size": 7641,
      "Input: num = \"": 7642,
      "compressed ": 7643,
      "'c' ": 7644,
      "garden": 7645,
      "rating": 7646,
      "rink": 7647,
      "trailing zero": 7648,
      "enemy ": 7649,
      ".isdigit": 7650,
      "breakdown ": 7651,
      "penal": 7652,
      ". It can be shown that ": 7653,
      "continues until ": 7654,
      "strategy ": 7655,
      "damage ": 7656,
      "bisect_left(": 7657,
      "Insert ": 7658,
      "shorter ": 7659,
      "i.e., ": 7660,
      "identical ": 7661,
      "network ": 7662,
      "elements within an array.\r\n": 7663,
      "\"]": 7664,
      "'R": 7665,
      "'d": 7666,
      "-hour ": 7667,
      "11\r\n": 7668,
      "1))\r\n": 7669,
      "1\".\r\n": 7670,
      "25 ": 7671,
      "9 and ": 7672,
      "Do ": 7673,
      "Ro": 7674,
      "Tree ": 7675,
      "[8,": 7676,
      "[2] = ": 7677,
      "_size ": 7678,
      "`m": 7679,
      "email": 7680,
      "pet": 7681,
      "s**:\r\n": 7682,
      "u ": 7683,
      "        word": 7684,
      "er\r\n": 7685,
      "= True\r\n": 7686,
      "rea": 7687,
      "reg": 7688,
      ": Optional[ListNode": 7689,
      "of node ": 7690,
      "num:\r\n": 7691,
      "ses": 7692,
      "in that ": 7693,
      "in its ": 7694,
      "- (": 7695,
      "                dfs(": 7696,
      "The only ": 7697,
      "maxSum": 7698,
      "= [0,": 7699,
      "Input: s1 = ": 7700,
      "k * ": 7701,
      "it in ": 7702,
      "most": 7703,
      "        # Use a ": 7704,
      "2 is the ": 7705,
      "i in ": 7706,
      "i > ": 7707,
      "i in the ": 7708,
      "perime": 7709,
      "[i] < ": 7710,
      "comes ": 7711,
      "experi": 7712,
      "with sum ": 7713,
      "all valid ": 7714,
      "s = [[2,": 7715,
      "bomb": 7716,
      "\",\"E": 7717,
      "                    \r\n": 7718,
      "                    else:\r\n": 7719,
      "                    result.append(": 7720,
      "end\r\n": 7721,
      "to the first ": 7722,
      "        return min(": 7723,
      ", and a ": 7724,
      "import math": 7725,
      "s = len(": 7726,
      "0, the ": 7727,
      "currently ": 7728,
      "point\r\n": 7729,
      "node and ": 7730,
      "will have ": 7731,
      "s[2] ": 7732,
      "position, ": 7733,
      "grid[i][j": 7734,
      "            return max_": 7735,
      "right -= 1\r\n": 7736,
      "s in this ": 7737,
      "binary matrix ": 7738,
      "binary search": 7739,
      "5 * 10": 7740,
      "order, ": 7741,
      "and ": 7742,
      "set\r\n": 7743,
      "matrix, ": 7744,
      "open ": 7745,
      "orig": 7746,
      "divide the ": 7747,
      "digits\r\n": 7748,
      "Counting ": 7749,
      "[0] == ": 7750,
      "        def dp(": 7751,
      "remove(": 7752,
      "grid is ": 7753,
      "next greater ": 7754,
      ". This helps in ": 7755,
      "substring is ": 7756,
      "processes ": 7757,
      "1 + 1 = ": 7758,
      "Alice win": 7759,
      "these two ": 7760,
      "s_list": 7761,
      "ally, the ": 7762,
      "handles ": 7763,
      "Also": 7764,
      "convert the ": 7765,
      ") for i in range(": 7766,
      "runs in ": 7767,
      "dictionary `": 7768,
      "transform ": 7769,
      "else 0\r\n": 7770,
      "[3,1,": 7771,
      "'0' or ": 7772,
      "price of ": 7773,
      "attemp": 7774,
      "Produ": 7775,
      "ranges ": 7776,
      "# print(sol.min": 7777,
      "                    return True\r\n": 7778,
      "num_str": 7779,
      "duration": 7780,
      "not.\r\n": 7781,
      "properties": 7782,
      "simulate the ": 7783,
      "Trie ": 7784,
      "checking if the ": 7785,
      "head: Optional[ListNode": 7786,
      "maintaining a ": 7787,
      "-2,-": 7788,
      "_count = defaultdict(int)\r\n": 7789,
      "bucket ": 7790,
      "UnionFind": 7791,
      "half of the ": 7792,
      "non-negative integer ": 7793,
      "method `": 7794,
      "floor(": 7795,
      "based on their ": 7796,
      "X\",\"X\",\"": 7797,
      "l, r": 7798,
      "pivot ": 7799,
      "        for char in s:\r\n": 7800,
      "properties of ": 7801,
      "true if the ": 7802,
      "feasible ": 7803,
      "simultaneous": 7804,
      "), (1, 0), (0, -1": 7805,
      "More form": 7806,
      "garb": 7807,
      "import math\r\n": 7808,
      "\"d": 7809,
      "(r": 7810,
      ")(": 7811,
      "20.\r\n": 7812,
      "5, and ": 7813,
      "90": 7814,
      "Can": 7815,
      "Dis": 7816,
      "HH": 7817,
      "IP": 7818,
      "List ": 7819,
      "[] ": 7820,
      "`, it ": 7821,
      "b\", ": 7822,
      "bid": 7823,
      "eu": 7824,
      "e\" ": 7825,
      "s:": 7826,
      "s\",\"": 7827,
      "vir": 7828,
      " is ": 7829,
      "s on ": 7830,
      "stu": 7831,
      "stay": 7832,
      "an index ": 7833,
      "ed from the ": 7834,
      "- [": 7835,
      "                next_": 7836,
      "action ": 7837,
      "nums[0]\r\n": 7838,
      "pos, ": 7839,
      "ghi": 7840,
      "for fre": 7841,
      "that has ": 7842,
      "that is not ": 7843,
      "= [[1,": 7844,
      "        # Try ": 7845,
      "from a ": 7846,
      "shel": 7847,
      "<= 108\r\n": 7848,
      "ceil": 7849,
      "Repe": 7850,
      "        return sum(": 7851,
      "            if index ": 7852,
      "5,7,": 7853,
      "arr = [": 7854,
      "so we ": 7855,
      "operations are ": 7856,
      "to-": 7857,
      "points, ": 7858,
      "points are ": 7859,
      "node to ": 7860,
      "node with value ": 7861,
      "phra": 7862,
      "positions of the ": 7863,
      "there exists a ": 7864,
      "pair is ": 7865,
      "elements from ": 7866,
      "s: List[str], ": 7867,
      "6,8,": 7868,
      "ories": 7869,
      "edges[i].length == 2\r\n": 7870,
      "after each ": 7871,
      "Note ": 7872,
      "sorted list of ": 7873,
      "[0,1,2,": 7874,
      "column, ": 7875,
      "day, ": 7876,
      "either the ": 7877,
      "Check the ": 7878,
      "problem.\r\n": 7879,
      "node.val": 7880,
      "heights ": 7881,
      "Return a ": 7882,
      "s[i].length == 3\r\n": 7883,
      "exists, return ": 7884,
      ", so return ": 7885,
      "lowercase English letters and ": 7886,
      "stack:\r\n": 7887,
      "`n`.\r\n": 7888,
      "nice ": 7889,
      "generates ": 7890,
      "operation on the ": 7891,
      "product of the ": 7892,
      "Once ": 7893,
      "continue ": 7894,
      "pick": 7895,
      "skip ": 7896,
      "skill ": 7897,
      "rotation": 7898,
      "rooms ": 7899,
      "        dp[0] = ": 7900,
      "area of the ": 7901,
      "bad ": 7902,
      "feature": 7903,
      "(i.e., the ": 7904,
      "reduces ": 7905,
      "algorithm to find the ": 7906,
      "false,": 7907,
      "leetcode.com": 7908,
      "5,6],[": 7909,
      "write ": 7910,
      "speed": 7911,
      "len(s)):\r\n": 7912,
      "amount of money ": 7913,
      "s consists of lowercase English letters.\r\n": 7914,
      "represents a valid ": 7915,
      "excluding the ": 7916,
      "except the ": 7917,
      "accordingly": 7918,
      "easier ": 7919,
      "same.\r\n": 7920,
      "edges = [[0,1],[0,": 7921,
      "each other.\r\n": 7922,
      "maze": 7923,
      "key=lambda x: x": 7924,
      "Follow up: Could you ": 7925,
      "operator": 7926,
      "warehouse": 7927,
      "- Take ": 7928,
      "Energ": 7929,
      "* (n + 1) for _ in range(": 7930,
      "Python code ": 7931,
      "return the answer in any order.\r\n": 7932,
      "machin": 7933,
      "so_far": 7934,
      "x + dx, y + ": 7935,
      "0'": 7936,
      "15, ": 7937,
      "2+": 7938,
      "2x": 7939,
      "3+": 7940,
      "AG": 7941,
      "After": 7942,
      "Hea": 7943,
      "Trans": 7944,
      "Wor": 7945,
      "X-": 7946,
      "gap": 7947,
      "her ": 7948,
      "i-th ": 7949,
      "mme": 7950,
      "n-1": 7951,
      "tran": 7952,
      "vo": 7953,
      "wea": 7954,
      "y:\r\n": 7955,
      "thes": 7956,
      "ins ": 7957,
      "onge": 7958,
      "ary, ": 7959,
      "is (": 7960,
      "is greater than ": 7961,
      "is equal to the ": 7962,
      "nums are ": 7963,
      "le_": 7964,
      "cham": 7965,
      "secur": 7966,
      "coprime ": 7967,
      "or false otherwise.\r\n": 7968,
      "in reverse ": 7969,
      "mag": 7970,
      "make": 7971,
      "an n x n ": 7972,
      "10-": 7973,
      "out the ": 7974,
      "Input: m = ": 7975,
      "Input: prices ": 7976,
      "neg": 7977,
      "2,5,": 7978,
      "teri": 7979,
      "ed, and ": 7980,
      "from any ": 7981,
      "from iterto": 7982,
      "2 + 1": 7983,
      "as `": 7984,
      "1 <= num": 7985,
      "1 <= n, ": 7986,
      "char = ": 7987,
      "s = [[\"": 7988,
      "                    min_": 7989,
      "word, ": 7990,
      "two pointers ": 7991,
      "integer is ": 7992,
      "        for right ": 7993,
      "-1])\r\n": 7994,
      "            if char ": 7995,
      "\", word": 7996,
      "tour": 7997,
      "created ": 7998,
      "nums[index": 7999,
      "grid[1][": 8000,
      "pairs are ": 8001,
      "0 <= k <= ": 8002,
      "prim": 8003,
      "solv": 8004,
      "            return []\r\n": 8005,
      "with the highest ": 8006,
      "Explanation: The only ": 8007,
      "earn": 8008,
      "11.\r\n": 8009,
      "digit, ": 8010,
      "subarrays of size ": 8011,
      "steps:\r\n": 8012,
      "Stud": 8013,
      "ticket": 8014,
      "cost, ": 8015,
      ".length == n - 1\r\n": 8016,
      "_count:\r\n": 8017,
      "exactly k ": 8018,
      "\"abc\"\r\n": 8019,
      ", we can use the ": 8020,
      "Suffi": 8021,
      "), (-1, 0": 8022,
      "2 <= n <= ": 8023,
      "subsequences": 8024,
      "combination of ": 8025,
      "problem constraints.\r\n": 8026,
      "Output: 11\r\n": 8027,
      "since it ": 8028,
      "using the `": 8029,
      "finish ": 8030,
      "constructed ": 8031,
      "covered by ": 8032,
      "approach to traverse the ": 8033,
      "All the values of ": 8034,
      "bitwise XOR ": 8035,
      "cache\r\n": 8036,
      "s by their ": 8037,
      "label ": 8038,
      "check if a ": 8039,
      "rounded ": 8040,
      "parenthes": 8041,
      "lamp": 8042,
      "        def dfs(node, ": 8043,
      "nums2 = [": 8044,
      "combinations of ": 8045,
      "s[j]": 8046,
      "present in ": 8047,
      "present in the ": 8048,
      "Maxim": 8049,
      "turns ": 8050,
      "GCD": 8051,
      "Queries": 8052,
      "data structure ": 8053,
      "ed by a single ": 8054,
      ". Then, it ": 8055,
      "order of the remaining ": 8056,
      "As we ": 8057,
      "inside the ": 8058,
      ". Since the answer may be ": 8059,
      "lane ": 8060,
      "Since the answer may be very large, return it modulo 109 + 7.\r\n": 8061,
      "src": 8062,
      "results of subproblem": 8063,
      "Given the constraints, a ": 8064,
      "Identif": 8065,
      "bricks ": 8066,
      "pyramid": 8067,
      "from itertools import ": 8068,
      " * ": 8069,
      "\":\r\n": 8070,
      "'#": 8071,
      "(node):\r\n": 8072,
      ")`": 8073,
      "3):\r\n": 8074,
      "Gre": 8075,
      "Squ": 8076,
      "`c": 8077,
      "b.\r\n": 8078,
      "ble ": 8079,
      "c\r\n": 8080,
      "ding": 8081,
      "htt": 8082,
      "i:\r\n": 8083,
      "il ": 8084,
      "pend": 8085,
      "s]\r\n": 8086,
      "        from collections import Counter\r\n": 8087,
      ", they ": 8088,
      "of all the ": 8089,
      "is to find the ": 8090,
      "chess": 8091,
      "deco": 8092,
      "1 with ": 8093,
      "imbalance ": 8094,
      "                stack.append(": 8095,
      "nums. ": 8096,
      "if there are ": 8097,
      "if there is ": 8098,
      "m * ": 8099,
      "1010": 8100,
      "104].\r\n": 8101,
      "The distance ": 8102,
      "five ": 8103,
      "number and ": 8104,
      "i >= ": 8105,
      "[i] > ": 8106,
      "li, ": 8107,
      "clas": 8108,
      "forbid": 8109,
      "times\r\n": 8110,
      "to the last ": 8111,
      "    def sum": 8112,
      "    def largest": 8113,
      "arrays, ": 8114,
      "        for _ in range(": 8115,
      "        for a, b in ": 8116,
      "-1`.\r\n": 8117,
      "swapping ": 8118,
      "type": 8119,
      "[1,2], ": 8120,
      "identi": 8121,
      "sequenti": 8122,
      "will not ": 8123,
      "For every ": 8124,
      "no longer ": 8125,
      "Return the total number of ": 8126,
      "A subsequence ": 8127,
      "k = 4\r\n": 8128,
      "check the ": 8129,
      "followed by ": 8130,
      "binary tree": 8131,
      "            for _ in range(": 8132,
      "5 * ": 8133,
      "root, ": 8134,
      "self.find(": 8135,
      "set bit": 8136,
      "values are ": 8137,
      "company ": 8138,
      "1 and word": 8139,
      "odd, ": 8140,
      "sum of its ": 8141,
      "step.\r\n": 8142,
      "[0] + ": 8143,
      "trim": 8144,
      "starting at ": 8145,
      "able to ": 8146,
      "substring\r\n": 8147,
      "mentor": 8148,
      "process the ": 8149,
      "update(": 8150,
      "bi\r\n": 8151,
      "\"abc\" ": 8152,
      "reaches the ": 8153,
      "ift": 8154,
      "good_": 8155,
      "(self, nums1": 8156,
      "(self, nums: List[int]) -> List[int]:\r\n": 8157,
      "* 10 + ": 8158,
      "ensure that the ": 8159,
      "allow ": 8160,
      "moves required to ": 8161,
      "equals the ": 8162,
      ". Thus, ": 8163,
      "coordinate": 8164,
      "performed ": 8165,
      "[0][0] ": 8166,
      "], k = 1\r\n": 8167,
      "You are given a 0-indexed string ": 8168,
      "boundary": 8169,
      "of ": 8170,
      "it's possible to ": 8171,
      "needed to make ": 8172,
      "apply ": 8173,
      "    def minOperation": 8174,
      "You are given two 0-indexed ": 8175,
      "cars ": 8176,
      "        if not root": 8177,
      "5,6]\r\n": 8178,
      "fact ": 8179,
      "binary representation ": 8180,
      "assigned to ": 8181,
      "Increment ": 8182,
      "Given an integer array nums": 8183,
      ".length <= 2000\r\n": 8184,
      "solve the problem:\r\n": 8185,
      "Apply the ": 8186,
      "s(self, s: str) -> int:\r\n": 8187,
      "belong ": 8188,
      "game.\r\n": 8189,
      "arrangement ": 8190,
      "`nums1` and `nums2": 8191,
      "don't ": 8192,
      "bound ": 8193,
      "making it suitable ": 8194,
      "pecific": 8195,
      "across all ": 8196,
      "Limit": 8197,
      "nx, ny = ": 8198,
      "balloon": 8199,
      "cuboid": 8200,
      "even and odd ": 8201,
      "semi-": 8202,
      "http": 8203,
      "identifi": 8204,
      "\"00": 8205,
      "(0)\r\n": 8206,
      ")) ": 8207,
      "-to-": 8208,
      ".co": 8209,
      "17,": 8210,
      "2-": 8211,
      "2000\r\n": 8212,
      "31, ": 8213,
      "9]]\r\n": 8214,
      "CD": 8215,
      "Case ": 8216,
      "Equal": 8217,
      "Lea": 8218,
      "Or": 8219,
      "With": 8220,
      "[(": 8221,
      "[l": 8222,
      "\\le": 8223,
      "]))\r\n": 8224,
      "_value": 8225,
      "`. ": 8226,
      "ai != ": 8227,
      "bright": 8228,
      "far ": 8229,
      "j+": 8230,
      "k: int, ": 8231,
      "n-": 8232,
      "ner": 8233,
      "sTo": 8234,
      "won": 8235,
      "walk ": 8236,
      "ys ": 8237,
      "        answer ": 8238,
      "        current = ": 8239,
      "s these ": 8240,
      "one, ": 8241,
      "= {": 8242,
      "f = ": 8243,
      "arti": 8244,
      "num2 ": 8245,
      "chal": 8246,
      "to `": 8247,
      "plit": 8248,
      "            node.": 8249,
      "               ": 8250,
      "a is ": 8251,
      ") + 1": 8252,
      "qui": 8253,
      "- 1 ": 8254,
      "                node = ": 8255,
      "100\r\n": 8256,
      "The array ": 8257,
      "The test cases are ": 8258,
      "for which ": 8259,
      "that have ": 8260,
      "of the second ": 8261,
      "Input: str": 8262,
      "nested ": 8263,
      "` to the ": 8264,
      "k + ": 8265,
      "1, 2, and ": 8266,
      "versa": 8267,
      "3,6,": 8268,
      "Explanation: You ": 8269,
      "by one ": 8270,
      "by considering ": 8271,
      "paint ": 8272,
      "Concaten": 8273,
      "ility": 8274,
      "one way to ": 8275,
      "presse": 8276,
      "            if is_": 8277,
      "grade": 8278,
      "startPo": 8279,
      "spell": 8280,
      "you may ": 8281,
      "idx = ": 8282,
      "points[": 8283,
      "will not be ": 8284,
      "uses the ": 8285,
      "time to ": 8286,
      "Input: nums = [3,2,": 8287,
      "1] -> ": 8288,
      "                if (": 8289,
      "graph and ": 8290,
      "j in ": 8291,
      "place": 8292,
      "numbers and ": 8293,
      "height = ": 8294,
      "remain ": 8295,
      "Ensur": 8296,
      "s(self, word": 8297,
      ".length <= 500\r\n": 8298,
      "`k` is ": 8299,
      "                        break\r\n": 8300,
      "high = ": 8301,
      "playing a ": 8302,
      "multiplic": 8303,
      "3],[0,": 8304,
      "0],[1,1,": 8305,
      "characters within a ": 8306,
      "operations on ": 8307,
      "integers, ": 8308,
      "helper": 8309,
      "row or ": 8310,
      "num % ": 8311,
      "stones = [": 8312,
      "content": 8313,
      "directional ": 8314,
      "shortest": 8315,
      "break ": 8316,
      "rectangles ": 8317,
      "mid - 1\r\n": 8318,
      "find all ": 8319,
      "            while i < ": 8320,
      "query, we ": 8321,
      "top_": 8322,
      "Valid ": 8323,
      "month": 8324,
      "# print(solution": 8325,
      "vowels ": 8326,
      "        # Initialize the result ": 8327,
      "applying ": 8328,
      "To solve this problem, we need to determine the ": 8329,
      "This solution efficiently calculates the ": 8330,
      "Convert ": 8331,
      "consist only of ": 8332,
      "duration ": 8333,
      "flip_": 8334,
      "| <= ": 8335,
      "back to ": 8336,
      "mapping": 8337,
      "lru_cache": 8338,
      "len(s) - ": 8339,
      "_count = Counter(": 8340,
      "request ": 8341,
      "receive ": 8342,
      "to the right of ": 8343,
      "necessarily ": 8344,
      "Function ": 8345,
      "threshold": 8346,
      "pieces ": 8347,
      "clockwise": 8348,
      "criteri": 8349,
      "garden ": 8350,
      "output is ": 8351,
      "arrangement": 8352,
      "from the `collection": 8353,
      "Friend": 8354,
      "fraction": 8355,
      "compati": 8356,
      "standing ": 8357,
      "refle": 8358,
      "involves ": 8359,
      "up, down, ": 8360,
      "breadth-first search (BFS) ": 8361,
      "polyg": 8362,
      "put:   ": 8363,
      "otonic ": 8364,
      "origin ": 8365,
      "parenthesis ": 8366,
      "(self, nums1: List[int], nums2": 8367,
      "\\leq ": 8368,
      "\"] ": 8369,
      "'))\r\n": 8370,
      "(or ": 8371,
      "1\" ": 8372,
      "26 ": 8373,
      "2:\\r\r\n": 8374,
      "3.": 8375,
      "43": 8376,
      "4, and ": 8377,
      "4) = ": 8378,
      "6 and ": 8379,
      "8 = ": 8380,
      "Can ": 8381,
      "IN": 8382,
      "MM": 8383,
      "Ser": 8384,
      "Wid": 8385,
      "[right": 8386,
      "]) % MOD\r\n": 8387,
      "aff": 8388,
      "fast ": 8389,
      "ies ": 8390,
      "pes": 8391,
      "p[x": 8392,
      "s.length <= 1000\r\n": 8393,
      "ted ": 8394,
      "vot": 8395,
      "war": 8396,
      "wall ": 8397,
      "        root": 8398,
      "        digit": 8399,
      "        elif ": 8400,
      "anyth": 8401,
      "rele": 8402,
      "arrows ": 8403,
      "is already ": 8404,
      "num2": 8405,
      "num2 = ": 8406,
      "utes ": 8407,
      "led": 8408,
      "set the ": 8409,
      "            i = ": 8410,
      "ated": 8411,
      "] if ": 8412,
      "in Python": 8413,
      "<= right:\r\n": 8414,
      "magical ": 8415,
      "an index i ": 8416,
      "an infinite ": 8417,
      "ed into ": 8418,
      "access ": 8419,
      "1,2]\r\n": 8420,
      "confli": 8421,
      "= [[\"": 8422,
      "Example 1:": 8423,
      "Example 2:\\r\r\n": 8424,
      "` by ": 8425,
      "> 1:\r\n": 8426,
      "in the current ": 8427,
      "abbr": 8428,
      "<= 107\r\n": 8429,
      "Constru": 8430,
      ". The result is ": 8431,
      "counts of ": 8432,
      "vice ": 8433,
      "Constraints:\\r\r\n": 8434,
      "        return answer\r\n": 8435,
      "dp[i - ": 8436,
      "3 == ": 8437,
      "you should ": 8438,
      "current\r\n": 8439,
      "s to a ": 8440,
      "s to make ": 8441,
      "s[k": 8442,
      "nums[mid": 8443,
      "s and a ": 8444,
      "Input: nums = [10,": 8445,
      "Output: [4,": 8446,
      "result is the maximum ": 8447,
      "s. \r\n": 8448,
      "sequence is ": 8449,
      "numbers up to ": 8450,
      "set for ": 8451,
      "non-decreas": 8452,
      "subarray\r\n": 8453,
      "for the given ": 8454,
      "between 1 and ": 8455,
      "consisting ": 8456,
      "after performing ": 8457,
      "substrings.\r\n": 8458,
      "5, 6, ": 8459,
      "test": 8460,
      "` to store the ": 8461,
      "node.left, ": 8462,
      "Input: s = \"0": 8463,
      ". We will ": 8464,
      "included ": 8465,
      "keys ": 8466,
      "] == 1:\r\n": 8467,
      "1 <= n <= 104\r\n": 8468,
      "conditions ": 8469,
      "second, ": 8470,
      "weight of ": 8471,
      "decrement ": 8472,
      "Output: 16\r\n": 8473,
      ". The": 8474,
      "through all possible ": 8475,
      "side of the ": 8476,
      "times, ": 8477,
      "friends ": 8478,
      "Proces": 8479,
      "leaf": 8480,
      "within the given ": 8481,
      "students ": 8482,
      "make the array ": 8483,
      "reduce the ": 8484,
      "0 + 0 + ": 8485,
      "Hence, we return ": 8486,
      "specified in the ": 8487,
      "disjoint ": 8488,
      "symb": 8489,
      "type of ": 8490,
      "in_degree": 8491,
      "arrival": 8492,
      "]` represents the ": 8493,
      "node.right:\r\n": 8494,
      ". If it does": 8495,
      "provide": 8496,
      "Move to the next ": 8497,
      "_map[": 8498,
      "Colum": 8499,
      "street": 8500,
      "strength": 8501,
      "union(": 8502,
      ":i+": 8503,
      "an adjacency list ": 8504,
      "collision": 8505,
      ", so the answer is ": 8506,
      "game, ": 8507,
      "food ": 8508,
      "start and end ": 8509,
      "luck": 8510,
      "mouse": 8511,
      "cumulative ": 8512,
      "glass ": 8513,
      "s` module to ": 8514,
      "Factor": 8515,
      "following way:\r\n": 8516,
      "Instead": 8517,
      "Character": 8518,
      "there is an edge between nodes ": 8519,
      "Do not ": 8520,
      "ai != bi\r\n": 8521,
      "characters within a string.\r\n": 8522,
      "Example 1:\\r\r\n": 8523,
      "\"y": 8524,
      "-23": 8525,
      "18,": 8526,
      "19,": 8527,
      "15.\r\n": 8528,
      "3\",\"": 8529,
      "3).\r\n": 8530,
      "4).\r\n": 8531,
      "8] ": 8532,
      "? ": 8533,
      "Drink": 8534,
      "Fi": 8535,
      "Use the ": 8536,
      "Wind": 8537,
      "[r": 8538,
      "_length ": 8539,
      "_count = 0\r\n": 8540,
      "_length = ": 8541,
      "`. It then ": 8542,
      "his ": 8543,
      "r - ": 8544,
      "s.length ": 8545,
      "scre": 8546,
      "you": 8547,
      "then": 8548,
      "inst": 8549,
      "ants ": 8550,
      "anagram": 8551,
      ": List[str]": 8552,
      "is now ": 8553,
      "            result": 8554,
      "n * ": 8555,
      "n / ": 8556,
      "a + ": 8557,
      "<= n\r\n": 8558,
      ") >= ": 8559,
      "quanti": 8560,
      "                heapq.heappush(": 8561,
      "nums2 ": 8562,
      "10].\r\n": 8563,
      "love": 8564,
      "` array ": 8565,
      "plane": 8566,
      "2 == ": 8567,
      "i * ": 8568,
      "as long ": 8569,
      "share the ": 8570,
      "<= 10^": 8571,
      "adv": 8572,
      "end:\r\n": 8573,
      "starti, ": 8574,
      "sum to ": 8575,
      "    def check": 8576,
      "len(arr": 8577,
      "is the largest ": 8578,
      "s = max(max_": 8579,
      "2, the ": 8580,
      "left.\r\n": 8581,
      "row_": 8582,
      "operation is ": 8583,
      "where 0 <= ": 8584,
      "node is a ": 8585,
      "nums[2]": 8586,
      "differ ": 8587,
      "no more ": 8588,
      "elements and ": 8589,
      "time taken ": 8590,
      "[i][1] ": 8591,
      "            return (": 8592,
      "right and ": 8593,
      "s[i] == '": 8594,
      "Chang": 8595,
      "target: int) -> int:\r\n": 8596,
      "rooted ": 8597,
      "max(dp": 8598,
      "values in ": 8599,
      "subarray sum ": 8600,
      "        if n ": 8601,
      "zero, ": 8602,
      "groups of ": 8603,
      "located ": 8604,
      "**: We use ": 8605,
      "collected ": 8606,
      "distance of ": 8607,
      "product = ": 8608,
      "in a 32-bit ": 8609,
      "frequenc": 8610,
      "updates ": 8611,
      ", return 0.\r\n": 8612,
      "Initialize ": 8613,
      "ensures that each ": 8614,
      "heights = [": 8615,
      "3,4].\r\n": 8616,
      "\"abcdef": 8617,
      "positive integers.\r\n": 8618,
      "command": 8619,
      "keys(": 8620,
      "checks each ": 8621,
      "Output: \"\"\r\n": 8622,
      "1 <= n <= 1000\r\n": 8623,
      "shown that the ": 8624,
      "seconds ": 8625,
      "float:\r\n": 8626,
      "Algorith": 8627,
      "optimally.\r\n": 8628,
      "Addition": 8629,
      "[j]:\r\n": 8630,
      "i, j, ": 8631,
      "rung": 8632,
      "visited\r\n": 8633,
      "'a'": 8634,
      "get a ": 8635,
      "shortest distance ": 8636,
      "When the ": 8637,
      "closest_": 8638,
      "head of the ": 8639,
      "head of a ": 8640,
      "within the given constraints.\r\n": 8641,
      "s[i] = [xi, yi": 8642,
      "insertion": 8643,
      "insertion ": 8644,
      "            current_sum += ": 8645,
      "(self, s: str) -> str:\r\n": 8646,
      "bisect.": 8647,
      "stit": 8648,
      "down the ": 8649,
      "sticks ": 8650,
      ".popleft()\r\n": 8651,
      "candidates ": 8652,
      "triplets ": 8653,
      "twice.\r\n": 8654,
      "        # Step 3: ": 8655,
      "It is guaranteed that ": 8656,
      "maintaining the ": 8657,
      "        # Fill ": 8658,
      "LCA": 8659,
      "[node]:\r\n": 8660,
      "rearranged to ": 8661,
      "            graph[u": 8662,
      ". So the ": 8663,
      "derived from ": 8664,
      "current_sum)\r\n": 8665,
      "labeled from 0 to n - ": 8666,
      "//= ": 8667,
      "needs to be ": 8668,
      "separated by a single ": 8669,
      "This approach ensures that we efficiently find the ": 8670,
      "endi ": 8671,
      "accumulated ": 8672,
      "frequencies ": 8673,
      "together ": 8674,
      "further ": 8675,
      "waiting ": 8676,
      "energyDrink": 8677,
      "float('-inf')\r\n": 8678,
      "Similar": 8679,
      "desired ": 8680,
      "button ": 8681,
      "Push the ": 8682,
      "A substring is a contiguous sequence of ": 8683,
      "-105 <= ": 8684,
      "non-empty sequence of elements within an array.\r\n": 8685,
      "branch": 8686,
      "Dynamic Programming ": 8687,
      "'0' or '1'.\r\n": 8688,
      "x + dx, y + dy\r\n": 8689,
      "nx, ny = x + dx, y + dy\r\n": 8690,
      "\"F": 8691,
      "(root.": 8692,
      ")\"\r\n": 8693,
      "-4,": 8694,
      "-up ": 8695,
      "13.\r\n": 8696,
      "1-indexed ": 8697,
      "3, the ": 8698,
      "Ano": 8699,
      "City ": 8700,
      "IP ": 8701,
      "LL": 8702,
      "Match": 8703,
      "Right ": 8704,
      "UR": 8705,
      "[c": 8706,
      "[2]": 8707,
      "_values": 8708,
      "`a": 8709,
      "ben": 8710,
      "bcc": 8711,
      "cru": 8712,
      "j.\r\n": 8713,
      "ki": 8714,
      "lap": 8715,
      "purch": 8716,
      "s/": 8717,
      "sn": 8718,
      "send": 8719,
      "u)\r\n": 8720,
      "well ": 8721,
      "xor ": 8722,
      " and ": 8723,
      "    - ": 8724,
      "        index": 8725,
      "ank ": 8726,
      "redi": 8727,
      "red.\r\n": 8728,
      "red, ": 8729,
      "tile ": 8730,
      "stable ": 8731,
      "ingredi": 8732,
      "is 1.\r\n": 8733,
      "num - ": 8734,
      "nums that ": 8735,
      "rob": 8736,
      "robb": 8737,
      "            node = ": 8738,
      "1 XOR ": 8739,
      "- For each ": 8740,
      "- Finally": 8741,
      "older": 8742,
      "[i-": 8743,
      "if all ": 8744,
      "m + 1):\r\n": 8745,
      "gho": 8746,
      "file": 8747,
      "that satisfies ": 8748,
      "of the given ": 8749,
      "Example 4:\r\n": 8750,
      "Input: k = ": 8751,
      "Input: word = \"": 8752,
      "` array": 8753,
      "submatri": 8754,
      "it becomes ": 8755,
      "2 or ": 8756,
      "3,1]\r\n": 8757,
      "lie ": 8758,
      "exha": 8759,
      "Explanation: No ": 8760,
      "by 1 ": 8761,
      "with one ": 8762,
      "with index ": 8763,
      "pay ": 8764,
      "\",\"1\",\"": 8765,
      ". The time complexity of this solution is ": 8766,
      "parity ": 8767,
      "row + ": 8768,
      "You are allowed to ": 8769,
      "] = max(": 8770,
      "user ": 8771,
      "from the current ": 8772,
      "Return the length of the longest ": 8773,
      "but the ": 8774,
      "small ": 8775,
      "s[i] - ": 8776,
      "Explanation: The diagram ": 8777,
      "orial ": 8778,
      "\"a\" ": 8779,
      "\"a\", \"": 8780,
      "velo": 8781,
      "nums into ": 8782,
      "queries.\r\n": 8783,
      "lines ": 8784,
      ". It first ": 8785,
      "edges: List[List[int]], ": 8786,
      "                # Update the ": 8787,
      "score = 0\r\n": 8788,
      "substrings in ": 8789,
      "removed.\r\n": 8790,
      "Input: n = 3\r\n": 8791,
      "Input: n = 6, ": 8792,
      "_count` ": 8793,
      "substring in ": 8794,
      "cell (": 8795,
      "(0, 1": 8796,
      "(0, 0, ": 8797,
      "problem's ": 8798,
      "                        queue.append(": 8799,
      "dp[m": 8800,
      "at least two ": 8801,
      "s[i])\r\n": 8802,
      "inf\r\n": 8803,
      "score, ": 8804,
      "calculates the number of ": 8805,
      "pping ": 8806,
      "at most `k` ": 8807,
      "replace the ": 8808,
      "\"bab": 8809,
      "subsequence.\r\n": 8810,
      "` is `": 8811,
      "valid\r\n": 8812,
      "moves to ": 8813,
      "(i.e. ": 8814,
      "board[i][j] ": 8815,
      "calculate the number of ": 8816,
      "For example, \"": 8817,
      "[j]\r\n": 8818,
      "picked ": 8819,
      "choose any ": 8820,
      "[0][0] = ": 8821,
      "[0, 1, ": 8822,
      "stack to ": 8823,
      "1 <= s.length <= 1000\r\n": 8824,
      "iterate through each ": 8825,
      "To solve this problem, we need to find the ": 8826,
      "Combin": 8827,
      ") == 1:\r\n": 8828,
      "At time ": 8829,
      "duplicates ": 8830,
      "DP array ": 8831,
      "count the number of valid ": 8832,
      "power_of_": 8833,
      "\"aaab": 8834,
      "having a ": 8835,
      "numeric ": 8836,
      "n - 1, -1, -1):\r\n": 8837,
      "r < ": 8838,
      "token ": 8839,
      "dp array\r\n": 8840,
      "            # If the current ": 8841,
      "dominant ": 8842,
      "Keep ": 8843,
      ".length <= 20\r\n": 8844,
      "), where n is the length of the ": 8845,
      "fast": 8846,
      "employee ": 8847,
      "employees ": 8848,
      "<= nums[i] <= 109\r\n": 8849,
      "ans += ": 8850,
      "0 <= nx < ": 8851,
      "0 <= ny < ": 8852,
      "dictionary\r\n": 8853,
      "Divi": 8854,
      "normaliz": 8855,
      "edges = [[0,1],[1,": 8856,
      "Here's a step-by-step approach to ": 8857,
      "top-left ": 8858,
      "Optional[ListNode]:\r\n": 8859,
      "doesn't ": 8860,
      "A subarray is a contiguous non-empty sequence of elements within an array.\r\n": 8861,
      "rovert": 8862,
      "vertices ": 8863,
      "cherri": 8864,
      "dx, dy in directions:\r\n": 8865,
      "without changing the order of the remaining ": 8866,
      "Return an integer denoting the ": 8867,
      "        if not root:\r\n": 8868,
      "Another ": 8869,
      "'-": 8870,
      "(i + 1": 8871,
      "28": 8872,
      "21,": 8873,
      "2) and ": 8874,
      "3-": 8875,
      "4 = 1": 8876,
      "6 - ": 8877,
      "74": 8878,
      "Mer": 8879,
      "Mat": 8880,
      "Sm": 8881,
      "Sort ": 8882,
      "X = ": 8883,
      "[-1, ": 8884,
      "_str": 8885,
      "_count += 1\r\n": 8886,
      "_traversal": 8887,
      "`d": 8888,
      "`\r\n": 8889,
      "`right` ": 8890,
      "a\"": 8891,
      "bon": 8892,
      "bus": 8893,
      "j:\r\n": 8894,
      "ker ": 8895,
      "s1, ": 8896,
      "ts to ": 8897,
      "ve, ": 8898,
      "w in ": 8899,
      "x2, y": 8900,
      "        g": 8901,
      "        last_": 8902,
      "        num_": 8903,
      "s consists only of lowercase English letters.\r\n": 8904,
      "= 2, ": 8905,
      "rev": 8906,
      "read ": 8907,
      "stk": 8908,
      "y == ": 8909,
      ": List[str], ": 8910,
      "is equal to ": 8911,
      "chr": 8912,
      "seat ": 8913,
      "plot": 8914,
      "            n = len(": 8915,
      "            stack.append(": 8916,
      ". However, ": 8917,
      "] >= ": 8918,
      "unmarked ": 8919,
      "matic": 8920,
      "ed and ": 8921,
      "                self.": 8922,
      " = {": 8923,
      "that can ": 8924,
      "Input: a = ": 8925,
      "number to ": 8926,
      "ely.\r\n": 8927,
      "apple ": 8928,
      "0,1]\r\n": 8929,
      "        # Pre": 8930,
      "        # Traverse the ": 8931,
      "0 < ": 8932,
      "[i] represents the ": 8933,
      "self-": 8934,
      "independ": 8935,
      "cted": 8936,
      "Explanation: After ": 8937,
      "to the same ": 8938,
      "solution.\r\n": 8939,
      ", and we ": 8940,
      ", and so ": 8941,
      "key.\r\n": 8942,
      "the ": 8943,
      "max_sum": 8944,
      "first k ": 8945,
      "        for word in word": 8946,
      "strings, ": 8947,
      "-1][": 8948,
      "\" --> ": 8949,
      "3 is the ": 8950,
      "sword ": 8951,
      "            # Expl": 8952,
      "minimum value ": 8953,
      "operation:\r\n": 8954,
      "sorted by ": 8955,
      "can be placed ": 8956,
      "which represents the ": 8957,
      "results in the ": 8958,
      "is a list of ": 8959,
      "time is ": 8960,
      "A valid ": 8961,
      "j == ": 8962,
      "appropri": 8963,
      ", it increments the ": 8964,
      "numbers from 1 to ": 8965,
      "\"abac": 8966,
      "set `": 8967,
      "root = ": 8968,
      "forms a ": 8969,
      "x, y in ": 8970,
      "ag ": 8971,
      "cells in the ": 8972,
      "start of the ": 8973,
      ". This ensures that the ": 8974,
      "distance is ": 8975,
      "paths from ": 8976,
      "`nums[i]": 8977,
      "prefix and ": 8978,
      "we can achieve ": 8979,
      "2 + 1 = ": 8980,
      "distinct integers ": 8981,
      "there is only one ": 8982,
      "Dict": 8983,
      "child, ": 8984,
      "Subarray ": 8985,
      "        max_length = 0\r\n": 8986,
      "pattern = ": 8987,
      "meaning ": 8988,
      "\"bbb": 8989,
      "Counter()\r\n": 8990,
      "board.\r\n": 8991,
      "previously ": 8992,
      "without any ": 8993,
      "odd and ": 8994,
      "coordinat": 8995,
      "continuous ": 8996,
      "group is ": 8997,
      "pick the ": 8998,
      "1 <= nums[i] <= 100\r\n": 8999,
      "4],[1,": 9000,
      "ed as follows:\r\n": 9001,
      "price = ": 9002,
      "a, b, c": 9003,
      "palindromic": 9004,
      "vowels = ": 9005,
      "required.\r\n": 9006,
      "(i, j, ": 9007,
      "grid[n": 9008,
      "achieve.\r\n": 9009,
      "Count the number of ": 9010,
      "duplicates": 9011,
      "expand": 9012,
      "into a single ": 9013,
      "First": 9014,
      "horizontalCut": 9015,
      "j < len(": 9016,
      "in the range [1, n": 9017,
      "memoization": 9018,
      "go from ": 9019,
      "robots ": 9020,
      "Total": 9021,
      "ord(c": 9022,
      "memory ": 9023,
      "period": 9024,
      ", it returns `False": 9025,
      "s, so we return ": 9026,
      "verticalCut": 9027,
      "`num` ": 9028,
      "[i - 1] == ": 9029,
      "again ": 9030,
      "quick ": 9031,
      "known ": 9032,
      "toward": 9033,
      "build a ": 9034,
      "456": 9035,
      "Given an integer n, return the ": 9036,
      "Return an array answer ": 9037,
      "stock ": 9038,
      "n + 1)]\r\n": 9039,
      "] indicates that there is an edge between nodes ": 9040,
      "Type ": 9041,
      "radius ": 9042,
      "hash map ": 9043,
      "common_": 9044,
      "record": 9045,
      "Calculation**: For each ": 9046,
      "budget": 9047,
      "-109 <= ": 9048,
      "sorted in ascending order.\r\n": 9049,
      "transformation": 9050,
      "Append the ": 9051,
      "\", s2 = \"": 9052,
      "Flip": 9053,
      "Palindrome": 9054,
      "ribbon": 9055,
      "diameter ": 9056,
      "Digit": 9057,
      ".isdigit():\r\n": 9058,
      "breakdown of the approach:\r\n": 9059,
      "More formally, ": 9060,
      "starti, endi": 9061,
      "Matri": 9062,
      "\"z": 9063,
      "(since ": 9064,
      "(start, ": 9065,
      "0])\r\n": 9066,
      "1\", ": 9067,
      "16\r\n": 9068,
      "29": 9069,
      "20 ": 9070,
      "30, ": 9071,
      "CC": 9072,
      "Fre": 9073,
      "Mon": 9074,
      "None ": 9075,
      "Split": 9076,
      "[1]\r\n": 9077,
      "_number": 9078,
      "bur": 9079,
      "citation": 9080,
      "folder": 9081,
      "i=": 9082,
      "k: int) -> List[int]:\r\n": 9083,
      "m.\r\n": 9084,
      "p, ": 9085,
      "s) and ": 9086,
      "talle": 9087,
      "        operation": 9088,
      "        right_": 9089,
      "        odd_": 9090,
      "s at ": 9091,
      "s required to ": 9092,
      "incom": 9093,
      "reve": 9094,
      "states": 9095,
      "y - ": 9096,
      "is called ": 9097,
      "num1 and ": 9098,
      "to determine the ": 9099,
      "            dfs(": 9100,
      "            next_": 9101,
      "n * (n - ": 9102,
      ". For ": 9103,
      "at_": 9104,
      "ating": 9105,
      "] > 0:\r\n": 9106,
      "or no ": 9107,
      "or trailing ": 9108,
      "- [1,": 9109,
      "img": 9110,
      "                answer": 9111,
      "nums.length <= 105\r\n": 9112,
      "m + ": 9113,
      "100 ": 9114,
      "100, ": 9115,
      "10\"\r\n": 9116,
      "The subarray ": 9117,
      "The final ": 9118,
      "that contains ": 9119,
      "Input: x = ": 9120,
      "Input: target = ": 9121,
      "return -1.\r\n": 9122,
      "preorder ": 9123,
      "        # Jo": 9124,
      "in the array.\r\n": 9125,
      "array into ": 9126,
      "iver": 9127,
      "excess ": 9128,
      "times the ": 9129,
      ". The main ": 9130,
      "range.\r\n": 9131,
      "string in ": 9132,
      "visible ": 9133,
      "import": 9134,
      "You want to ": 9135,
      "cols):\r\n": 9136,
      ", and each ": 9137,
      "rules ": 9138,
      "is the first ": 9139,
      "any of them.\r\n": 9140,
      "on key ": 9141,
      "2, -1, -1):\r\n": 9142,
      "rows):\r\n": 9143,
      "**: After ": 9144,
      "index)\r\n": 9145,
      "matter ": 9146,
      "points (": 9147,
      "users ": 9148,
      "grid, ": 9149,
      "there will be ": 9150,
      "+ 1)": 9151,
      "left child ": 9152,
      "characters of ": 9153,
      "[i][0] ": 9154,
      "3, 4, ": 9155,
      "binary array ": 9156,
      "cost += ": 9157,
      "1,2,3]\r\n": 9158,
      "5 is ": 9159,
      "oppon": 9160,
      "earn ": 9161,
      "1 and 2 ": 9162,
      "subarray of length ": 9163,
      "and the maximum ": 9164,
      "line.\r\n": 9165,
      "!= -1:\r\n": 9166,
      "tries to ": 9167,
      "Input: s = \"a": 9168,
      "Input: s = \"abcd": 9169,
      "size of ": 9170,
      "of a node ": 9171,
      "at the end of the ": 9172,
      "group\r\n": 9173,
      "day\r\n": 9174,
      "days.\r\n": 9175,
      "digit = ": 9176,
      "`nums1` ": 9177,
      "using `": 9178,
      "largest element ": 9179,
      "es = [[1,": 9180,
      "reverse the ": 9181,
      "mask\r\n": 9182,
      "exactly `k` ": 9183,
      "2 + (": 9184,
      "taking the ": 9185,
      "infected ": 9186,
      "hello": 9187,
      "overall ": 9188,
      "mark the ": 9189,
      "`, `": 9190,
      "conversion ": 9191,
      "parent[u": 9192,
      "nums1)\r\n": 9193,
      "backlog": 9194,
      "transformed ": 9195,
      "first\r\n": 9196,
      "Path ": 9197,
      "query\r\n": 9198,
      "picture ": 9199,
      "eventu": 9200,
      "'1':\r\n": 9201,
      "100].\r\n": 9202,
      "query in ": 9203,
      "1 <= s.length <= 100\r\n": 9204,
      "Input: grid = [[": 9205,
      "reversed": 9206,
      "strictly greater than ": 9207,
      "[j] + ": 9208,
      "destro": 9209,
      "5],[2,": 9210,
      "leading or trailing ": 9211,
      "overlap ": 9212,
      "].append(v)\r\n": 9213,
      "Sele": 9214,
      "duplicat": 9215,
      "edges.length == n - 1\r\n": 9216,
      "syste": 9217,
      "symme": 9218,
      "workerTimes": 9219,
      "consisting of n ": 9220,
      "An integer ": 9221,
      "children\r\n": 9222,
      "arrive ": 9223,
      "            # If we ": 9224,
      "has the same ": 9225,
      "Optional[TreeNode]:\r\n": 9226,
      "blue": 9227,
      "people who ": 9228,
      ". If it i": 9229,
      "From": 9230,
      "Letter": 9231,
      "bank": 9232,
      "11,1": 9233,
      "s[i:": 9234,
      "leaves ": 9235,
      "Initial ": 9236,
      "at a cost of ": 9237,
      "BST ": 9238,
      "Python's ": 9239,
      "memory": 9240,
      "\", k = 1\r\n": 9241,
      "difference\r\n": 9242,
      "infinity": 9243,
      "Index ": 9244,
      "an integer k, return the ": 9245,
      "        dp = [[": 9246,
      "[nx][ny": 9247,
      ". Then, ": 9248,
      "min-heap": 9249,
      "hero": 9250,
      "stack[-1]": 9251,
      "directory ": 9252,
      "merged ": 9253,
      "look ": 9254,
      "is even.\r\n": 9255,
      "generate all possible ": 9256,
      "exceeds ": 9257,
      "                right = mid\r\n": 9258,
      ". This approach ensures that the ": 9259,
      "sorted in non-decreasing order.\r\n": 9260,
      "-109 <= nums[i] <= 109\r\n": 9261,
      "goal is to ": 9262,
      "Edge ": 9263,
      "        if n == 1:\r\n": 9264,
      "folder ": 9265,
      "two-pointer technique ": 9266,
      "well-": 9267,
      ".split('": 9268,
      "video": 9269,
      "girl": 9270,
      "sandwich": 9271,
      "        # Process each ": 9272,
      "better ": 9273,
      "perimeter ": 9274,
      "Product": 9275,
      "for free.\r\n": 9276,
      "Input: prices = [": 9277,
      "Square": 9278,
      "li, ri": 9279,
      "advan": 9280,
      "'T": 9281,
      "(a": 9282,
      "(s, ": 9283,
      "(max_": 9284,
      "(4, ": 9285,
      ")\\) ": 9286,
      "-10,": 9287,
      "/a": 9288,
      "0-": 9289,
      "1/": 9290,
      "24,": 9291,
      "5)\r\n": 9292,
      "60\r\n": 9293,
      "8 - ": 9294,
      "Leet": 9295,
      "Mod": 9296,
      "Rect": 9297,
      "Set ": 9298,
      "US": 9299,
      "\\times ": 9300,
      "_len": 9301,
      "_cost": 9302,
      "bad": 9303,
      "c)\r\n": 9304,
      "evi": 9305,
      "e', '": 9306,
      "hn": 9307,
      "hom": 9308,
      "ui and ": 9309,
      "v = ": 9310,
      "x1, y": 9311,
      "yel": 9312,
      "t and ": 9313,
      "ingCost": 9314,
      "is an ": 9315,
      "nums of size ": 9316,
      "chee": 9317,
      "del ": 9318,
      "to their ": 9319,
      "ing each ": 9320,
      ". Return the ": 9321,
      "div": 9322,
      "at that ": 9323,
      "1 are ": 9324,
      "                last_": 9325,
      "ouque": 9326,
      "as:\r\n": 9327,
      "Input: word1 = ": 9328,
      "return false.\r\n": 9329,
      "it by ": 9330,
      "it is not possible to ": 9331,
      "        # This ": 9332,
      "from both ": 9333,
      "3,3], ": 9334,
      "comb": 9335,
      "indegre": 9336,
      "adher": 9337,
      "This question ": 9338,
      "\",\"F": 9339,
      "bey": 9340,
      "starti ": 9341,
      "to the target ": 9342,
      "take": 9343,
      "is the total number of ": 9344,
      "< min_": 9345,
      "< 0:\r\n": 9346,
      "s = (": 9347,
      "s = 1\r\n": 9348,
      "first character ": 9349,
      "        for r in range(": 9350,
      "strings in ": 9351,
      "strings of length ": 9352,
      "\", t = \"": 9353,
      "right)\r\n": 9354,
      "moving the ": 9355,
      "row is ": 9356,
      "current node's ": 9357,
      "**: If the ": 9358,
      "start:": 9359,
      "[1,4,": 9360,
      "[1,1,1,": 9361,
      "current.next\r\n": 9362,
      "points. ": 9363,
      "count is ": 9364,
      "count of the ": 9365,
      "creates ": 9366,
      "), it ": 9367,
      "will help ": 9368,
      "position = ": 9369,
      "from the end ": 9370,
      "has two ": 9371,
      "0 <= k ": 9372,
      "characters that ": 9373,
      "characters and ": 9374,
      "1] * ": 9375,
      "                if grid[i][j] ": 9376,
      "total cost of ": 9377,
      "right subtree ": 9378,
      "4 (": 9379,
      "4 -> ": 9380,
      "Output: [3,": 9381,
      "Output: [1]\r\n": 9382,
      "            for neighbor in graph[": 9383,
      "cost to ": 9384,
      "character to ": 9385,
      "6,6,": 9386,
      "nums[i] == ": 9387,
      "Given an m x n ": 9388,
      "        for i in range(2, ": 9389,
      "compare ": 9390,
      "rook": 9391,
      "on the same ": 9392,
      "smallest element ": 9393,
      "   - **": 9394,
      "subarrays that ": 9395,
      "subarrays with ": 9396,
      "path from the ": 9397,
      "sum of any ": 9398,
      "sum of values ": 9399,
      "stepping ": 9400,
      "[0] - ": 9401,
      "[0] * (n + 1) for _ in range(": 9402,
      "        def backtrack(": 9403,
      "order is ": 9404,
      "cells (": 9405,
      "substring.\r\n": 9406,
      "piles": 9407,
      "grid and ": 9408,
      "2] is ": 9409,
      "bit_": 9410,
      "substring of length ": 9411,
      "squir": 9412,
      "eiou": 9413,
      "either": 9414,
      "difference of ": 9415,
      "Initialize the ": 9416,
      "9,9,": 9417,
      "surroun": 9418,
      "at least k ": 9419,
      "0],[0,1,": 9420,
      "characters at ": 9421,
      "should not ": 9422,
      "iterates over each ": 9423,
      "existing ": 9424,
      "at most 2 ": 9425,
      "\\(\\text{": 9426,
      "3,2,4,": 9427,
      "mod\r\n": 9428,
      "[1].\r\n": 9429,
      "[i + 1][": 9430,
      "changed ": 9431,
      "letter in ": 9432,
      "maintain the ": 9433,
      "obtain a ": 9434,
      "sortedcontain": 9435,
      "ipul": 9436,
      "(1, 1) ": 9437,
      "smaller than the ": 9438,
      "Input: nums = [1,2,3,4]\r\n": 9439,
      "possible\r\n": 9440,
      "absolute difference between the ": 9441,
      "i - j": 9442,
      "# print(sol.count": 9443,
      "i <= n - 1\r\n": 9444,
      "reduce ": 9445,
      "elements in the array ": 9446,
      "Convert the ": 9447,
      "lamp ": 9448,
      "dp[i][j][": 9449,
      "This solution uses dynamic programming to keep track of the ": 9450,
      "        def dfs(node):\r\n": 9451,
      "        for i, num in enumerate(": 9452,
      "        for i, char in enumerate(": 9453,
      "node.right, ": 9454,
      "job ": 9455,
      "one of the following ": 9456,
      "11111111": 9457,
      "leaving ": 9458,
      "increase the ": 9459,
      "s[i][0] ": 9460,
      "satisfy the condition": 9461,
      "condition is ": 9462,
      "\", k = 3\r\n": 9463,
      "), (0, 1": 9464,
      "[i - 1][j - ": 9465,
      "to make it ": 9466,
      "in descending order\r\n": 9467,
      ") or (": 9468,
      "among all ": 9469,
      "winner ": 9470,
      "On day ": 9471,
      "explore all possible ways to ": 9472,
      "A and B ": 9473,
      "s: List[str]) -> int:\r\n": 9474,
      "guesse": 9475,
      "capital ": 9476,
      "`mid` ": 9477,
      "strictly increasing": 9478,
      "strictly increasing.\r\n": 9479,
      "gives us the ": 9480,
      "opening ": 9481,
      "s(self, nums: List[int], k: int) -> int:\r\n": 9482,
      "with n nodes ": 9483,
      "underlined ": 9484,
      "s1 and s2 ": 9485,
      "pawn": 9486,
      "Explanation: It is impossible to ": 9487,
      "scenario": 9488,
      "mentioned ": 9489,
      "ratio ": 9490,
      "quadru": 9491,
      "Zero": 9492,
      "Python code implement": 9493,
      "magic ": 9494,
      "compatib": 9495,
      "Fibon": 9496,
      "system ": 9497,
      "\". \r\n": 9498,
      "(k": 9499,
      "(node.right)\r\n": 9500,
      "-5,": 9501,
      "/b": 9502,
      "3  ": 9503,
      "3. We ": 9504,
      "4]], ": 9505,
      "55": 9506,
      "5 = 1": 9507,
      "8].\r\n": 9508,
      "9 = ": 9509,
      "@m": 9510,
      "Beca": 9511,
      "Bread": 9512,
      "Back": 9513,
      "Cor": 9514,
      "Group ": 9515,
      "ME": 9516,
      "Some ": 9517,
      "Weigh": 9518,
      "\\[": 9519,
      "\\t": 9520,
      "^= ": 9521,
      "_square": 9522,
      "`min_": 9523,
      "`SortedList": 9524,
      "buse": 9525,
      "cba": 9526,
      "date": 9527,
      "f\"": 9528,
      "hop": 9529,
      "k]": 9530,
      "latest ": 9531,
      "m: int, ": 9532,
      "n. ": 9533,
      "port": 9534,
      "q:\r\n": 9535,
      "ving ": 9536,
      "xt": 9537,
      "➝ ": 9538,
      "        col": 9539,
      "        count_": 9540,
      "s an ": 9541,
      "s can ": 9542,
      "ans[i] ": 9543,
      "= sum(": 9544,
      "ense": 9545,
      "envelo": 9546,
      "reci": 9547,
      "le-": 9548,
      "rod": 9549,
      "see the ": 9550,
      "plif": 9551,
      "ing them ": 9552,
      "rain": 9553,
      "and return the ": 9554,
      "a number ": 9555,
      "] represents the ": 9556,
      "<= 50\r\n": 9557,
      "made": 9558,
      "                j += 1\r\n": 9559,
      "nums\r\n": 9560,
      "poison": 9561,
      "m + 1)]\r\n": 9562,
      "10 and ": 9563,
      "The sum of ": 9564,
      "strong ": 9565,
      "are distinct.\r\n": 9566,
      "for i, ": 9567,
      "that appears ": 9568,
      "substit": 9569,
      "2 \r\n": 9570,
      "comment": 9571,
      "shop": 9572,
      "1 <= arr[i] ": 9573,
      "fort": 9574,
      "with their ": 9575,
      "to the total ": 9576,
      "    def remove": 9577,
      "        return (": 9578,
      "        return dp[n": 9579,
      "one of ": 9580,
      "one push ": 9581,
      ", we update the ": 9582,
      "2, 4, ": 9583,
      "possible way to ": 9584,
      "had ": 9585,
      "movement ": 9586,
      "index_": 9587,
      "            # Option ": 9588,
      "[i].length == ": 9589,
      "positions of ": 9590,
      "elements at indices ": 9591,
      "0 <= grid[i][j] ": 9592,
      "prior": 9593,
      "left subtree ": 9594,
      "Input: nums = [5,": 9595,
      ", the first ": 9596,
      "soldi": 9597,
      "with the largest ": 9598,
      "3, 5, ": 9599,
      "right child ": 9600,
      "There exists ": 9601,
      "cost = [": 9602,
      "Explanation: The figure ": 9603,
      "nums[i] < ": 9604,
      "root.\r\n": 9605,
      "corrid": 9606,
      "smallest number ": 9607,
      "doing ": 9608,
      "domain": 9609,
      "path between ": 9610,
      "        if self.": 9611,
      "starting point": 9612,
      "score of the ": 9613,
      "Input: n = 1, ": 9614,
      "grid of size ": 9615,
      "2] + ": 9616,
      "lock ": 9617,
      "You are given a positive integer ": 9618,
      "`nums` and ": 9619,
      "OR (": 9620,
      "adds the ": 9621,
      ", return -1\r\n": 9622,
      "high ": 9623,
      "height, ": 9624,
      "determined by the ": 9625,
      "2 + 2 = ": 9626,
      "may contain ": 9627,
      "i = 0 and ": 9628,
      "1 <= nums1": 9629,
      "1 <= nums[i], ": 9630,
      "considered to be ": 9631,
      "flight": 9632,
      "conditions are ": 9633,
      "as the result.\r\n": 9634,
      "weight = ": 9635,
      "This solution uses a breadth-first search (BFS) ": 9636,
      "It can be shown that the ": 9637,
      "resulting in ": 9638,
      "month ": 9639,
      ".\",\".\",\".\",\".\",\"": 9640,
      "reversed_": 9641,
      "closest": 9642,
      "if it exist": 9643,
      "[-1] ": 9644,
      "built ": 9645,
      "Main ": 9646,
      ", you must ": 9647,
      "manipul": 9648,
      "length = 1\r\n": 9649,
      "middle": 9650,
      "from collections import defaultdict, ": 9651,
      "extract": 9652,
      "palindrome(": 9653,
      "horizontally ": 9654,
      "edges = [[0,1,": 9655,
      "children.\r\n": 9656,
      "set to keep track of ": 9657,
      "binary representation": 9658,
      "Note:\r\n": 9659,
      "Output: 20\r\n": 9660,
      "checks the ": 9661,
      "count[num": 9662,
      "You are given a string s ": 9663,
      "Increase ": 9664,
      "Here's the step-by-step plan:\r\n": 9665,
      "difference between the maximum and minimum ": 9666,
      "chain ": 9667,
      "memb": 9668,
      "Note: This question ": 9669,
      "under the ": 9670,
      "Binary search ": 9671,
      "threshold ": 9672,
      "Return true if it is possible to ": 9673,
      "critical ": 9674,
      "r, n": 9675,
      "distance between two ": 9676,
      "`left` and `": 9677,
      "dummy": 9678,
      "s(self, n: int) -> int:\r\n": 9679,
      "comparing the ": 9680,
      "modify ": 9681,
      ". Therefore, ": 9682,
      "You may assum": 9683,
      "battery ": 9684,
      "            if i >= ": 9685,
      "simultaneously ": 9686,
      "here is ": 9687,
      "variables to ": 9688,
      "equivalent to ": 9689,
      ".count('": 9690,
      "gcd ": 9691,
      "trying ": 9692,
      "Input: points = [[1,": 9693,
      "around ": 9694,
      "natur": 9695,
      "ai and b": 9696,
      "bisect_right(": 9697,
      "%= MOD\r\n": 9698,
      "            for j in range(i + 1, n):\r\n": 9699,
      "threshold = ": 9700,
      "        count = Counter(": 9701,
      "To solve this problem, we can use dynamic programming ": 9702,
      "instead.\r\n": 9703,
      "difficulty ": 9704,
      "Subtract ": 9705,
      "boolean ": 9706,
      "During the ": 9707,
      "Visit": 9708,
      "Suffix": 9709,
      "Can you ": 9710,
      "in Python:\r\n": 9711,
      "symbol": 9712,
      "        for word in words:\r\n": 9713,
      "Modulo ": 9714,
      "@m.co": 9715,
      "Note: This question is the same ": 9716,
      "\".": 9717,
      "\". The ": 9718,
      "(not ": 9719,
      ",(2,": 9720,
      "-length ": 9721,
      "13, ": 9722,
      "20, ": 9723,
      "4.": 9724,
      "4), (": 9725,
      "5]], ": 9726,
      "76": 9727,
      "7 - ": 9728,
      "??": 9729,
      "He ": 9730,
      "IS": 9731,
      "Mul": 9732,
      "XX": 9733,
      "[current_": 9734,
      "_min": 9735,
      "_set": 9736,
      "_time": 9737,
      "`result": 9738,
      "ative": 9739,
      "d\"\r\n": 9740,
      "grow": 9741,
      "i+": 9742,
      "n-1 ": 9743,
      "p\",\"": 9744,
      "ring": 9745,
      "tles ": 9746,
      "x: int, ": 9747,
      "y(": 9748,
      "y\",\"": 9749,
      "|= ": 9750,
      "  \r\n": 9751,
      "though ": 9752,
      "        char": 9753,
      "        prefix_": 9754,
      "        from collections import defaultdict\r\n": 9755,
      "        m = ": 9756,
      "t in ": 9757,
      "one\r\n": 9758,
      "enever ": 9759,
      "revi": 9760,
      "stay ": 9761,
      "is divisible by ": 9762,
      "to represent the ": 9763,
      "and return ": 9764,
      ". Your ": 9765,
      "or (": 9766,
      "sition ": 9767,
      "suffici": 9768,
      ") is the ": 9769,
      ") else -1\r\n": 9770,
      "[idx": 9771,
      "nums[0..": 9772,
      "point the ": 9773,
      "m - 1": 9774,
      "1,2], ": 9775,
      "str1": 9776,
      "fif": 9777,
      "= [False] ": 9778,
      "x in range(": 9779,
      "0,3,": 9780,
      "        # Defin": 9781,
      "        # Generate ": 9782,
      "in the array": 9783,
      "in the second ": 9784,
      "from \"": 9785,
      "each node ": 9786,
      "number of times ": 9787,
      "0 for ": 9788,
      "[i] <= 1000\r\n": 9789,
      "3,0,": 9790,
      "exces": 9791,
      "with 0 ": 9792,
      "s = [2,": 9793,
      "nodes and ": 9794,
      "nodes in ": 9795,
      "addition ": 9796,
      "final": 9797,
      "s, each ": 9798,
      "range\r\n": 9799,
      "Replace the ": 9800,
      "viol": 9801,
      "    def smallest": 9802,
      "ill the ": 9803,
      "array. ": 9804,
      "elements. ": 9805,
      "4,8,": 9806,
      "len(queue": 9807,
      "[0].\r\n": 9808,
      ", we check ": 9809,
      ", we need ": 9810,
      "            if i == ": 9811,
      "\", t = ": 9812,
      "trees": 9813,
      "ically ": 9814,
      "moved ": 9815,
      "current window ": 9816,
      "current window": 9817,
      "            # The ": 9818,
      "s[index": 9819,
      "s[1] = ": 9820,
      "nums[:": 9821,
      "grid)\r\n": 9822,
      "from the original ": 9823,
      "has exactly ": 9824,
      "have an ": 9825,
      "left or ": 9826,
      "green": 9827,
      "following the ": 9828,
      "            for num in ": 9829,
      "cost = 0\r\n": 9830,
      "Explanation: The following ": 9831,
      "target)\r\n": 9832,
      "sets of ": 9833,
      "digits of ": 9834,
      "steps to ": 9835,
      "Step": 9836,
      "starting with ": 9837,
      "seri": 9838,
      "substrings\r\n": 9839,
      "substrings that ": 9840,
      "prefixes ": 9841,
      "                return -1\r\n": 9842,
      "avg": 9843,
      "**: We first ": 9844,
      "more efficient ": 9845,
      "`nums`, ": 9846,
      "1 + 2 = ": 9847,
      "in a single ": 9848,
      "node.val)\r\n": 9849,
      "', or ": 9850,
      "Alice has ": 9851,
      "spaces": 9852,
      "bik": 9853,
      "0],[1,0,": 9854,
      "reached ": 9855,
      "occurrences": 9856,
      "aries ": 9857,
      "lowercase English letters ": 9858,
      "row of ": 9859,
      "marb": 9860,
      "replacement ": 9861,
      "even indices ": 9862,
      "consists of only ": 9863,
      "does not exceed ": 9864,
      "`i`": 9865,
      "handled ": 9866,
      "direction.\r\n": 9867,
      "completely ": 9868,
      "edge between ": 9869,
      "board[r][c": 9870,
      "problem statement": 9871,
      "converting ": 9872,
      "[j], ": 9873,
      ": int) -> List[List[int]]:\r\n": 9874,
      "letter in the ": 9875,
      "remove all ": 9876,
      "dictionary to keep track of the ": 9877,
      "resulting string ": 9878,
      "resulting array is ": 9879,
      "            while stack and ": 9880,
      "2 and 3 ": 9881,
      "count the frequency of each ": 9882,
      "square.\r\n": 9883,
      "sky": 9884,
      "logarith": 9885,
      "True:\r\n": 9886,
      "columns ": 9887,
      "level\r\n": 9888,
      "iterate over each ": 9889,
      "        # Calculate the number of ": 9890,
      "                for i in range(": 9891,
      "split into ": 9892,
      "efficient given the constraints.\r\n": 9893,
      "absolute difference between ": 9894,
      "that can be derived from ": 9895,
      "leave ": 9896,
      "pushes ": 9897,
      "Permutation": 9898,
      "ccc": 9899,
      "map(": 9900,
      "        # Create ": 9901,
      "        # If no ": 9902,
      "Value ": 9903,
      "lexicographically largest ": 9904,
      "(i, j) ": 9905,
      "explore": 9906,
      "\" -> one push ": 9907,
      "layer": 9908,
      "shows ": 9909,
      "size):\r\n": 9910,
      "helps ": 9911,
      "Distin": 9912,
      "Given a string s, return the ": 9913,
      ". In other words, ": 9914,
      "converted to ": 9915,
      "Two": 9916,
      "dp(i + 1, ": 9917,
      "        # Dire": 9918,
      "Time = [": 9919,
      "rearrange the ": 9920,
      " = [0] * n\r\n": 9921,
      "modulo": 9922,
      "sorting step": 9923,
      "there's ": 9924,
      "sensor": 9925,
      "know the ": 9926,
      "s(self, s: str, ": 9927,
      ". The key idea is to ": 9928,
      "maze ": 9929,
      "minimum number of operations required to ": 9930,
      "Assum": 9931,
      "**: This function ": 9932,
      "project ": 9933,
      "        return ''.join(result)\r\n": 9934,
      "Here is the implementation of the above approach:\r\n": 9935,
      "'*' ": 9936,
      "too large, return it modulo 109 + 7.\r\n": 9937,
      "identify ": 9938,
      "(possibly none": 9939,
      "deleting some or no ": 9940,
      "copy ": 9941,
      "Integer": 9942,
      "bfs(": 9943,
      "0 degrees ": 9944,
      "Depth-First Search (DFS) to ": 9945,
      "Skip": 9946,
      "char_count[char": 9947,
      "language": 9948,
      "        for u, v in edges:\r\n": 9949,
      "reduces the ": 9950,
      "forbidden": 9951,
      "The test cases are generated ": 9952,
      "vice versa": 9953,
      "Frequen": 9954,
      "Breadth-First Search ": 9955,
      "Multi": 9956,
      "\" -> one push on key ": 9957,
      "(in ": 9958,
      "(word": 9959,
      "0) = ": 9960,
      "16 ": 9961,
      "2/": 9962,
      "2])\r\n": 9963,
      "2`.\r\n": 9964,
      "59": 9965,
      "5) = ": 9966,
      "8 and ": 9967,
      "At": 9968,
      "ASC": 9969,
      "Du": 9970,
      "Ham": 9971,
      "Nor": 9972,
      "Range": 9973,
      "WE": 9974,
      "Way": 9975,
      "[10,": 9976,
      "[4], ": 9977,
      "\\]\r\n": 9978,
      "_distance": 9979,
      "`. It ": 9980,
      "bit is ": 9981,
      "cam": 9982,
      "dot": 9983,
      "drin": 9984,
      "eo": 9985,
      "foc": 9986,
      "gas ": 9987,
      "h ": 9988,
      "idi": 9989,
      "know ": 9990,
      "ling ": 9991,
      "lad": 9992,
      "mu": 9993,
      "m:\r\n": 9994,
      "mic ": 9995,
      "n) if ": 9996,
      "offer": 9997,
      "pt ": 9998,
      "ring ": 9999
    },
    "merges": [
      [
        " ",
        " "
      ],
      [
        "  ",
        "  "
      ],
      [
        "\r",
        "\n"
      ],
      [
        "e",
        " "
      ],
      [
        "t",
        "h"
      ],
      [
        "    ",
        "    "
      ],
      [
        "s",
        " "
      ],
      [
        "i",
        "n"
      ],
      [
        "t",
        " "
      ],
      [
        "e",
        "r"
      ],
      [
        "th",
        "e "
      ],
      [
        ",",
        " "
      ],
      [
        "o",
        "n"
      ],
      [
        "a",
        "n"
      ],
      [
        "=",
        " "
      ],
      [
        "e",
        "n"
      ],
      [
        "d",
        " "
      ],
      [
        "f",
        " "
      ],
      [
        "r",
        "e"
      ],
      [
        "a",
        "r"
      ],
      [
        "o",
        "r"
      ],
      [
        "t",
        "i"
      ],
      [
        "u",
        "m"
      ],
      [
        "s",
        "t"
      ],
      [
        "a",
        "l"
      ],
      [
        ":",
        "\r\n"
      ],
      [
        ".",
        "\r\n"
      ],
      [
        "o",
        " "
      ],
      [
        "y",
        " "
      ],
      [
        ":",
        " "
      ],
      [
        "o",
        "f "
      ],
      [
        "in",
        "g"
      ],
      [
        "ti",
        "on"
      ],
      [
        "i",
        "s "
      ],
      [
        "n",
        "um"
      ],
      [
        "u",
        "t"
      ],
      [
        "l",
        "e"
      ],
      [
        " ",
        "the "
      ],
      [
        "c",
        "h"
      ],
      [
        "r",
        "o"
      ],
      [
        "s",
        "e"
      ],
      [
        "d",
        "e"
      ],
      [
        "er",
        " "
      ],
      [
        "u",
        "r"
      ],
      [
        "t",
        "o "
      ],
      [
        "c",
        "o"
      ],
      [
        "p",
        "l"
      ],
      [
        "        ",
        "    "
      ],
      [
        "ing",
        " "
      ],
      [
        "r",
        "a"
      ],
      [
        "an",
        "d "
      ],
      [
        "in",
        "t"
      ],
      [
        "n",
        " "
      ],
      [
        ".",
        " "
      ],
      [
        "a",
        " "
      ],
      [
        "a",
        "t"
      ],
      [
        "]",
        " "
      ],
      [
        "p",
        "ut"
      ],
      [
        "d",
        "i"
      ],
      [
        "T",
        "h"
      ],
      [
        "put",
        ": "
      ],
      [
        "or",
        " "
      ],
      [
        "th",
        " "
      ],
      [
        "E",
        "x"
      ],
      [
        "in",
        " "
      ],
      [
        "u",
        "n"
      ],
      [
        "<",
        "= "
      ],
      [
        "m",
        "a"
      ],
      [
        "s",
        "t "
      ],
      [
        "s",
        "i"
      ],
      [
        "e",
        "s "
      ],
      [
        "s",
        "u"
      ],
      [
        "r",
        "i"
      ],
      [
        "a",
        "tion"
      ],
      [
        "a",
        "m"
      ],
      [
        "a",
        "t "
      ],
      [
        "an",
        " "
      ],
      [
        "t",
        "ur"
      ],
      [
        "1",
        " "
      ],
      [
        "ch",
        " "
      ],
      [
        "en",
        "t"
      ],
      [
        ")",
        " "
      ],
      [
        "`",
        "`"
      ],
      [
        "q",
        "u"
      ],
      [
        "e",
        "d "
      ],
      [
        "#",
        " "
      ],
      [
        "l",
        "en"
      ],
      [
        "-",
        " "
      ],
      [
        "i",
        "m"
      ],
      [
        "i",
        "t"
      ],
      [
        "o",
        "l"
      ],
      [
        "        ",
        "        "
      ],
      [
        "[",
        "i"
      ],
      [
        "a",
        "c"
      ],
      [
        "g",
        "e"
      ],
      [
        "n",
        "o"
      ],
      [
        ")",
        "\r\n"
      ],
      [
        "w",
        "i"
      ],
      [
        "num",
        "s"
      ],
      [
        "i",
        "f "
      ],
      [
        " ",
        "= "
      ],
      [
        "+",
        " "
      ],
      [
        "p",
        "o"
      ],
      [
        "re",
        "tur"
      ],
      [
        "m",
        " "
      ],
      [
        "]",
        "\r\n"
      ],
      [
        "1",
        "0"
      ],
      [
        "Th",
        "e "
      ],
      [
        "1",
        ","
      ],
      [
        "num",
        "b"
      ],
      [
        "c",
        "on"
      ],
      [
        "I",
        "n"
      ],
      [
        "e",
        "s"
      ],
      [
        "l",
        " "
      ],
      [
        "g",
        "h"
      ],
      [
        "o",
        "u"
      ],
      [
        "v",
        "al"
      ],
      [
        "st",
        "r"
      ],
      [
        "en",
        " "
      ],
      [
        "ar",
        "e "
      ],
      [
        "e",
        "a"
      ],
      [
        "f",
        "or "
      ],
      [
        "ar",
        "ra"
      ],
      [
        "f",
        "i"
      ],
      [
        "um",
        " "
      ],
      [
        "len",
        "g"
      ],
      [
        "pl",
        "e "
      ],
      [
        "e ",
        "the "
      ],
      [
        "th",
        "at "
      ],
      [
        "i",
        "st"
      ],
      [
        "ma",
        "x"
      ],
      [
        "a",
        "s"
      ],
      [
        "= ",
        "["
      ],
      [
        "O",
        "ut"
      ],
      [
        "Out",
        "put: "
      ],
      [
        "of ",
        "the "
      ],
      [
        "am",
        "ple "
      ],
      [
        "l",
        "o"
      ],
      [
        "Ex",
        "ample "
      ],
      [
        "f",
        "ro"
      ],
      [
        "In",
        "put: "
      ],
      [
        "retur",
        "n "
      ],
      [
        "n",
        "e"
      ],
      [
        "        ",
        "\r\n"
      ],
      [
        "en",
        "t "
      ],
      [
        "w",
        "h"
      ],
      [
        "`",
        " "
      ],
      [
        "pl",
        "an"
      ],
      [
        "numb",
        "er "
      ],
      [
        "l",
        "e "
      ],
      [
        "k",
        " "
      ],
      [
        "m",
        "in"
      ],
      [
        "or",
        "d"
      ],
      [
        "su",
        "b"
      ],
      [
        "2",
        ","
      ],
      [
        "plan",
        "ation"
      ],
      [
        "Ex",
        "planation"
      ],
      [
        "co",
        "un"
      ],
      [
        " ",
        "\r\n"
      ],
      [
        "i",
        "t "
      ],
      [
        "]",
        ", "
      ],
      [
        "e",
        "l"
      ],
      [
        "v",
        "e "
      ],
      [
        "al",
        " "
      ],
      [
        "leng",
        "th "
      ],
      [
        "u",
        "tion"
      ],
      [
        "t",
        "er"
      ],
      [
        "u",
        "l"
      ],
      [
        "le",
        "m"
      ],
      [
        "ol",
        "ution"
      ],
      [
        "x",
        " "
      ],
      [
        "c",
        "e "
      ],
      [
        "m",
        "o"
      ],
      [
        "c",
        "ur"
      ],
      [
        "a",
        "p"
      ],
      [
        "c",
        "an "
      ],
      [
        "``",
        "`"
      ],
      [
        "L",
        "ist"
      ],
      [
        "o",
        "t"
      ],
      [
        ">",
        " "
      ],
      [
        "p",
        "re"
      ],
      [
        "0",
        ","
      ],
      [
        "e",
        "d"
      ],
      [
        "        ",
        "# "
      ],
      [
        "in",
        " the "
      ],
      [
        "*",
        "*"
      ],
      [
        "arra",
        "y "
      ],
      [
        "fro",
        "m "
      ],
      [
        "ea",
        "ch "
      ],
      [
        "0",
        "\r\n"
      ],
      [
        "p",
        "ro"
      ],
      [
        "w",
        "e "
      ],
      [
        "er",
        "e "
      ],
      [
        "i",
        "v"
      ],
      [
        "r",
        "an"
      ],
      [
        "2",
        " "
      ],
      [
        "l",
        "y "
      ],
      [
        "1",
        ", "
      ],
      [
        "ou",
        " "
      ],
      [
        "=",
        "= "
      ],
      [
        "a",
        "b"
      ],
      [
        "1",
        "\r\n"
      ],
      [
        "im",
        "um "
      ],
      [
        "i",
        " "
      ],
      [
        "p",
        "er"
      ],
      [
        "cur",
        "r"
      ],
      [
        "v",
        "er"
      ],
      [
        "number ",
        "of "
      ],
      [
        "0",
        " "
      ],
      [
        "se",
        "l"
      ],
      [
        "[i",
        "] "
      ],
      [
        ")",
        ":\r\n"
      ],
      [
        "e",
        "g"
      ],
      [
        "3",
        ","
      ],
      [
        "e",
        "c"
      ],
      [
        "co",
        "m"
      ],
      [
        "]",
        ","
      ],
      [
        "l",
        "i"
      ],
      [
        "sel",
        "f"
      ],
      [
        "e",
        "lem"
      ],
      [
        "a",
        "s "
      ],
      [
        "in",
        "de"
      ],
      [
        "le",
        "f"
      ],
      [
        "s",
        ":\r\n"
      ],
      [
        "e",
        "x"
      ],
      [
        "val",
        "u"
      ],
      [
        "],",
        "["
      ],
      [
        "b",
        "e "
      ],
      [
        "s",
        ".\r\n"
      ],
      [
        "t",
        "w"
      ],
      [
        "p",
        " "
      ],
      [
        "-",
        "> "
      ],
      [
        "s",
        "e "
      ],
      [
        "c",
        "t"
      ],
      [
        "s",
        "h"
      ],
      [
        "1 ",
        "<= "
      ],
      [
        "ri",
        "gh"
      ],
      [
        "de",
        "f "
      ],
      [
        "int",
        "eg"
      ],
      [
        "iv",
        "en "
      ],
      [
        "Explanation",
        ": "
      ],
      [
        "b",
        "y "
      ],
      [
        "c",
        "l"
      ],
      [
        "f",
        "or"
      ],
      [
        "wi",
        "th "
      ],
      [
        "ch",
        "ar"
      ],
      [
        "p",
        "a"
      ],
      [
        "i",
        "r"
      ],
      [
        "ti",
        "m"
      ],
      [
        "st",
        "ra"
      ],
      [
        "al",
        "l "
      ],
      [
        "c",
        "tion"
      ],
      [
        "lo",
        "w"
      ],
      [
        "<= ",
        "10"
      ],
      [
        "no",
        "t "
      ],
      [
        "s ",
        "= ["
      ],
      [
        "no",
        "de"
      ],
      [
        "a",
        "d"
      ],
      [
        "Th",
        "is "
      ],
      [
        "f",
        "in"
      ],
      [
        "\"",
        ","
      ],
      [
        "s",
        ", "
      ],
      [
        "s ",
        "the "
      ],
      [
        "b",
        "o"
      ],
      [
        "List",
        "["
      ],
      [
        "1",
        ":\r\n"
      ],
      [
        "C",
        "on"
      ],
      [
        "\",",
        "\""
      ],
      [
        "stra",
        "int"
      ],
      [
        "su",
        "l"
      ],
      [
        "]",
        "["
      ],
      [
        ". ",
        "The "
      ],
      [
        "        ",
        "            "
      ],
      [
        "I",
        "f "
      ],
      [
        "*",
        " "
      ],
      [
        "wh",
        "i"
      ],
      [
        "en",
        "d"
      ],
      [
        "si",
        "b"
      ],
      [
        "c",
        "e"
      ],
      [
        "re",
        "sul"
      ],
      [
        "ran",
        "ge"
      ],
      [
        "str",
        "ing "
      ],
      [
        "b",
        "e"
      ],
      [
        "as",
        "s "
      ],
      [
        "coun",
        "t"
      ],
      [
        "st",
        "ar"
      ],
      [
        "or",
        "t "
      ],
      [
        "(",
        "self"
      ],
      [
        "w",
        "ord"
      ],
      [
        "R",
        "e"
      ],
      [
        "i",
        "gh"
      ],
      [
        "v",
        "i"
      ],
      [
        "to ",
        "the "
      ],
      [
        "ing",
        " the "
      ],
      [
        "im",
        "p"
      ],
      [
        ".",
        "length "
      ],
      [
        "(self",
        ", "
      ],
      [
        "cl",
        "ass "
      ],
      [
        ") ",
        "-> "
      ],
      [
        "er",
        "s "
      ],
      [
        "Y",
        "ou "
      ],
      [
        "ar",
        "ge"
      ],
      [
        "2",
        ":\r\n"
      ],
      [
        "d",
        "e "
      ],
      [
        "t",
        "er "
      ],
      [
        "y",
        "th"
      ],
      [
        "fi",
        "r"
      ],
      [
        "co",
        "l"
      ],
      [
        "g",
        "iven "
      ],
      [
        "s",
        "um "
      ],
      [
        "range",
        "("
      ],
      [
        "S",
        "olution"
      ],
      [
        "o",
        "w"
      ],
      [
        "    ",
        "def "
      ],
      [
        "i",
        "l"
      ],
      [
        "yth",
        "on"
      ],
      [
        "t",
        "a"
      ],
      [
        "Con",
        "straint"
      ],
      [
        "arra",
        "y"
      ],
      [
        "po",
        "s"
      ],
      [
        "in ",
        "range("
      ],
      [
        "s",
        "um"
      ],
      [
        "t ",
        "= "
      ],
      [
        "elem",
        "ent"
      ],
      [
        "Constraint",
        "s:\r\n"
      ],
      [
        "        ",
        "return "
      ],
      [
        "Example ",
        "2:\r\n"
      ],
      [
        "Example ",
        "1:\r\n"
      ],
      [
        "4",
        ","
      ],
      [
        "s",
        "olution"
      ],
      [
        " ",
        "+ "
      ],
      [
        "p",
        "ython"
      ],
      [
        "class ",
        "Solution"
      ],
      [
        "```",
        "\r\n"
      ],
      [
        "```",
        "python"
      ],
      [
        "class Solution",
        ":\r\n"
      ],
      [
        "```python",
        "\r\n"
      ],
      [
        "or",
        "t"
      ],
      [
        "on",
        "e "
      ],
      [
        "len",
        "("
      ],
      [
        "pos",
        "sib"
      ],
      [
        "a",
        "y"
      ],
      [
        "max",
        "imum "
      ],
      [
        "[",
        "0"
      ],
      [
        "tw",
        "o "
      ],
      [
        "char",
        "ac"
      ],
      [
        "n",
        " the "
      ],
      [
        "qu",
        "en"
      ],
      [
        "pre",
        "s"
      ],
      [
        "s ",
        "of "
      ],
      [
        ", ",
        "and "
      ],
      [
        "r",
        "u"
      ],
      [
        "integ",
        "er "
      ],
      [
        "is ",
        "the "
      ],
      [
        "ap",
        "p"
      ],
      [
        "imp",
        "ort "
      ],
      [
        "al",
        "l"
      ],
      [
        "W",
        "e "
      ],
      [
        "u",
        "p"
      ],
      [
        "t",
        "y"
      ],
      [
        "wi",
        "th"
      ],
      [
        " ",
        "- "
      ],
      [
        "m",
        "e"
      ],
      [
        "<",
        " "
      ],
      [
        "le",
        "t"
      ],
      [
        "solution",
        " "
      ],
      [
        ", ",
        "we "
      ],
      [
        "t",
        "ra"
      ],
      [
        "an",
        "y "
      ],
      [
        "s ",
        "= "
      ],
      [
        "k",
        "e"
      ],
      [
        "th",
        "e"
      ],
      [
        "max",
        "_"
      ],
      [
        "fir",
        "st "
      ],
      [
        "        ",
        "for "
      ],
      [
        "di",
        "st"
      ],
      [
        "on",
        " "
      ],
      [
        "l",
        "l "
      ],
      [
        "str",
        "ing"
      ],
      [
        "g",
        "ri"
      ],
      [
        "c",
        "ul"
      ],
      [
        "List[",
        "int"
      ],
      [
        "-",
        "1"
      ],
      [
        "2",
        ", "
      ],
      [
        "t",
        "ot"
      ],
      [
        "d",
        "p"
      ],
      [
        "2",
        "\r\n"
      ],
      [
        "lef",
        "t"
      ],
      [
        "possib",
        "le "
      ],
      [
        "at",
        "e "
      ],
      [
        "per",
        "ation"
      ],
      [
        "po",
        "si"
      ],
      [
        "g",
        "e "
      ],
      [
        "            ",
        "if "
      ],
      [
        "+",
        "= "
      ],
      [
        "c",
        "es"
      ],
      [
        "\"",
        " "
      ],
      [
        "3",
        " "
      ],
      [
        "\"",
        ", "
      ],
      [
        "t",
        "re"
      ],
      [
        "5",
        ","
      ],
      [
        "i",
        "c"
      ],
      [
        "s",
        "w"
      ],
      [
        "0",
        ", "
      ],
      [
        "ty",
        "p"
      ],
      [
        "h",
        "a"
      ],
      [
        "di",
        "g"
      ],
      [
        "p",
        "ar"
      ],
      [
        "al",
        "cul"
      ],
      [
        "righ",
        "t"
      ],
      [
        "mo",
        "v"
      ],
      [
        "ar",
        "r"
      ],
      [
        "f",
        "f"
      ],
      [
        "s",
        "\r\n"
      ],
      [
        "ro",
        "w"
      ],
      [
        "\"",
        "\r\n"
      ],
      [
        "curr",
        "ent "
      ],
      [
        "it",
        "s "
      ],
      [
        "**",
        ": "
      ],
      [
        "g",
        "ra"
      ],
      [
        "inde",
        "x "
      ],
      [
        "inde",
        "x"
      ],
      [
        "Re",
        "tur"
      ],
      [
        "o",
        "un"
      ],
      [
        "            ",
        "# "
      ],
      [
        "i",
        "d "
      ],
      [
        "s",
        "o "
      ],
      [
        "star",
        "t"
      ],
      [
        "m",
        "at"
      ],
      [
        "s",
        "p"
      ],
      [
        "min",
        "imum "
      ],
      [
        "leng",
        "th"
      ],
      [
        "c",
        "es "
      ],
      [
        "o",
        "peration"
      ],
      [
        "This ",
        "solution "
      ],
      [
        "0",
        "0"
      ],
      [
        "5",
        "\r\n"
      ],
      [
        "i",
        "z"
      ],
      [
        ". ",
        "**"
      ],
      [
        "ar",
        "y "
      ],
      [
        "s",
        "ort"
      ],
      [
        "[",
        "1,"
      ],
      [
        "t",
        "arge"
      ],
      [
        "e",
        "\r\n"
      ],
      [
        "y",
        "ou "
      ],
      [
        "curr",
        "ent"
      ],
      [
        "i",
        "d"
      ],
      [
        "d ",
        "the "
      ],
      [
        "can ",
        "be "
      ],
      [
        "t",
        "o"
      ],
      [
        "m",
        " the "
      ],
      [
        "th",
        "is "
      ],
      [
        "wh",
        "ere "
      ],
      [
        "po",
        "int"
      ],
      [
        "Explanation",
        ":\r\n"
      ],
      [
        "se",
        "quen"
      ],
      [
        "You ",
        "are "
      ],
      [
        "] ",
        "= "
      ],
      [
        "e",
        "qu"
      ],
      [
        "valu",
        "e "
      ],
      [
        "coun",
        "t "
      ],
      [
        "c",
        "t "
      ],
      [
        "e",
        "m"
      ],
      [
        "or",
        "e "
      ],
      [
        "no",
        "de "
      ],
      [
        "whi",
        "ch "
      ],
      [
        "]",
        ".\r\n"
      ],
      [
        "c",
        "re"
      ],
      [
        "s ",
        "to "
      ],
      [
        "at",
        "es "
      ],
      [
        "b",
        "in"
      ],
      [
        ")",
        ", "
      ],
      [
        "wi",
        "ll "
      ],
      [
        "w",
        "or"
      ],
      [
        "c",
        "i"
      ],
      [
        "num",
        "s = ["
      ],
      [
        "resul",
        "t"
      ],
      [
        "n ",
        "= "
      ],
      [
        "u",
        "s"
      ],
      [
        "s",
        "["
      ],
      [
        "List[int",
        "]"
      ],
      [
        "nums",
        "["
      ],
      [
        "typ",
        "ing "
      ],
      [
        "h",
        "ea"
      ],
      [
        "from ",
        "typing "
      ],
      [
        "from typing ",
        "import "
      ],
      [
        "0,",
        "0,"
      ],
      [
        "'",
        "s "
      ],
      [
        "re",
        "pres"
      ],
      [
        "a",
        "ch "
      ],
      [
        "int",
        ":\r\n"
      ],
      [
        "List",
        "\r\n"
      ],
      [
        "di",
        "ff"
      ],
      [
        "F",
        "or "
      ],
      [
        ") -> ",
        "int:\r\n"
      ],
      [
        "in",
        "d"
      ],
      [
        "on",
        "ly "
      ],
      [
        "from typing import ",
        "List\r\n"
      ],
      [
        "'",
        " "
      ],
      [
        "I",
        "t "
      ],
      [
        "p",
        "h"
      ],
      [
        "qu",
        "e"
      ],
      [
        "qu",
        "er"
      ],
      [
        "n",
        "o "
      ],
      [
        "u",
        "se"
      ],
      [
        ": ",
        "int"
      ],
      [
        "f",
        "fi"
      ],
      [
        "c",
        "an"
      ],
      [
        "con",
        "si"
      ],
      [
        "[i",
        "]"
      ],
      [
        "posi",
        "tion"
      ],
      [
        "o",
        "o"
      ],
      [
        "s ",
        "that "
      ],
      [
        "gri",
        "d"
      ],
      [
        "is ",
        "a "
      ],
      [
        "th",
        "er "
      ],
      [
        "fro",
        "m the "
      ],
      [
        "p",
        "le"
      ],
      [
        "current",
        "_"
      ],
      [
        "th",
        "ere "
      ],
      [
        "an",
        "sw"
      ],
      [
        "h",
        "as "
      ],
      [
        "at",
        "e the "
      ],
      [
        "e",
        "igh"
      ],
      [
        "ha",
        "ve "
      ],
      [
        "e",
        "v"
      ],
      [
        "ti",
        "ve "
      ],
      [
        "pa",
        "ir"
      ],
      [
        "+ ",
        "1"
      ],
      [
        "elem",
        "ent "
      ],
      [
        "element",
        "s "
      ],
      [
        "tim",
        "e "
      ],
      [
        "0 ",
        "<= "
      ],
      [
        "p",
        "ri"
      ],
      [
        "a",
        "st "
      ],
      [
        "lef",
        "t "
      ],
      [
        "ne",
        "x"
      ],
      [
        "o",
        "ur"
      ],
      [
        "repres",
        "ent"
      ],
      [
        ". ",
        "If "
      ],
      [
        "in",
        "di"
      ],
      [
        "am",
        "e "
      ],
      [
        "You are ",
        "given "
      ],
      [
        "s ",
        "and "
      ],
      [
        "Input: ",
        "nums = ["
      ],
      [
        "charac",
        "ter"
      ],
      [
        "Retur",
        "n the "
      ],
      [
        "c",
        "el"
      ],
      [
        "s",
        "("
      ],
      [
        "i",
        ", "
      ],
      [
        "u",
        "se "
      ],
      [
        "ation",
        " "
      ],
      [
        "li",
        "st "
      ],
      [
        "a",
        "ch"
      ],
      [
        "4",
        "\r\n"
      ],
      [
        "th",
        "an "
      ],
      [
        "i",
        "s"
      ],
      [
        "ed ",
        "to "
      ],
      [
        ", ",
        "the "
      ],
      [
        "1",
        "] "
      ],
      [
        "i",
        "ti"
      ],
      [
        "[i",
        "]["
      ],
      [
        "se",
        "con"
      ],
      [
        "s",
        "ol"
      ],
      [
        "            ",
        "\r\n"
      ],
      [
        "g",
        "re"
      ],
      [
        "su",
        "ch "
      ],
      [
        "ction",
        " "
      ],
      [
        "s ",
        "are "
      ],
      [
        "            ",
        "return "
      ],
      [
        "ol",
        "low"
      ],
      [
        "]",
        "]\r\n"
      ],
      [
        "b",
        "u"
      ],
      [
        "r",
        "\r\n"
      ],
      [
        "pre",
        "fi"
      ],
      [
        "with",
        " the "
      ],
      [
        "e",
        "p"
      ],
      [
        "s",
        "m"
      ],
      [
        "i ",
        "in range("
      ],
      [
        "d",
        "u"
      ],
      [
        "3",
        "\r\n"
      ],
      [
        "\\",
        "r\r\n"
      ],
      [
        "diff",
        "er"
      ],
      [
        "3",
        ", "
      ],
      [
        "l",
        "ist"
      ],
      [
        "A",
        " "
      ],
      [
        "k",
        " = "
      ],
      [
        "o",
        "m"
      ],
      [
        "                ",
        "if "
      ],
      [
        "th",
        "en "
      ],
      [
        "tot",
        "al "
      ],
      [
        "gra",
        "ph"
      ],
      [
        "as",
        "e "
      ],
      [
        ".length ",
        "<= 10"
      ],
      [
        "c",
        "alcul"
      ],
      [
        "al",
        "se"
      ],
      [
        "val",
        "id "
      ],
      [
        "righ",
        "t "
      ],
      [
        "j",
        " "
      ],
      [
        "e",
        ".\r\n"
      ],
      [
        "s ",
        "in "
      ],
      [
        "ch",
        "ec"
      ],
      [
        "3",
        ":\r\n"
      ],
      [
        "e",
        "p "
      ],
      [
        ")",
        ".\r\n"
      ],
      [
        "app",
        "end"
      ],
      [
        "ffi",
        "ci"
      ],
      [
        "dist",
        "an"
      ],
      [
        "f",
        "ollow"
      ],
      [
        "ap",
        "pro"
      ],
      [
        "s",
        "[i] "
      ],
      [
        "s",
        "c"
      ],
      [
        "4",
        " "
      ],
      [
        "al",
        "le"
      ],
      [
        "n ",
        "- "
      ],
      [
        "+= ",
        "1\r\n"
      ],
      [
        "whi",
        "le "
      ],
      [
        "ro",
        "u"
      ],
      [
        "equ",
        "al "
      ],
      [
        "Output: ",
        "["
      ],
      [
        "bin",
        "ary "
      ],
      [
        "s",
        "ame "
      ],
      [
        "e",
        "ffici"
      ],
      [
        "            ",
        "for "
      ],
      [
        "s",
        ": "
      ],
      [
        "Example ",
        "3:\r\n"
      ],
      [
        " ",
        "in "
      ],
      [
        "j",
        "] "
      ],
      [
        "o",
        "b"
      ],
      [
        ", ",
        "it "
      ],
      [
        "Th",
        "ere "
      ],
      [
        "f",
        "un"
      ],
      [
        "co",
        "st "
      ],
      [
        ".",
        "append"
      ],
      [
        "resul",
        "t "
      ],
      [
        "1,",
        "2,"
      ],
      [
        ".append",
        "("
      ],
      [
        ".",
        "length"
      ],
      [
        "f",
        "ter "
      ],
      [
        "si",
        "z"
      ],
      [
        "it",
        "y "
      ],
      [
        "numb",
        "er"
      ],
      [
        "tra",
        "c"
      ],
      [
        "a",
        "re"
      ],
      [
        "an ",
        "integer "
      ],
      [
        "pl",
        "ac"
      ],
      [
        "tw",
        "e"
      ],
      [
        "tre",
        "e "
      ],
      [
        "f",
        "re"
      ],
      [
        "be",
        "twe"
      ],
      [
        "k",
        "s "
      ],
      [
        "con",
        "ta"
      ],
      [
        "ne",
        "w"
      ],
      [
        "C",
        "h"
      ],
      [
        "charac",
        "ter "
      ],
      [
        "e",
        ", "
      ],
      [
        "de",
        "d "
      ],
      [
        "6",
        ","
      ],
      [
        "pro",
        "b"
      ],
      [
        "5",
        " "
      ],
      [
        "ac",
        "t"
      ],
      [
        "en",
        "ce "
      ],
      [
        "s",
        ". "
      ],
      [
        "it",
        "er"
      ],
      [
        "s ",
        "a "
      ],
      [
        "k",
        "e "
      ],
      [
        "an",
        "g"
      ],
      [
        "]",
        ":\r\n"
      ],
      [
        "ord",
        "er"
      ],
      [
        "Explanation: ",
        "The "
      ],
      [
        "t ",
        "the "
      ],
      [
        "targe",
        "t"
      ],
      [
        "sequen",
        "ce "
      ],
      [
        ")",
        ")\r\n"
      ],
      [
        "st",
        "ac"
      ],
      [
        "nums",
        "[i] "
      ],
      [
        "numb",
        "ers "
      ],
      [
        "\"",
        "ab"
      ],
      [
        "an",
        "d"
      ],
      [
        "ro",
        "ot"
      ],
      [
        "se",
        "t"
      ],
      [
        "min",
        "_"
      ],
      [
        "self",
        "."
      ],
      [
        "e",
        "t"
      ],
      [
        "a",
        "se"
      ],
      [
        "n",
        "on"
      ],
      [
        "un",
        "i"
      ],
      [
        "mat",
        "ri"
      ],
      [
        "2",
        " = "
      ],
      [
        "let",
        "ter"
      ],
      [
        "o",
        "p"
      ],
      [
        "en",
        "d "
      ],
      [
        "e",
        "ar"
      ],
      [
        "or",
        "i"
      ],
      [
        "en",
        " the "
      ],
      [
        "h",
        "eigh"
      ],
      [
        "sm",
        "alle"
      ],
      [
        "/",
        " "
      ],
      [
        "max",
        "("
      ],
      [
        "w",
        "ay"
      ],
      [
        "di",
        "vi"
      ],
      [
        "fun",
        "ction "
      ],
      [
        "re",
        "ma"
      ],
      [
        "1",
        "1"
      ],
      [
        "G",
        "iven "
      ],
      [
        "7",
        ","
      ],
      [
        "z",
        "er"
      ],
      [
        "iti",
        "al"
      ],
      [
        "er",
        "e"
      ],
      [
        "dig",
        "it"
      ],
      [
        "se",
        "t "
      ],
      [
        "if ",
        "the "
      ],
      [
        "]",
        ")\r\n"
      ],
      [
        "1,",
        "1,"
      ],
      [
        "N",
        "o"
      ],
      [
        "a",
        "y "
      ],
      [
        "ed ",
        "by "
      ],
      [
        "o",
        "c"
      ],
      [
        "        for ",
        "i in range("
      ],
      [
        "di",
        "re"
      ],
      [
        "\"",
        "a"
      ],
      [
        "tot",
        "al"
      ],
      [
        "valu",
        "es "
      ],
      [
        "answ",
        "er "
      ],
      [
        "com",
        "p"
      ],
      [
        "hea",
        "p"
      ],
      [
        "em",
        "p"
      ],
      [
        "ar",
        "d"
      ],
      [
        "fin",
        "d the "
      ],
      [
        "retur",
        "n the "
      ],
      [
        "t",
        "ru"
      ],
      [
        "1 ",
        "and "
      ],
      [
        "ro",
        "o"
      ],
      [
        "`",
        ".\r\n"
      ],
      [
        "retur",
        "n"
      ],
      [
        "re",
        "d "
      ],
      [
        "on",
        " the "
      ],
      [
        "c",
        "or"
      ],
      [
        "p",
        "u"
      ],
      [
        "smalle",
        "st "
      ],
      [
        "d",
        "o"
      ],
      [
        "C",
        "oun"
      ],
      [
        "d",
        "ing "
      ],
      [
        "v",
        "e"
      ],
      [
        "sub",
        "array "
      ],
      [
        "mo",
        "ve "
      ],
      [
        "for",
        "m"
      ],
      [
        ".",
        "."
      ],
      [
        "at",
        "e"
      ],
      [
        "effici",
        "ent"
      ],
      [
        "1",
        "]\r\n"
      ],
      [
        "l",
        "arge"
      ],
      [
        "  ",
        " - "
      ],
      [
        "l",
        "on"
      ],
      [
        "non",
        "-"
      ],
      [
        "l",
        "d "
      ],
      [
        "and ",
        "the "
      ],
      [
        "1",
        ".\r\n"
      ],
      [
        "\", ",
        "\""
      ],
      [
        "num",
        "s "
      ],
      [
        "ou",
        "ld "
      ],
      [
        "quer",
        "i"
      ],
      [
        "es ",
        "the "
      ],
      [
        "sub",
        "array"
      ],
      [
        "appro",
        "ach "
      ],
      [
        "c",
        "ase "
      ],
      [
        "_",
        "sum"
      ],
      [
        "o",
        "d"
      ],
      [
        "th",
        "er"
      ],
      [
        "pa",
        "th "
      ],
      [
        "%",
        " "
      ],
      [
        "l",
        "in"
      ],
      [
        "rou",
        "gh"
      ],
      [
        "  ",
        "# "
      ],
      [
        "!",
        "= "
      ],
      [
        "(",
        ")\r\n"
      ],
      [
        "th",
        "rough"
      ],
      [
        "        ",
        "if "
      ],
      [
        "sum ",
        "of "
      ],
      [
        "v",
        "el"
      ],
      [
        "at",
        "er "
      ],
      [
        "d",
        "er"
      ],
      [
        "wor",
        "d "
      ],
      [
        "\"",
        ".\r\n"
      ],
      [
        "st",
        "ep"
      ],
      [
        "[0",
        "] "
      ],
      [
        "ir",
        " "
      ],
      [
        "trac",
        "k "
      ],
      [
        "si",
        "t"
      ],
      [
        "node",
        "s "
      ],
      [
        "        ",
        "def "
      ],
      [
        "our",
        " "
      ],
      [
        "x",
        ", "
      ],
      [
        "secon",
        "d "
      ],
      [
        "conta",
        "in"
      ],
      [
        "in",
        "to "
      ],
      [
        ". ",
        "It "
      ],
      [
        "integ",
        "ers "
      ],
      [
        "for",
        " the "
      ],
      [
        "el",
        "se"
      ],
      [
        "S",
        "t"
      ],
      [
        "alse",
        "\r\n"
      ],
      [
        "t",
        "ri"
      ],
      [
        "ne",
        "ed to "
      ],
      [
        "indi",
        "ces "
      ],
      [
        "betwe",
        "en "
      ],
      [
        "0",
        ":\r\n"
      ],
      [
        "o",
        "ther "
      ],
      [
        "C",
        "alcul"
      ],
      [
        "t",
        "y "
      ],
      [
        "l",
        "ast "
      ],
      [
        "c",
        "u"
      ],
      [
        ".length",
        "\r\n"
      ],
      [
        "F",
        "in"
      ],
      [
        "that ",
        "the "
      ],
      [
        "mo",
        "st "
      ],
      [
        "start",
        "ing "
      ],
      [
        "sp",
        "ec"
      ],
      [
        "ord",
        "er "
      ],
      [
        "0",
        "0\r\n"
      ],
      [
        "1",
        "],["
      ],
      [
        "else",
        ":\r\n"
      ],
      [
        "y",
        ".\r\n"
      ],
      [
        "tion",
        " "
      ],
      [
        "st",
        "_"
      ],
      [
        "p",
        "e"
      ],
      [
        "le",
        "s"
      ],
      [
        "n",
        "\r\n"
      ],
      [
        "low",
        "er"
      ],
      [
        "consi",
        "st"
      ],
      [
        "ow",
        " "
      ],
      [
        "Input: ",
        "s = "
      ],
      [
        "all",
        " the "
      ],
      [
        "siz",
        "e "
      ],
      [
        "in",
        "cre"
      ],
      [
        "ti",
        "c"
      ],
      [
        "0",
        ".\r\n"
      ],
      [
        "an ",
        "array "
      ],
      [
        "a",
        "g"
      ],
      [
        "on",
        "e"
      ],
      [
        "T",
        "ru"
      ],
      [
        "y",
        ", "
      ],
      [
        "ed",
        "ge"
      ],
      [
        "ab",
        "le "
      ],
      [
        "                ",
        "# "
      ],
      [
        "itial",
        "iz"
      ],
      [
        "s",
        "er"
      ],
      [
        "9",
        "\r\n"
      ],
      [
        "of ",
        "a "
      ],
      [
        "cel",
        "l"
      ],
      [
        "sc",
        "ore "
      ],
      [
        "sh",
        " "
      ],
      [
        "que",
        "u"
      ],
      [
        "co",
        "st"
      ],
      [
        "d",
        "f"
      ],
      [
        "int",
        "er"
      ],
      [
        "bo",
        "th "
      ],
      [
        "a",
        "fter "
      ],
      [
        "N",
        "ot"
      ],
      [
        "sub",
        "string"
      ],
      [
        "ro",
        "up"
      ],
      [
        "fin",
        "d"
      ],
      [
        "No",
        "de"
      ],
      [
        "ran",
        "ge "
      ],
      [
        "E",
        "n"
      ],
      [
        "p",
        "i"
      ],
      [
        "prefi",
        "x"
      ],
      [
        "4",
        ", "
      ],
      [
        "e",
        "st "
      ],
      [
        "star",
        "t "
      ],
      [
        "For ",
        "each "
      ],
      [
        "1",
        ") "
      ],
      [
        "m",
        "ent"
      ],
      [
        "re",
        "qu"
      ],
      [
        "at ",
        "the "
      ],
      [
        "at",
        "ed "
      ],
      [
        "2",
        ".\r\n"
      ],
      [
        "re",
        "mov"
      ],
      [
        "D",
        " "
      ],
      [
        "s",
        "(self, "
      ],
      [
        ".length ",
        "== "
      ],
      [
        "the",
        "ir "
      ],
      [
        "for",
        "m "
      ],
      [
        "Input: ",
        "n = "
      ],
      [
        "zer",
        "o"
      ],
      [
        "be",
        "com"
      ],
      [
        "m",
        "ul"
      ],
      [
        "_",
        "count"
      ],
      [
        "gri",
        "d "
      ],
      [
        "s",
        "a"
      ],
      [
        "for ",
        "each "
      ],
      [
        "(",
        "'"
      ],
      [
        "u",
        "st "
      ],
      [
        "sort",
        "ed "
      ],
      [
        "1 ",
        "= "
      ],
      [
        "2",
        "] "
      ],
      [
        "[",
        "0,"
      ],
      [
        "                ",
        "return "
      ],
      [
        ".length ",
        "<= "
      ],
      [
        "ic",
        " "
      ],
      [
        "efficient",
        "ly "
      ],
      [
        "O",
        "R"
      ],
      [
        "equal ",
        "to "
      ],
      [
        "a",
        "v"
      ],
      [
        "g",
        "roup"
      ],
      [
        "is ",
        "not "
      ],
      [
        "6",
        "\r\n"
      ],
      [
        "requ",
        "i"
      ],
      [
        "lon",
        "ge"
      ],
      [
        "lo",
        "c"
      ],
      [
        "This solution ",
        "use"
      ],
      [
        "vi",
        "sit"
      ],
      [
        "1",
        "], "
      ],
      [
        "ver",
        "y "
      ],
      [
        "position",
        " "
      ],
      [
        "es",
        ".\r\n"
      ],
      [
        "min",
        "("
      ],
      [
        "nex",
        "t"
      ],
      [
        "ec",
        "a"
      ],
      [
        "2",
        "],["
      ],
      [
        "dist",
        "in"
      ],
      [
        "n = ",
        "len("
      ],
      [
        "nex",
        "t "
      ],
      [
        ". ",
        "This "
      ],
      [
        "col",
        "um"
      ],
      [
        "**: ",
        "We "
      ],
      [
        "rema",
        "in"
      ],
      [
        "b",
        "it"
      ],
      [
        "8",
        ","
      ],
      [
        "sub",
        "string "
      ],
      [
        "d",
        "ay"
      ],
      [
        "follow",
        "ing "
      ],
      [
        "5",
        ", "
      ],
      [
        "se",
        "ar"
      ],
      [
        "` ",
        "and "
      ],
      [
        "-",
        "index"
      ],
      [
        "`",
        "k"
      ],
      [
        "[",
        "2,"
      ],
      [
        "ad",
        "j"
      ],
      [
        "col",
        "le"
      ],
      [
        "emp",
        "ty "
      ],
      [
        " ",
        "and "
      ],
      [
        "il",
        "d"
      ],
      [
        "ex",
        "am"
      ],
      [
        "cel",
        "l "
      ],
      [
        "O",
        "("
      ],
      [
        "there ",
        "are "
      ],
      [
        "t",
        "e"
      ],
      [
        "en",
        "er"
      ],
      [
        "gre",
        "ater "
      ],
      [
        "distan",
        "ce "
      ],
      [
        "n",
        "):\r\n"
      ],
      [
        "You are given ",
        "a "
      ],
      [
        "pa",
        "th"
      ],
      [
        "m",
        "ore "
      ],
      [
        "b",
        "eca"
      ],
      [
        "` ",
        "to "
      ],
      [
        "th",
        "re"
      ],
      [
        "of ",
        "each "
      ],
      [
        "(",
        "0, "
      ],
      [
        "total",
        "_"
      ],
      [
        "de",
        "f"
      ],
      [
        "pro",
        "ces"
      ],
      [
        "T",
        "o "
      ],
      [
        "dig",
        "it "
      ],
      [
        "There ",
        "are "
      ],
      [
        "in",
        "t "
      ],
      [
        "List[",
        "List[int]"
      ],
      [
        "roo",
        "t "
      ],
      [
        "s",
        "qu"
      ],
      [
        "al",
        "ind"
      ],
      [
        "con",
        "ne"
      ],
      [
        "alind",
        "ro"
      ],
      [
        "cl",
        "u"
      ],
      [
        "track ",
        "of the "
      ],
      [
        "A",
        "li"
      ],
      [
        "`",
        "nums"
      ],
      [
        "m",
        "id"
      ],
      [
        "en",
        "ce"
      ],
      [
        "us",
        "ing "
      ],
      [
        "OR",
        " "
      ],
      [
        "f",
        "oun"
      ],
      [
        "exam",
        "ple"
      ],
      [
        "e",
        "i"
      ],
      [
        "1 ",
        "+ "
      ],
      [
        "ne",
        "igh"
      ],
      [
        "ates ",
        "the "
      ],
      [
        "neigh",
        "b"
      ],
      [
        "pro",
        "du"
      ],
      [
        "le",
        "ast "
      ],
      [
        "ter",
        "min"
      ],
      [
        "df",
        "s("
      ],
      [
        "g",
        "li"
      ],
      [
        "in ",
        "a "
      ],
      [
        "En",
        "gli"
      ],
      [
        "Ch",
        "ec"
      ],
      [
        "Engli",
        "sh "
      ],
      [
        ": ",
        "List[int]"
      ],
      [
        "prob",
        "lem"
      ],
      [
        "ma",
        "ke "
      ],
      [
        "large",
        "st "
      ],
      [
        "w",
        "ind"
      ],
      [
        ": int",
        ", "
      ],
      [
        "cor",
        "re"
      ],
      [
        "node",
        "."
      ],
      [
        "n",
        "am"
      ],
      [
        "fre",
        "quen"
      ],
      [
        ": int",
        ") -> int:\r\n"
      ],
      [
        "targe",
        "t "
      ],
      [
        "f",
        "lo"
      ],
      [
        "up",
        "d"
      ],
      [
        "d",
        ".\r\n"
      ],
      [
        "Output: ",
        "2\r\n"
      ],
      [
        "ct",
        "ed "
      ],
      [
        "with ",
        "a "
      ],
      [
        "ow",
        "n "
      ],
      [
        "b",
        "ac"
      ],
      [
        "v",
        "er "
      ],
      [
        "n ",
        "== "
      ],
      [
        "di",
        "tion"
      ],
      [
        "c",
        "y "
      ],
      [
        "minimum ",
        "number of "
      ],
      [
        "es ",
        "= ["
      ],
      [
        "su",
        "re"
      ],
      [
        "coun",
        "t = "
      ],
      [
        "ad",
        "d"
      ],
      [
        "in",
        "ce "
      ],
      [
        " = ",
        "["
      ],
      [
        "lower",
        "case "
      ],
      [
        "v",
        "e the "
      ],
      [
        "g",
        "in"
      ],
      [
        "u",
        "p "
      ],
      [
        "the",
        "y "
      ],
      [
        "prefi",
        "x "
      ],
      [
        "differ",
        "ence "
      ],
      [
        "/",
        "/ "
      ],
      [
        "ou",
        "s "
      ],
      [
        "s ",
        "in the "
      ],
      [
        "en",
        "sure"
      ],
      [
        "es",
        "e "
      ],
      [
        "end",
        "ing "
      ],
      [
        "you ",
        "can "
      ],
      [
        "p",
        "alindro"
      ],
      [
        "3",
        ".\r\n"
      ],
      [
        "g",
        " "
      ],
      [
        "becom",
        "es "
      ],
      [
        "3,",
        "4,"
      ],
      [
        "qu",
        "e "
      ],
      [
        "ne",
        "e"
      ],
      [
        "ke",
        "ep "
      ],
      [
        "0",
        "-index"
      ],
      [
        ">",
        "= "
      ],
      [
        "s",
        ")\r\n"
      ],
      [
        "                ",
        "        "
      ],
      [
        "longe",
        "st "
      ],
      [
        "t",
        "as"
      ],
      [
        "F",
        "S"
      ],
      [
        ", ",
        "return "
      ],
      [
        "al",
        "so "
      ],
      [
        "str",
        "u"
      ],
      [
        "k",
        "ing "
      ],
      [
        "List[int",
        "], "
      ],
      [
        "such ",
        "that "
      ],
      [
        "10",
        ","
      ],
      [
        "In",
        "itializ"
      ],
      [
        "we ",
        "can "
      ],
      [
        "'",
        ", "
      ],
      [
        "e ",
        "that "
      ],
      [
        "ensure",
        "s that "
      ],
      [
        "g",
        "a"
      ],
      [
        "h",
        "igh"
      ],
      [
        "re",
        "ver"
      ],
      [
        "H",
        "ere"
      ],
      [
        "length ",
        "of the "
      ],
      [
        "heigh",
        "t"
      ],
      [
        "* ",
        "("
      ],
      [
        "sub",
        "sequence "
      ],
      [
        "ex",
        "act"
      ],
      [
        "ction",
        "s "
      ],
      [
        "sear",
        "ch "
      ],
      [
        "<= 10",
        "5\r\n"
      ],
      [
        "ma",
        "s"
      ],
      [
        "si",
        "g"
      ],
      [
        "1",
        "]"
      ],
      [
        "2",
        "]\r\n"
      ],
      [
        "pl",
        "ay"
      ],
      [
        "ul",
        "l"
      ],
      [
        "int",
        "("
      ],
      [
        "exact",
        "ly "
      ],
      [
        "answ",
        "er"
      ],
      [
        "at",
        "ing "
      ],
      [
        "Calcul",
        "ate the "
      ],
      [
        "Ali",
        "ce "
      ],
      [
        "English ",
        "letter"
      ],
      [
        ".length <= 10",
        "5\r\n"
      ],
      [
        "mul",
        "ti"
      ],
      [
        "3,",
        "4"
      ],
      [
        "les",
        "s "
      ],
      [
        "3",
        "],["
      ],
      [
        "co",
        "re"
      ],
      [
        "can",
        "not "
      ],
      [
        "s",
        "ing"
      ],
      [
        "con",
        "straint"
      ],
      [
        "-",
        "1\r\n"
      ],
      [
        "2",
        "], "
      ],
      [
        "9",
        ","
      ],
      [
        "m",
        "ust "
      ],
      [
        "s",
        "ur"
      ],
      [
        "th",
        "ese "
      ],
      [
        "com",
        "put"
      ],
      [
        "sp",
        "ac"
      ],
      [
        "de",
        "termin"
      ],
      [
        "wi",
        "se"
      ],
      [
        "new",
        " "
      ],
      [
        "al",
        "ly "
      ],
      [
        "Output: ",
        "3\r\n"
      ],
      [
        "queri",
        "es"
      ],
      [
        "i",
        "th "
      ],
      [
        "ed",
        ".\r\n"
      ],
      [
        "which ",
        "is "
      ],
      [
        "spec",
        "i"
      ],
      [
        "b",
        "i"
      ],
      [
        "d",
        "_"
      ],
      [
        "dp",
        "["
      ],
      [
        "[",
        "1, "
      ],
      [
        "at ",
        "least "
      ],
      [
        "all ",
        "possible "
      ],
      [
        "k",
        "\r\n"
      ],
      [
        "Chec",
        "k "
      ],
      [
        "sum ",
        "of the "
      ],
      [
        "\"ab",
        "c"
      ],
      [
        "0",
        "],["
      ],
      [
        "adj",
        "ac"
      ],
      [
        "[i][",
        "j] "
      ],
      [
        "di",
        "ct"
      ],
      [
        "com",
        "ple"
      ],
      [
        "Retur",
        "n "
      ],
      [
        "        ",
        "n = len("
      ],
      [
        "posi",
        "tive "
      ],
      [
        "k",
        "ed "
      ],
      [
        "s",
        "pl"
      ],
      [
        "ori",
        "gin"
      ],
      [
        "        ",
        "while "
      ],
      [
        ") ",
        "and "
      ],
      [
        "If ",
        "the "
      ],
      [
        "pu",
        "t "
      ],
      [
        " ",
        "is "
      ],
      [
        "lem",
        "ent"
      ],
      [
        "ou",
        "t "
      ],
      [
        "through",
        " the "
      ],
      [
        "n",
        ", "
      ],
      [
        "re",
        "ach"
      ],
      [
        "s",
        "[i]"
      ],
      [
        "beca",
        "use "
      ],
      [
        "I",
        "n "
      ],
      [
        "b",
        "ot"
      ],
      [
        "i",
        "f"
      ],
      [
        "oc",
        "curr"
      ],
      [
        "F",
        "alse\r\n"
      ],
      [
        "2 ",
        "+ "
      ],
      [
        "st",
        "or"
      ],
      [
        "g",
        "u"
      ],
      [
        ", we ",
        "can "
      ],
      [
        "character",
        "s "
      ],
      [
        "0",
        "] "
      ],
      [
        "comple",
        "x"
      ],
      [
        "Input: s = ",
        "\""
      ],
      [
        "m",
        "ent "
      ],
      [
        "-",
        "= "
      ],
      [
        "1",
        ". **"
      ],
      [
        "2",
        ". **"
      ],
      [
        "3",
        "]\r\n"
      ],
      [
        "at",
        "ter"
      ],
      [
        "operation",
        "s "
      ],
      [
        ") ",
        "= "
      ],
      [
        "per",
        "s"
      ],
      [
        "ma",
        "y "
      ],
      [
        "si",
        "on"
      ],
      [
        "sh",
        "ould "
      ],
      [
        "ta",
        "k"
      ],
      [
        "l",
        "a"
      ],
      [
        "o",
        "ve "
      ],
      [
        "ch",
        "oo"
      ],
      [
        "po",
        "p"
      ],
      [
        " ",
        "in range("
      ],
      [
        ". ",
        "We "
      ],
      [
        "[i",
        " - "
      ],
      [
        "iv",
        "en the "
      ],
      [
        "n",
        "ull"
      ],
      [
        "Output: ",
        "1\r\n"
      ],
      [
        "ed",
        "g"
      ],
      [
        "ei",
        "ther "
      ],
      [
        "E",
        "ach "
      ],
      [
        "s",
        "` "
      ],
      [
        "S",
        "u"
      ],
      [
        "p",
        "r"
      ],
      [
        "integ",
        "er"
      ],
      [
        "mat",
        "ch"
      ],
      [
        "to ",
        "find the "
      ],
      [
        "di",
        "ction"
      ],
      [
        "0 ",
        "and "
      ],
      [
        "b",
        "re"
      ],
      [
        "matri",
        "x "
      ],
      [
        "i",
        " = "
      ],
      [
        "[i][",
        "j"
      ],
      [
        "a",
        "a"
      ],
      [
        "s",
        ". The "
      ],
      [
        "gra",
        "m"
      ],
      [
        "s ",
        "of the "
      ],
      [
        "in",
        "clu"
      ],
      [
        "as",
        "ing "
      ],
      [
        "ed",
        "_"
      ],
      [
        "For ",
        "example"
      ],
      [
        "iter",
        "ates "
      ],
      [
        "#",
        "#"
      ],
      [
        "ex",
        "ist"
      ],
      [
        "app",
        "ear"
      ],
      [
        "h",
        "ou"
      ],
      [
        "re",
        "e"
      ],
      [
        ") ",
        "- "
      ],
      [
        "3",
        "], "
      ],
      [
        "g",
        "oo"
      ],
      [
        "ar",
        "i"
      ],
      [
        "1 <= ",
        "nums"
      ],
      [
        "distin",
        "ct "
      ],
      [
        "a",
        "ul"
      ],
      [
        "        ",
        " "
      ],
      [
        "in",
        "f"
      ],
      [
        ", ",
        "so "
      ],
      [
        "ct",
        "ly "
      ],
      [
        "there ",
        "is "
      ],
      [
        "##",
        "# "
      ],
      [
        "po",
        "w"
      ],
      [
        "neighb",
        "or"
      ],
      [
        ")",
        ")"
      ],
      [
        "l",
        " the "
      ],
      [
        ": ",
        "List[int], "
      ],
      [
        "7",
        "\r\n"
      ],
      [
        "s",
        "_"
      ],
      [
        "def",
        "aul"
      ],
      [
        "D",
        "i"
      ],
      [
        "null",
        ","
      ],
      [
        "            ",
        "else:\r\n"
      ],
      [
        "un",
        "d"
      ],
      [
        "inter",
        "val"
      ],
      [
        "remain",
        "ing "
      ],
      [
        "3",
        ". **"
      ],
      [
        "e",
        "very "
      ],
      [
        "per",
        "m"
      ],
      [
        "), ",
        "("
      ],
      [
        "defaul",
        "t"
      ],
      [
        "dig",
        "its "
      ],
      [
        "col",
        "or"
      ],
      [
        "can",
        "di"
      ],
      [
        "consi",
        "der"
      ],
      [
        "lowercase ",
        "English letter"
      ],
      [
        "6",
        " "
      ],
      [
        "c",
        "y"
      ],
      [
        "ch",
        "an"
      ],
      [
        "[1,",
        "2,"
      ],
      [
        "'",
        "s the "
      ],
      [
        "s",
        "core"
      ],
      [
        "pre",
        "v"
      ],
      [
        "#",
        "         "
      ],
      [
        "s",
        "ing "
      ],
      [
        "calcul",
        "ates the "
      ],
      [
        "stac",
        "k"
      ],
      [
        "0-index",
        "ed "
      ],
      [
        "of ",
        "length "
      ],
      [
        "requi",
        "red "
      ],
      [
        "#         ",
        "self."
      ],
      [
        "sol",
        "ve "
      ],
      [
        "p",
        "p"
      ],
      [
        "\"",
        "]\r\n"
      ],
      [
        "m",
        "e "
      ],
      [
        ".",
        "\",\""
      ],
      [
        "B",
        "ob"
      ],
      [
        "uni",
        "que "
      ],
      [
        "thre",
        "e "
      ],
      [
        "h",
        "el"
      ],
      [
        "at ",
        "most "
      ],
      [
        "(self, ",
        "nums"
      ],
      [
        "Tru",
        "e\r\n"
      ],
      [
        "i ",
        "< "
      ],
      [
        "ther",
        "wise"
      ],
      [
        "default",
        "dict"
      ],
      [
        "\\",
        "("
      ],
      [
        "matri",
        "x"
      ],
      [
        "​",
        "​"
      ],
      [
        "new",
        "_"
      ],
      [
        "Output: ",
        "0\r\n"
      ],
      [
        "com",
        "m"
      ],
      [
        "o",
        "ver"
      ],
      [
        "= ",
        "0\r\n"
      ],
      [
        "it ",
        "is "
      ],
      [
        "en",
        "ti"
      ],
      [
        "ti",
        "s"
      ],
      [
        "se",
        "cu"
      ],
      [
        "ver",
        "s"
      ],
      [
        "X",
        "OR "
      ],
      [
        "om",
        "e "
      ],
      [
        "`",
        "n"
      ],
      [
        "valu",
        "es"
      ],
      [
        "an integer ",
        "array "
      ],
      [
        "_",
        "_"
      ],
      [
        "b",
        "ase"
      ],
      [
        "s ",
        "is "
      ],
      [
        "Here",
        "'s the "
      ],
      [
        "ar",
        "d "
      ],
      [
        "j ",
        "in range("
      ],
      [
        "3",
        "] "
      ],
      [
        "e",
        "."
      ],
      [
        "po",
        "int "
      ],
      [
        "chec",
        "k "
      ],
      [
        "c",
        "at"
      ],
      [
        "* ",
        "10"
      ],
      [
        "sa",
        "tis"
      ],
      [
        "row",
        " "
      ],
      [
        "con",
        "secu"
      ],
      [
        "1",
        "2"
      ],
      [
        "it",
        "y"
      ],
      [
        "3,",
        "2,"
      ],
      [
        "9",
        " + "
      ],
      [
        "c",
        "e the "
      ],
      [
        "m",
        "ar"
      ],
      [
        "0,0,",
        "0,0,"
      ],
      [
        "use ",
        "a "
      ],
      [
        "-",
        "1, "
      ],
      [
        "an",
        "t "
      ],
      [
        "p",
        "er "
      ],
      [
        "<= 10",
        "9\r\n"
      ],
      [
        "re",
        "plac"
      ],
      [
        "all",
        "y"
      ],
      [
        "ke",
        "y"
      ],
      [
        "do",
        "es "
      ],
      [
        "less ",
        "than "
      ],
      [
        "en",
        "sur"
      ],
      [
        "al",
        "low"
      ],
      [
        "ch",
        "ild"
      ],
      [
        "min",
        "im"
      ],
      [
        "will ",
        "be "
      ],
      [
        "f",
        "li"
      ],
      [
        "nums",
        "2"
      ],
      [
        "array",
        ".\r\n"
      ],
      [
        "i ",
        "+ "
      ],
      [
        "list ",
        "of "
      ],
      [
        "Su",
        "b"
      ],
      [
        "s ",
        "("
      ],
      [
        "] ",
        "== "
      ],
      [
        "chec",
        "ks "
      ],
      [
        "de",
        "p"
      ],
      [
        "Output: ",
        "\""
      ],
      [
        "`",
        "dp"
      ],
      [
        "        ",
        "max_"
      ],
      [
        "num",
        " "
      ],
      [
        "co",
        "de"
      ],
      [
        ": List[int]",
        ") -> int:\r\n"
      ],
      [
        "mo",
        "d"
      ],
      [
        "ev",
        "en "
      ],
      [
        "co",
        "in"
      ],
      [
        "in the ",
        "range "
      ],
      [
        "de",
        "fin"
      ],
      [
        "1 <= ",
        "n "
      ],
      [
        "T",
        "im"
      ],
      [
        "p",
        "atter"
      ],
      [
        "s",
        "."
      ],
      [
        ", and ",
        "the "
      ],
      [
        "### ",
        "Explanation:\r\n"
      ],
      [
        "d",
        "y"
      ],
      [
        "con",
        "dition"
      ],
      [
        "as ",
        "the "
      ],
      [
        "ev",
        "en"
      ],
      [
        "consist",
        "s of "
      ],
      [
        "possible ",
        "to "
      ],
      [
        "st",
        "ep "
      ],
      [
        "frequen",
        "cy "
      ],
      [
        "stor",
        "e the "
      ],
      [
        "solve ",
        "this "
      ],
      [
        "u",
        "d"
      ],
      [
        "st",
        "on"
      ],
      [
        "ab",
        "le"
      ],
      [
        ". ",
        "S"
      ],
      [
        "from ",
        "colle"
      ],
      [
        "2 ",
        "<= "
      ],
      [
        "ex",
        "t"
      ],
      [
        "me",
        "an"
      ],
      [
        "ctions ",
        "import "
      ],
      [
        "from colle",
        "ctions import "
      ],
      [
        ")",
        "]\r\n"
      ],
      [
        "does ",
        "not "
      ],
      [
        "righ",
        "t = "
      ],
      [
        "pair",
        " "
      ],
      [
        "c",
        "d"
      ],
      [
        "ne",
        "ga"
      ],
      [
        "greater ",
        "than "
      ],
      [
        "tim",
        "e"
      ],
      [
        "\"",
        "b"
      ],
      [
        "ut",
        "e "
      ],
      [
        "sub",
        "sequen"
      ],
      [
        "nee",
        "ded "
      ],
      [
        "sh",
        "own "
      ],
      [
        "n",
        "i"
      ],
      [
        "[i",
        "], "
      ],
      [
        "secon",
        "d"
      ],
      [
        "`",
        ", "
      ],
      [
        ": ",
        "str"
      ],
      [
        ") ",
        "+ "
      ],
      [
        "]",
        "], "
      ],
      [
        "m",
        ", "
      ],
      [
        "left",
        "_"
      ],
      [
        "flo",
        "at"
      ],
      [
        "the",
        "m "
      ],
      [
        "integer ",
        "array "
      ],
      [
        ". ",
        "\r\n"
      ],
      [
        "1 ",
        "to "
      ],
      [
        "` ",
        "is "
      ],
      [
        "c",
        "lo"
      ],
      [
        "s",
        "ome "
      ],
      [
        "w",
        "eigh"
      ],
      [
        "        # ",
        "Initializ"
      ],
      [
        "tim",
        "es "
      ],
      [
        "si",
        "on "
      ],
      [
        "g",
        "ener"
      ],
      [
        "de",
        "cre"
      ],
      [
        "con",
        "t"
      ],
      [
        "wor",
        "k"
      ],
      [
        "b",
        "al"
      ],
      [
        "time ",
        "complex"
      ],
      [
        "A",
        "fter "
      ],
      [
        "d",
        "o "
      ],
      [
        "maximum ",
        "number of "
      ],
      [
        "`",
        "i"
      ],
      [
        "represent",
        "s the "
      ],
      [
        "keep ",
        "track of the "
      ],
      [
        "st",
        "ri"
      ],
      [
        "val",
        "id"
      ],
      [
        "mov",
        "es "
      ],
      [
        "Coun",
        "ter"
      ],
      [
        "2",
        "D "
      ],
      [
        "tru",
        "e\r\n"
      ],
      [
        "operation",
        " "
      ],
      [
        "(",
        "i"
      ],
      [
        "m",
        "ing "
      ],
      [
        "par",
        "ti"
      ],
      [
        "D",
        "e"
      ],
      [
        "Output: ",
        "true\r\n"
      ],
      [
        "T",
        "ree"
      ],
      [
        "le",
        "m "
      ],
      [
        "[",
        "1"
      ],
      [
        "h",
        "and"
      ],
      [
        "differ",
        "ent "
      ],
      [
        "dire",
        "ction"
      ],
      [
        "is",
        "_"
      ],
      [
        "To ",
        "solve this "
      ],
      [
        "', ",
        "'"
      ],
      [
        "4",
        ".\r\n"
      ],
      [
        "comp",
        "let"
      ],
      [
        "List[List[int]",
        "]"
      ],
      [
        "nam",
        "ic "
      ],
      [
        "l",
        "ar"
      ],
      [
        "com",
        "bin"
      ],
      [
        "imp",
        "lement"
      ],
      [
        "heigh",
        "t "
      ],
      [
        "- ",
        "**"
      ],
      [
        "ed",
        "ge "
      ],
      [
        "bo",
        "ard"
      ],
      [
        "contain",
        "s "
      ],
      [
        "calcul",
        "ate the "
      ],
      [
        "o",
        "ver "
      ],
      [
        "in",
        "put "
      ],
      [
        "[i",
        " + "
      ],
      [
        "+ 1",
        "):\r\n"
      ],
      [
        "Not",
        "e that "
      ],
      [
        "prob",
        "lem "
      ],
      [
        "A",
        "l"
      ],
      [
        "a",
        "ge"
      ],
      [
        "d",
        "en"
      ],
      [
        "consecu",
        "tive "
      ],
      [
        "0",
        "]\r\n"
      ],
      [
        "k",
        ".\r\n"
      ],
      [
        "re",
        "pe"
      ],
      [
        "ran",
        "s"
      ],
      [
        "con",
        "ver"
      ],
      [
        "produ",
        "ct "
      ],
      [
        "0 ",
        "to "
      ],
      [
        "uni",
        "que"
      ],
      [
        "-",
        "10"
      ],
      [
        "it",
        "em"
      ],
      [
        "pre",
        "vi"
      ],
      [
        "par",
        "ent"
      ],
      [
        "way",
        "s to "
      ],
      [
        "For example",
        ", "
      ],
      [
        "in",
        "u"
      ],
      [
        "en",
        "ces "
      ],
      [
        "is ",
        "to "
      ],
      [
        "equ",
        "al"
      ],
      [
        "re",
        "ad"
      ],
      [
        "o",
        "re"
      ],
      [
        "sh",
        "ort"
      ],
      [
        "f",
        "act"
      ],
      [
        "wi",
        "se "
      ],
      [
        "t",
        "s "
      ],
      [
        ") ",
        "for "
      ],
      [
        "op",
        "tim"
      ],
      [
        "bre",
        "a"
      ],
      [
        "co",
        "ord"
      ],
      [
        "max",
        "im"
      ],
      [
        "This solution use",
        "s a "
      ],
      [
        "wind",
        "ow "
      ],
      [
        "pers",
        "on "
      ],
      [
        "re",
        "ct"
      ],
      [
        "se",
        "s "
      ],
      [
        "count",
        "_"
      ],
      [
        "e ",
        "if "
      ],
      [
        "nums",
        "1"
      ],
      [
        "use",
        "d "
      ],
      [
        "bac",
        "k"
      ],
      [
        ")",
        "):\r\n"
      ],
      [
        "x",
        "i"
      ],
      [
        "c",
        "ase"
      ],
      [
        "ar",
        " "
      ],
      [
        "We ",
        "can "
      ],
      [
        "string",
        "s "
      ],
      [
        "Output: ",
        "4\r\n"
      ],
      [
        "ul",
        "o "
      ],
      [
        "-",
        "b"
      ],
      [
        "A",
        "d"
      ],
      [
        "sum",
        "("
      ],
      [
        "sw",
        "ap"
      ],
      [
        "Output: ",
        "1"
      ],
      [
        "It ",
        "can be "
      ],
      [
        "I",
        "ter"
      ],
      [
        "perm",
        "ut"
      ],
      [
        "rect",
        "ang"
      ],
      [
        "g",
        "o"
      ],
      [
        "cur",
        "si"
      ],
      [
        "ke",
        "y "
      ],
      [
        "w",
        "ay "
      ],
      [
        "ab",
        "ove "
      ],
      [
        "'",
        ".\r\n"
      ],
      [
        "has ",
        "a "
      ],
      [
        "st",
        "ud"
      ],
      [
        "for ",
        "a "
      ],
      [
        "[",
        "j"
      ],
      [
        "a",
        ", "
      ],
      [
        ". ",
        "Th"
      ],
      [
        "lef",
        "t = "
      ],
      [
        "ate",
        "("
      ],
      [
        "y ",
        "the "
      ],
      [
        "O",
        "n"
      ],
      [
        "[",
        "\""
      ],
      [
        "d",
        "ay "
      ],
      [
        "return",
        "s "
      ],
      [
        "b",
        "ea"
      ],
      [
        "l",
        "im"
      ],
      [
        "bo",
        "ol"
      ],
      [
        "                    ",
        "if "
      ],
      [
        "left",
        ", "
      ],
      [
        "pro",
        "gram"
      ],
      [
        "f",
        "ter"
      ],
      [
        "ch",
        "ang"
      ],
      [
        "i, ",
        "j"
      ],
      [
        "N",
        "one"
      ],
      [
        "S",
        "um"
      ],
      [
        "th",
        "an"
      ],
      [
        "es",
        "\r\n"
      ],
      [
        ", ",
        "return the "
      ],
      [
        "se",
        "d "
      ],
      [
        "O",
        "p"
      ],
      [
        "nums",
        ")\r\n"
      ],
      [
        "== ",
        "0:\r\n"
      ],
      [
        ": int",
        ") -> "
      ],
      [
        "bo",
        "x"
      ],
      [
        "sib",
        "le "
      ],
      [
        "with",
        "out "
      ],
      [
        "origin",
        "al "
      ],
      [
        "bal",
        "an"
      ],
      [
        "_",
        " in range("
      ],
      [
        "a ",
        "string "
      ],
      [
        "s: ",
        "str"
      ],
      [
        "adjac",
        "ent "
      ],
      [
        "-= ",
        "1\r\n"
      ],
      [
        "b",
        " "
      ],
      [
        "s",
        "ince "
      ],
      [
        "de",
        "gre"
      ],
      [
        "goo",
        "d "
      ],
      [
        "am",
        "oun"
      ],
      [
        "word",
        "s"
      ],
      [
        "way",
        "s "
      ],
      [
        "namic ",
        "program"
      ],
      [
        "y",
        "-"
      ],
      [
        "- ",
        "1"
      ],
      [
        "fin",
        "al "
      ],
      [
        "od",
        "d "
      ],
      [
        "5",
        "]\r\n"
      ],
      [
        "`k",
        "` "
      ],
      [
        "c",
        "le"
      ],
      [
        "s",
        "ent"
      ],
      [
        "val",
        " "
      ],
      [
        "rou",
        "p "
      ],
      [
        "ex",
        "pres"
      ],
      [
        "right",
        "_"
      ],
      [
        "sing",
        "le "
      ],
      [
        "r",
        "un"
      ],
      [
        "x",
        " = "
      ],
      [
        ", we ",
        "need to "
      ],
      [
        "ke",
        "ep"
      ],
      [
        "bot",
        "to"
      ],
      [
        "Iter",
        "ate "
      ],
      [
        "5",
        ".\r\n"
      ],
      [
        "c",
        "ap"
      ],
      [
        "dy",
        "namic program"
      ],
      [
        "coord",
        "in"
      ],
      [
        "t ",
        "of "
      ],
      [
        "un",
        "ti"
      ],
      [
        "let",
        "ter "
      ],
      [
        "j",
        "um"
      ],
      [
        "re",
        "move "
      ],
      [
        "point",
        "s "
      ],
      [
        "ach",
        "i"
      ],
      [
        "visit",
        "ed"
      ],
      [
        "mod",
        "ulo "
      ],
      [
        ") ",
        "% "
      ],
      [
        "us",
        "ing the "
      ],
      [
        "comp",
        "on"
      ],
      [
        "D",
        "FS"
      ],
      [
        "b",
        "b"
      ],
      [
        "order",
        ".\r\n"
      ],
      [
        "multi",
        "ple "
      ],
      [
        "diction",
        "ary "
      ],
      [
        "ac",
        "c"
      ],
      [
        "        # ",
        "S"
      ],
      [
        "than",
        " the "
      ],
      [
        "You ",
        "can "
      ],
      [
        "ate ",
        "a "
      ],
      [
        "'",
        "a"
      ],
      [
        "M",
        "O"
      ],
      [
        "t",
        "rans"
      ],
      [
        "ge",
        "t "
      ],
      [
        "fir",
        "st"
      ],
      [
        "result",
        "\r\n"
      ],
      [
        "wor",
        "ks "
      ],
      [
        "total ",
        "number of "
      ],
      [
        "lowercase English letter",
        "s.\r\n"
      ],
      [
        "To solve this ",
        "problem"
      ],
      [
        "bool",
        ":\r\n"
      ],
      [
        "ma",
        "k"
      ],
      [
        "2,",
        "2,"
      ],
      [
        "cont",
        "inu"
      ],
      [
        "distan",
        "ce"
      ],
      [
        "` and ",
        "`"
      ],
      [
        "9",
        " "
      ],
      [
        "ti",
        "vel"
      ],
      [
        "de",
        "sc"
      ],
      [
        "ing ",
        "a "
      ],
      [
        "[i] ",
        "= "
      ],
      [
        "il",
        "d "
      ],
      [
        "00",
        "00"
      ],
      [
        "result",
        "ing "
      ],
      [
        "max(",
        "max_"
      ],
      [
        "m",
        "id "
      ],
      [
        "1,",
        "0,"
      ],
      [
        "inf",
        "'"
      ],
      [
        "float",
        "('"
      ],
      [
        "previ",
        "ous "
      ],
      [
        "g",
        "ori"
      ],
      [
        "appro",
        "ach"
      ],
      [
        "se",
        "g"
      ],
      [
        "through",
        " "
      ],
      [
        "P",
        "a"
      ],
      [
        "ad",
        "d "
      ],
      [
        "fin",
        "d "
      ],
      [
        "heap",
        "q"
      ],
      [
        "<= 10",
        "0\r\n"
      ],
      [
        "value ",
        "of "
      ],
      [
        "Fin",
        "d the "
      ],
      [
        "Tree",
        "Node"
      ],
      [
        "j",
        "o"
      ],
      [
        "k",
        " the "
      ],
      [
        "el",
        "se "
      ],
      [
        "colum",
        "n "
      ],
      [
        "base",
        "d "
      ],
      [
        "w",
        "ould "
      ],
      [
        "            ",
        "while "
      ],
      [
        "sp",
        "on"
      ],
      [
        "gori",
        "th"
      ],
      [
        "- ",
        "The "
      ],
      [
        "el",
        "if "
      ],
      [
        "fin",
        "i"
      ],
      [
        "bu",
        "t "
      ],
      [
        "edg",
        "es "
      ],
      [
        "6",
        ", "
      ],
      [
        " = ",
        "0\r\n"
      ],
      [
        "            for ",
        "j in range("
      ],
      [
        "comm",
        "on "
      ],
      [
        "f",
        "u"
      ],
      [
        "tra",
        "vers"
      ],
      [
        "indi",
        "ces"
      ],
      [
        "2 ",
        "and "
      ],
      [
        "count ",
        "the "
      ],
      [
        "\"",
        "],["
      ],
      [
        "i",
        "\r\n"
      ],
      [
        "en",
        "g"
      ],
      [
        "List[",
        "str"
      ],
      [
        "-1",
        ".\r\n"
      ],
      [
        "ha",
        "ve the "
      ],
      [
        "to",
        "_"
      ],
      [
        "List[int]",
        ":\r\n"
      ],
      [
        "quer",
        "y"
      ],
      [
        "short",
        "est "
      ],
      [
        "4",
        ". **"
      ],
      [
        "le",
        "s "
      ],
      [
        "There ",
        "is "
      ],
      [
        "MO",
        "D"
      ],
      [
        "g",
        "roup "
      ],
      [
        "o",
        "ut"
      ],
      [
        "8",
        "\r\n"
      ],
      [
        "P",
        "o"
      ],
      [
        "c",
        " "
      ],
      [
        "Output: ",
        "f"
      ],
      [
        "Bob",
        " "
      ],
      [
        "to",
        "p"
      ],
      [
        "us",
        "e the "
      ],
      [
        "prefix",
        "_sum"
      ],
      [
        "squ",
        "are"
      ],
      [
        "h",
        "al"
      ],
      [
        "1",
        ". "
      ],
      [
        "um",
        "er"
      ],
      [
        "Output: f",
        "alse\r\n"
      ],
      [
        "V",
        "al"
      ],
      [
        "ar",
        "y"
      ],
      [
        "divi",
        "s"
      ],
      [
        "[",
        "3,"
      ],
      [
        "nega",
        "tive "
      ],
      [
        "in",
        "ce the "
      ],
      [
        "v",
        "ow"
      ],
      [
        "squ",
        "are "
      ],
      [
        "time complex",
        "ity "
      ],
      [
        "per",
        "form"
      ],
      [
        "binary ",
        "search "
      ],
      [
        "queu",
        "e"
      ],
      [
        "p",
        "ic"
      ],
      [
        "wh",
        "er"
      ],
      [
        "Explanation: ",
        "\r\n"
      ],
      [
        "tre",
        "e"
      ],
      [
        "7",
        ".\r\n"
      ],
      [
        "y ",
        "= "
      ],
      [
        "2 ",
        "* "
      ],
      [
        "O(",
        "n"
      ],
      [
        "dynamic program",
        "ming "
      ],
      [
        "a",
        "ge "
      ],
      [
        "y",
        "our "
      ],
      [
        "1 ",
        "- "
      ],
      [
        "        # ",
        "C"
      ],
      [
        "\" ",
        "and "
      ],
      [
        "an array ",
        "of "
      ],
      [
        "b",
        "l"
      ],
      [
        "le",
        "xi"
      ],
      [
        "int",
        "a"
      ],
      [
        "ec",
        "t"
      ],
      [
        "Fin",
        "ally"
      ],
      [
        "m",
        "on"
      ],
      [
        "se",
        "le"
      ],
      [
        "C",
        "o"
      ],
      [
        "en",
        "umer"
      ],
      [
        "sm",
        "all"
      ],
      [
        "approach ",
        "ensures that "
      ],
      [
        "-",
        "1,"
      ],
      [
        "m",
        "any "
      ],
      [
        "ev",
        "ent"
      ],
      [
        "corre",
        "spon"
      ],
      [
        "enumer",
        "ate("
      ],
      [
        "ge",
        "t"
      ],
      [
        "wh",
        "en "
      ],
      [
        "array ",
        "is "
      ],
      [
        "choo",
        "se "
      ],
      [
        "3",
        " + "
      ],
      [
        "ab",
        "s("
      ],
      [
        "+ 1",
        ")\r\n"
      ],
      [
        "queu",
        "e "
      ],
      [
        "de",
        "let"
      ],
      [
        "be",
        "for"
      ],
      [
        "u",
        "s "
      ],
      [
        "count ",
        "of "
      ],
      [
        "betwe",
        "en the "
      ],
      [
        "'",
        "1"
      ],
      [
        "s",
        "k"
      ],
      [
        "s",
        "):\r\n"
      ],
      [
        ", ",
        "c"
      ],
      [
        "1 ",
        "= ["
      ],
      [
        "1 <= ",
        "nums[i] "
      ],
      [
        "s of ",
        "length "
      ],
      [
        "f",
        "ul"
      ],
      [
        "al",
        "read"
      ],
      [
        "al",
        "gorith"
      ],
      [
        "co",
        "graph"
      ],
      [
        "10",
        "0"
      ],
      [
        "pri",
        "me "
      ],
      [
        "7",
        " "
      ],
      [
        "ort ",
        "the "
      ],
      [
        "lexi",
        "cograph"
      ],
      [
        "A",
        "ll "
      ],
      [
        "U",
        "p"
      ],
      [
        "re",
        "ach "
      ],
      [
        "ma",
        "inta"
      ],
      [
        "lo",
        "g"
      ],
      [
        "This solution ",
        "works "
      ],
      [
        "ob",
        "ta"
      ],
      [
        "grid ",
        "= ["
      ],
      [
        "count = ",
        "0\r\n"
      ],
      [
        "ing",
        "_"
      ],
      [
        "valu",
        "e"
      ],
      [
        "sh",
        "if"
      ],
      [
        "sort",
        "ed"
      ],
      [
        "loc",
        "k"
      ],
      [
        "next",
        "_"
      ],
      [
        "4",
        "],["
      ],
      [
        "quer",
        "y "
      ],
      [
        "ation ",
        "of the "
      ],
      [
        "n ",
        "and "
      ],
      [
        "ed ",
        "as "
      ],
      [
        "con",
        "stru"
      ],
      [
        "min",
        "ut"
      ],
      [
        "[0",
        "]["
      ],
      [
        "for",
        "m the "
      ],
      [
        "la",
        "st_"
      ],
      [
        "den",
        "ot"
      ],
      [
        ".",
        "e."
      ],
      [
        "[0",
        ", "
      ],
      [
        "'",
        "0"
      ],
      [
        ") ",
        "to "
      ],
      [
        "Tru",
        "e"
      ],
      [
        "pr",
        "int("
      ],
      [
        "l",
        "y"
      ],
      [
        "tion",
        "al"
      ],
      [
        "num",
        " in "
      ],
      [
        "si",
        "de "
      ],
      [
        "The ",
        "number of "
      ],
      [
        ".length <= 10",
        "0\r\n"
      ],
      [
        "This solution use",
        "s "
      ],
      [
        "up ",
        "to "
      ],
      [
        "h",
        "ow "
      ],
      [
        "[i",
        "]\r\n"
      ],
      [
        "<= 10",
        "00\r\n"
      ],
      [
        "foun",
        "d "
      ],
      [
        "alread",
        "y "
      ],
      [
        "Up",
        "d"
      ],
      [
        "pl",
        "ic"
      ],
      [
        "ation ",
        "of "
      ],
      [
        "stac",
        "k "
      ],
      [
        "\"],[",
        "\""
      ],
      [
        "N",
        "on"
      ],
      [
        "f",
        "ru"
      ],
      [
        "ro",
        "t"
      ],
      [
        "answer ",
        "is "
      ],
      [
        "colum",
        "n"
      ],
      [
        "child",
        "r"
      ],
      [
        "lexicograph",
        "ic"
      ],
      [
        "`",
        "s"
      ],
      [
        "wher",
        "e the "
      ],
      [
        "i",
        "p"
      ],
      [
        "o",
        "p "
      ],
      [
        "t",
        "ing "
      ],
      [
        "at ",
        "index "
      ],
      [
        "val",
        " = "
      ],
      [
        "1 <= ",
        "s"
      ],
      [
        "fter",
        " the "
      ],
      [
        "(",
        "1, "
      ],
      [
        "se",
        "ct"
      ],
      [
        "co",
        "de "
      ],
      [
        "Input: ",
        "grid = ["
      ],
      [
        "], ",
        "k = "
      ],
      [
        "pri",
        "ce "
      ],
      [
        "You are given a ",
        "0-indexed "
      ],
      [
        "add",
        "("
      ],
      [
        "sig",
        "n"
      ],
      [
        "8",
        " "
      ],
      [
        "f",
        "ore"
      ],
      [
        "h",
        "as"
      ],
      [
        "s ",
        "with "
      ],
      [
        "le",
        "vel"
      ],
      [
        "10",
        "\r\n"
      ],
      [
        "me",
        "et"
      ],
      [
        "2",
        "3"
      ],
      [
        "9",
        "9"
      ],
      [
        "W",
        "h"
      ],
      [
        "tim",
        "es"
      ],
      [
        ". If ",
        "the "
      ],
      [
        "iter",
        "ate "
      ],
      [
        "1",
        ")"
      ],
      [
        "in",
        "n"
      ],
      [
        "to ",
        "store the "
      ],
      [
        "* ",
        "n\r\n"
      ],
      [
        "indi",
        "c"
      ],
      [
        "graph",
        "["
      ],
      [
        "root ",
        "= ["
      ],
      [
        "i",
        "de"
      ],
      [
        "re",
        "spec"
      ],
      [
        "**: ",
        "For each "
      ],
      [
        "c",
        "ity "
      ],
      [
        "= ",
        "\""
      ],
      [
        "Input: ",
        "root = ["
      ],
      [
        "coun",
        "ter"
      ],
      [
        "        # ",
        "Calculate the "
      ],
      [
        "we ",
        "return "
      ],
      [
        "ve",
        "l "
      ],
      [
        "a, ",
        "b"
      ],
      [
        "Op",
        "tional"
      ],
      [
        "float('",
        "inf'"
      ],
      [
        "no",
        "w"
      ],
      [
        "cost ",
        "of "
      ],
      [
        "G",
        "iven the "
      ],
      [
        "at",
        "t"
      ],
      [
        "# ",
        "print("
      ],
      [
        "fre",
        "q"
      ],
      [
        "or ",
        "equal to "
      ],
      [
        "1",
        ": "
      ],
      [
        "e ",
        "a "
      ],
      [
        "**",
        ":\r\n"
      ],
      [
        "palindro",
        "m"
      ],
      [
        "tas",
        "k"
      ],
      [
        "shown ",
        "that "
      ],
      [
        "_",
        "index"
      ],
      [
        "a",
        "ver"
      ],
      [
        "  ",
        " "
      ],
      [
        "string",
        ".\r\n"
      ],
      [
        "d",
        "\r\n"
      ],
      [
        "                ",
        "for "
      ],
      [
        "count",
        "\r\n"
      ],
      [
        "Ch",
        "oo"
      ],
      [
        "lin",
        "e "
      ],
      [
        "spl",
        "it "
      ],
      [
        ".\",\"",
        ".\",\""
      ],
      [
        "rever",
        "se"
      ],
      [
        "small",
        "er "
      ],
      [
        "2",
        ": "
      ],
      [
        "th",
        "ir"
      ],
      [
        "bo",
        "und"
      ],
      [
        ". It ",
        "then "
      ],
      [
        "incre",
        "asing "
      ],
      [
        "] ",
        "+ "
      ],
      [
        "Input: nums = [",
        "1,2,"
      ],
      [
        "clo",
        "se"
      ],
      [
        "stri",
        "ctly "
      ],
      [
        "[",
        "j] "
      ],
      [
        "f",
        "ri"
      ],
      [
        "Explanation: ",
        "There are "
      ],
      [
        "targe",
        "t = "
      ],
      [
        "graph",
        " "
      ],
      [
        "g",
        "er "
      ],
      [
        "4",
        "]\r\n"
      ],
      [
        "b",
        "e the "
      ],
      [
        "re",
        "cursi"
      ],
      [
        "or",
        " the "
      ],
      [
        "al",
        "ways "
      ],
      [
        "ch",
        "o"
      ],
      [
        "possib",
        "le"
      ],
      [
        "effici",
        "ent "
      ],
      [
        "return",
        "s the "
      ],
      [
        "le",
        "ad"
      ],
      [
        "ab",
        "sol"
      ],
      [
        "ce",
        ".\r\n"
      ],
      [
        "compon",
        "ent"
      ],
      [
        "vow",
        "el"
      ],
      [
        "F",
        "alse"
      ],
      [
        "ro",
        "om"
      ],
      [
        "wind",
        "ow"
      ],
      [
        "1",
        "]["
      ],
      [
        "2",
        ") "
      ],
      [
        "in",
        "iti"
      ],
      [
        "le",
        "et"
      ],
      [
        "de",
        "st"
      ],
      [
        "k ",
        "<= "
      ],
      [
        "me",
        "di"
      ],
      [
        "absol",
        "ute "
      ],
      [
        "5",
        "],["
      ],
      [
        "le",
        "d "
      ],
      [
        "that ",
        "can be "
      ],
      [
        "        # ",
        "F"
      ],
      [
        "form ",
        "a "
      ],
      [
        "'",
        "\r\n"
      ],
      [
        "7",
        ", "
      ],
      [
        "        ",
        "dp"
      ],
      [
        "an",
        "t"
      ],
      [
        "di",
        "f"
      ],
      [
        "if ",
        "it "
      ],
      [
        "col",
        "or "
      ],
      [
        "visit",
        "ed "
      ],
      [
        "2",
        ". "
      ],
      [
        "P",
        "ro"
      ],
      [
        "a",
        "il"
      ],
      [
        "g",
        "i"
      ],
      [
        "le",
        "a"
      ],
      [
        "divi",
        "sible "
      ],
      [
        "conne",
        "ct"
      ],
      [
        "U",
        "se "
      ],
      [
        "u",
        "ti"
      ],
      [
        "array",
        "s "
      ],
      [
        "unti",
        "l "
      ],
      [
        "1",
        "]]\r\n"
      ],
      [
        "c",
        "ir"
      ],
      [
        "si",
        "m"
      ],
      [
        "s = ",
        "0\r\n"
      ],
      [
        "follow",
        "s:\r\n"
      ],
      [
        "t",
        "ext"
      ],
      [
        "0 ",
        "or "
      ],
      [
        "len(",
        "nums"
      ],
      [
        "ke",
        "t"
      ],
      [
        "to",
        "p "
      ],
      [
        "rema",
        "ind"
      ],
      [
        "St",
        "ar"
      ],
      [
        "'",
        ":\r\n"
      ],
      [
        "k",
        ", "
      ],
      [
        "o",
        "f"
      ],
      [
        "su",
        "ffi"
      ],
      [
        "that ",
        "is "
      ],
      [
        "= [",
        "]\r\n"
      ],
      [
        "        return ",
        "result\r\n"
      ],
      [
        "the",
        "m"
      ],
      [
        "binary ",
        "tree "
      ],
      [
        "defaultdict",
        "("
      ],
      [
        "val",
        "\r\n"
      ],
      [
        "from ",
        "0 to "
      ],
      [
        "ex",
        "ce"
      ],
      [
        "[0",
        "]"
      ],
      [
        "are",
        "a "
      ],
      [
        "pow",
        "er "
      ],
      [
        "))",
        "  # "
      ],
      [
        "cat",
        "en"
      ],
      [
        "approach",
        ":\r\n"
      ],
      [
        "3",
        " = "
      ],
      [
        "B",
        "FS"
      ],
      [
        "e",
        "t "
      ],
      [
        "co",
        "ver"
      ],
      [
        "        # ",
        "Iterate "
      ],
      [
        "i ",
        "and "
      ],
      [
        "i ",
        "- "
      ],
      [
        "lin",
        "ked "
      ],
      [
        "fact",
        "or"
      ],
      [
        "of ",
        "size "
      ],
      [
        "it",
        "'s "
      ],
      [
        "zer",
        "o "
      ],
      [
        "        for i in range(",
        "1, "
      ],
      [
        "-b",
        "y-"
      ],
      [
        "[",
        "-1"
      ],
      [
        "p",
        "as"
      ],
      [
        "}",
        "\r\n"
      ],
      [
        "th",
        "-"
      ],
      [
        "an ",
        "empty "
      ],
      [
        "**: ",
        "The "
      ],
      [
        "equal ",
        "to the "
      ],
      [
        "pu",
        "sh"
      ],
      [
        "..",
        "."
      ],
      [
        "step",
        "-by-"
      ],
      [
        "pe",
        "o"
      ],
      [
        "chan",
        "ge"
      ],
      [
        "correspon",
        "ding "
      ],
      [
        "0",
        ")\r\n"
      ],
      [
        "A",
        "r"
      ],
      [
        "N",
        "um"
      ],
      [
        "c",
        "n"
      ],
      [
        "at",
        "ing the "
      ],
      [
        "2,",
        "3,"
      ],
      [
        "speci",
        "al "
      ],
      [
        "step-by-",
        "step "
      ],
      [
        "[",
        "x"
      ],
      [
        "b",
        "it "
      ],
      [
        "d",
        ", "
      ],
      [
        "r",
        "y "
      ],
      [
        "10",
        " "
      ],
      [
        "are ",
        "the "
      ],
      [
        "sol",
        "."
      ],
      [
        "2",
        "]"
      ],
      [
        "co",
        "ur"
      ],
      [
        "am",
        "e"
      ],
      [
        "not ",
        "in "
      ],
      [
        "right",
        "\r\n"
      ],
      [
        "oc",
        "cur"
      ],
      [
        "occurr",
        "ences "
      ],
      [
        "divisible ",
        "by "
      ],
      [
        "O",
        "f"
      ],
      [
        "ing ",
        "of "
      ],
      [
        "ran",
        "g"
      ],
      [
        "all",
        "y, "
      ],
      [
        "needed ",
        "to "
      ],
      [
        "        # Initializ",
        "e the "
      ],
      [
        "P",
        "er"
      ],
      [
        "b",
        "a"
      ],
      [
        "m",
        "er"
      ],
      [
        "ri",
        "b"
      ],
      [
        "hea",
        "d "
      ],
      [
        "nodes ",
        "in the "
      ],
      [
        "Optional",
        "["
      ],
      [
        "[",
        "4,"
      ],
      [
        ". The ",
        "`"
      ],
      [
        "with",
        "in the "
      ],
      [
        "par",
        "t"
      ],
      [
        "requi",
        "re"
      ],
      [
        "thir",
        "d "
      ],
      [
        "f",
        "e"
      ],
      [
        "g",
        "iven the "
      ],
      [
        "o",
        "therwise"
      ],
      [
        "to ",
        "a "
      ],
      [
        "1,",
        "3,"
      ],
      [
        "from ",
        "1 to "
      ],
      [
        "plac",
        "e "
      ],
      [
        "_count",
        "["
      ],
      [
        "required ",
        "to "
      ],
      [
        "at",
        "es"
      ],
      [
        "node",
        ".\r\n"
      ],
      [
        "sequence ",
        "of "
      ],
      [
        "tri",
        "p"
      ],
      [
        "conne",
        "cted "
      ],
      [
        "b",
        "all"
      ],
      [
        "nums",
        ".\r\n"
      ],
      [
        "s, ",
        "and "
      ],
      [
        "sum ",
        "is "
      ],
      [
        "s[i] ",
        "= ["
      ],
      [
        "satis",
        "f"
      ],
      [
        "s",
        "li"
      ],
      [
        "th",
        "o"
      ],
      [
        "ti",
        "ve"
      ],
      [
        "ap",
        "pl"
      ],
      [
        "<= 10",
        "4\r\n"
      ],
      [
        "bo",
        "ard "
      ],
      [
        "is the ",
        "number of "
      ],
      [
        "tre",
        "e.\r\n"
      ],
      [
        "bu",
        "il"
      ],
      [
        "av",
        "o"
      ],
      [
        "patter",
        "n"
      ],
      [
        "subsequen",
        "ces "
      ],
      [
        "-",
        "1 "
      ],
      [
        "s",
        ") "
      ],
      [
        "ct ",
        "the "
      ],
      [
        "hea",
        "p "
      ],
      [
        "set ",
        "of "
      ],
      [
        "\"",
        "], "
      ],
      [
        "O",
        "peration"
      ],
      [
        "in",
        "ser"
      ],
      [
        "have ",
        "a "
      ],
      [
        "parti",
        "tion"
      ],
      [
        "List[List[int]]",
        ") -> int:\r\n"
      ],
      [
        "\"",
        "0"
      ],
      [
        "&",
        " "
      ],
      [
        "5",
        "0\r\n"
      ],
      [
        "M",
        "a"
      ],
      [
        "me",
        "mo"
      ],
      [
        "stud",
        "ent"
      ],
      [
        "# print(",
        "sol."
      ],
      [
        "lead",
        "ing "
      ],
      [
        "'",
        "."
      ],
      [
        "(",
        "`"
      ],
      [
        "mas",
        "k "
      ],
      [
        "* 10",
        "4\r\n"
      ],
      [
        "mean",
        "s "
      ],
      [
        "bea",
        "uti"
      ],
      [
        "k",
        ": int) -> int:\r\n"
      ],
      [
        "s",
        "e the "
      ],
      [
        ", ",
        "which "
      ],
      [
        "left",
        "\r\n"
      ],
      [
        "(i",
        ".e."
      ],
      [
        "(",
        "x"
      ],
      [
        "on",
        "g "
      ],
      [
        "sub",
        "tree "
      ],
      [
        "approach ",
        "to "
      ],
      [
        "tas",
        "k "
      ],
      [
        "Al",
        "l the "
      ],
      [
        "way ",
        "to "
      ],
      [
        "O",
        "therwise"
      ],
      [
        "            ",
        "max_"
      ],
      [
        "s, ",
        "the "
      ],
      [
        ") -> ",
        "bool:\r\n"
      ],
      [
        "ta",
        "ke "
      ],
      [
        "c",
        "c"
      ],
      [
        "    ",
        " "
      ],
      [
        "fi",
        "t "
      ],
      [
        "        for i in range(",
        "n):\r\n"
      ],
      [
        "play",
        "er "
      ],
      [
        "P",
        " "
      ],
      [
        "o",
        "k"
      ],
      [
        "ma",
        "p"
      ],
      [
        ") -> ",
        "List[int]:\r\n"
      ],
      [
        "' ",
        "and "
      ],
      [
        "left ",
        "and "
      ],
      [
        ".length <= 10",
        "00\r\n"
      ],
      [
        "more ",
        "than "
      ],
      [
        "mak",
        "e the "
      ],
      [
        "heapq",
        "."
      ],
      [
        "[",
        "1] "
      ],
      [
        ", ",
        "you "
      ],
      [
        "bit",
        "wise "
      ],
      [
        "determin",
        "e the "
      ],
      [
        "            ",
        "current_"
      ],
      [
        "                ",
        "\r\n"
      ],
      [
        "This ",
        "approach ensures that "
      ],
      [
        "starting ",
        "from "
      ],
      [
        "it",
        ".\r\n"
      ],
      [
        "result",
        ".append("
      ],
      [
        "            for ",
        "i in range("
      ],
      [
        "spac",
        "e "
      ],
      [
        "over",
        "l"
      ],
      [
        "initi",
        "al "
      ],
      [
        "]",
        ".append("
      ],
      [
        "length ",
        "of "
      ],
      [
        "conta",
        "in "
      ],
      [
        "e ",
        "that the "
      ],
      [
        "+ ",
        "1\r\n"
      ],
      [
        "array",
        "\r\n"
      ],
      [
        ".length == ",
        "2\r\n"
      ],
      [
        "constraint",
        "s.\r\n"
      ],
      [
        "fu",
        "l "
      ],
      [
        "        # C",
        "re"
      ],
      [
        "befor",
        "e "
      ],
      [
        "'",
        "t "
      ],
      [
        "1",
        "].\r\n"
      ],
      [
        "2",
        "n"
      ],
      [
        "m",
        "an"
      ],
      [
        "Output: ",
        "5\r\n"
      ],
      [
        "ed by ",
        "the "
      ],
      [
        "to ",
        "keep track of the "
      ],
      [
        "        # ",
        "If "
      ],
      [
        "i ",
        "<= "
      ],
      [
        "(self, ",
        "s: str"
      ],
      [
        "complet",
        "e "
      ],
      [
        "Val",
        "u"
      ],
      [
        "how ",
        "many "
      ],
      [
        "lexicographic",
        "ally "
      ],
      [
        "in ",
        "`"
      ],
      [
        "To solve this problem",
        ", we need to "
      ],
      [
        "c",
        "ach"
      ],
      [
        "an",
        "other "
      ],
      [
        ". ",
        "For each "
      ],
      [
        "di",
        "ag"
      ],
      [
        "[0",
        "] = "
      ],
      [
        ", we ",
        "return "
      ],
      [
        "cor",
        "n"
      ],
      [
        "subarray",
        "s "
      ],
      [
        "satis",
        "fi"
      ],
      [
        "decre",
        "asing "
      ],
      [
        "] ",
        "+= 1\r\n"
      ],
      [
        "list",
        ".\r\n"
      ],
      [
        "minim",
        "um"
      ],
      [
        "0",
        "."
      ],
      [
        "1",
        ")\r\n"
      ],
      [
        "u",
        "re"
      ],
      [
        "at",
        "er"
      ],
      [
        "        return ",
        "max_"
      ],
      [
        "sol",
        "ve the "
      ],
      [
        "such ",
        "that the "
      ],
      [
        "do ",
        "not "
      ],
      [
        "h",
        "our"
      ],
      [
        "ing",
        ".\r\n"
      ],
      [
        "wi",
        "d"
      ],
      [
        "== ",
        "'"
      ],
      [
        "be",
        "en "
      ],
      [
        "tru",
        "e if "
      ],
      [
        "av",
        "ail"
      ],
      [
        "foun",
        "d"
      ],
      [
        "`dp",
        "` "
      ],
      [
        "It can be ",
        "shown that "
      ],
      [
        "botto",
        "m"
      ],
      [
        "heapq.",
        "heap"
      ],
      [
        "6",
        ".\r\n"
      ],
      [
        "A",
        "n"
      ],
      [
        "P",
        "re"
      ],
      [
        "s ",
        "by "
      ],
      [
        "si",
        "de"
      ],
      [
        "es ",
        "a "
      ],
      [
        "as ",
        "follows:\r\n"
      ],
      [
        "brea",
        "k\r\n"
      ],
      [
        "re",
        "du"
      ],
      [
        "0 ",
        "+ "
      ],
      [
        "                    ",
        "# "
      ],
      [
        "                    ",
        "return "
      ],
      [
        "string ",
        "is "
      ],
      [
        "This solution ",
        "efficiently "
      ],
      [
        "should ",
        "be "
      ],
      [
        "per ",
        "function "
      ],
      [
        "(",
        "i, j"
      ],
      [
        "        ",
        "result "
      ],
      [
        ". ",
        "You "
      ],
      [
        "con",
        "caten"
      ],
      [
        "In",
        " the "
      ],
      [
        "length ",
        "= "
      ],
      [
        "pri",
        "me"
      ],
      [
        "H",
        "ence"
      ],
      [
        "S",
        "e"
      ],
      [
        "e",
        "l "
      ],
      [
        "in",
        "it"
      ],
      [
        "St",
        "ep "
      ],
      [
        "`n",
        "` "
      ],
      [
        "__",
        "init"
      ],
      [
        "unique",
        ".\r\n"
      ],
      [
        "__init",
        "__"
      ],
      [
        "4",
        " + "
      ],
      [
        "5",
        "], "
      ],
      [
        "c",
        "ent"
      ],
      [
        "s",
        "our"
      ],
      [
        "ch",
        "ild "
      ],
      [
        "str",
        ":\r\n"
      ],
      [
        "    def ",
        "min"
      ],
      [
        "where ",
        "each "
      ],
      [
        "grid",
        "["
      ],
      [
        "te",
        "am"
      ],
      [
        "mid",
        "d"
      ],
      [
        "bi",
        "sect"
      ],
      [
        "hou",
        "se"
      ],
      [
        "optim",
        "al "
      ],
      [
        "l",
        "ab"
      ],
      [
        "You are ",
        "also "
      ],
      [
        "achi",
        "ev"
      ],
      [
        "algorith",
        "m "
      ],
      [
        "s",
        ".append("
      ],
      [
        "s ",
        "for "
      ],
      [
        "1 ",
        "<"
      ],
      [
        "elements ",
        "in the "
      ],
      [
        "must ",
        "be "
      ],
      [
        "on",
        "t"
      ],
      [
        "sort",
        "ed_"
      ],
      [
        "grid",
        "[i][j] "
      ],
      [
        "iterates ",
        "through the "
      ],
      [
        "returns ",
        "`"
      ],
      [
        "jo",
        "in"
      ],
      [
        "4",
        "] "
      ],
      [
        "h",
        "app"
      ],
      [
        "in",
        "itializ"
      ],
      [
        "num",
        "_"
      ],
      [
        ") ",
        "// "
      ],
      [
        "prefix",
        "_"
      ],
      [
        "hou",
        "se "
      ],
      [
        "there is ",
        "no "
      ],
      [
        "(",
        "n"
      ],
      [
        ".",
        "val "
      ],
      [
        "l",
        "y.\r\n"
      ],
      [
        "ti",
        "es "
      ],
      [
        "Output: ",
        "6\r\n"
      ],
      [
        "0,",
        "1,"
      ],
      [
        "(self, ",
        "n"
      ],
      [
        "C",
        "om"
      ],
      [
        "x ",
        "n "
      ],
      [
        "Con",
        "ver"
      ],
      [
        "You are given ",
        "an integer array "
      ],
      [
        "bu",
        "ild"
      ],
      [
        "distin",
        "ct"
      ],
      [
        "check ",
        "if "
      ],
      [
        "2",
        ")"
      ],
      [
        "2",
        ")\r\n"
      ],
      [
        "m",
        "is"
      ],
      [
        "o",
        "ther"
      ],
      [
        "ro",
        "bo"
      ],
      [
        "                ",
        "else:\r\n"
      ],
      [
        "ex",
        "pl"
      ],
      [
        "    def ",
        "max"
      ],
      [
        "gu",
        "ar"
      ],
      [
        "back",
        "trac"
      ],
      [
        "Ar",
        "ra"
      ],
      [
        "Num",
        "b"
      ],
      [
        ".",
        "add("
      ],
      [
        "j",
        " - "
      ],
      [
        "num",
        " = "
      ],
      [
        "count ",
        "+= 1\r\n"
      ],
      [
        "non-",
        "empty "
      ],
      [
        "speci",
        "fi"
      ],
      [
        "(",
        "["
      ],
      [
        "0",
        "], "
      ],
      [
        "S",
        "ort"
      ],
      [
        "f",
        "alse"
      ],
      [
        "s",
        "ti"
      ],
      [
        "ol",
        "d"
      ],
      [
        "ces",
        "s"
      ],
      [
        "consi",
        "st "
      ],
      [
        "comput",
        "e the "
      ],
      [
        "spl",
        "it"
      ],
      [
        "occurr",
        "ence "
      ],
      [
        "from collections import ",
        "defaultdict"
      ],
      [
        "respec",
        "tivel"
      ],
      [
        ".",
        "next"
      ],
      [
        ") ",
        "== "
      ],
      [
        "sub",
        "set"
      ],
      [
        "we ",
        "have "
      ],
      [
        "f",
        "ar"
      ],
      [
        "or",
        "iz"
      ],
      [
        "        # ",
        "The "
      ],
      [
        "pri",
        "ces"
      ],
      [
        "appear",
        "s "
      ],
      [
        "jum",
        "p"
      ],
      [
        "have the ",
        "same "
      ],
      [
        "\"",
        "1"
      ],
      [
        "d",
        "ur"
      ],
      [
        "r",
        "e "
      ],
      [
        "> ",
        "0:\r\n"
      ],
      [
        "    def ",
        "find"
      ],
      [
        "with",
        "in "
      ],
      [
        "2, ",
        "3, "
      ],
      [
        "point",
        "er "
      ],
      [
        "reach",
        " the "
      ],
      [
        "__init__",
        "(self, "
      ],
      [
        "th",
        "at"
      ],
      [
        "il",
        "l"
      ],
      [
        "Return the ",
        "number of "
      ],
      [
        "Coun",
        "t the "
      ],
      [
        "there are ",
        "no "
      ],
      [
        "chan",
        "ge "
      ],
      [
        "keep",
        "s "
      ],
      [
        "1",
        "st "
      ],
      [
        "5",
        " + "
      ],
      [
        "`",
        "x"
      ],
      [
        "w",
        "ard"
      ],
      [
        "fi",
        "l"
      ],
      [
        "ter",
        "n"
      ],
      [
        "maximum ",
        "possible "
      ],
      [
        "            # ",
        "Check "
      ],
      [
        "at least ",
        "one "
      ],
      [
        "lim",
        "it"
      ],
      [
        "You are also ",
        "given "
      ],
      [
        "ti",
        "gu"
      ],
      [
        "Input: ",
        "arr"
      ],
      [
        "char",
        " in "
      ],
      [
        "iz",
        "e the "
      ],
      [
        ".length",
        ", "
      ],
      [
        "cu",
        "st"
      ],
      [
        "Here's the ",
        "implement"
      ],
      [
        "A",
        "t "
      ],
      [
        "\\",
        ") "
      ],
      [
        "= ",
        "("
      ],
      [
        "1,",
        "4,"
      ],
      [
        "[0",
        "])\r\n"
      ],
      [
        "par",
        "t "
      ],
      [
        "You are given ",
        "two "
      ],
      [
        "x, ",
        "y"
      ],
      [
        "On",
        "e "
      ],
      [
        "Upd",
        "ate the "
      ],
      [
        "2n",
        "d "
      ],
      [
        "-",
        "-"
      ],
      [
        "1",
        "] = "
      ],
      [
        "n ",
        "<= "
      ],
      [
        "con",
        "tigu"
      ],
      [
        "ex",
        "tra"
      ],
      [
        "end ",
        "of the "
      ],
      [
        "ensur",
        "ing "
      ],
      [
        "fli",
        "p"
      ],
      [
        " = ",
        "1"
      ],
      [
        "Output: ",
        "-1\r\n"
      ],
      [
        "od",
        "d"
      ],
      [
        "diag",
        "on"
      ],
      [
        ".",
        "\\r\r\n"
      ],
      [
        "ro",
        "s"
      ],
      [
        "ro",
        "un"
      ],
      [
        "de",
        "c"
      ],
      [
        "m ",
        "== "
      ],
      [
        "-1",
        "):\r\n"
      ],
      [
        "element ",
        "in the "
      ],
      [
        "mas",
        "k"
      ],
      [
        "exactly ",
        "one "
      ],
      [
        "This solution works ",
        "by "
      ],
      [
        "0",
        "]]\r\n"
      ],
      [
        "c",
        "le "
      ],
      [
        "di",
        "s"
      ],
      [
        "sort",
        "()\r\n"
      ],
      [
        "only ",
        "one "
      ],
      [
        "du",
        "plic"
      ],
      [
        "tic",
        "al "
      ],
      [
        "MOD",
        "\r\n"
      ],
      [
        "divis",
        "or"
      ],
      [
        "c",
        "ar"
      ],
      [
        "ob",
        "stac"
      ],
      [
        "        n = len(",
        "nums)\r\n"
      ],
      [
        "n",
        ".\r\n"
      ],
      [
        "        # ",
        "Check "
      ],
      [
        "node",
        ", "
      ],
      [
        "Re",
        "sul"
      ],
      [
        "ener",
        "g"
      ],
      [
        "pair ",
        "of "
      ],
      [
        "based ",
        "on the "
      ],
      [
        "aver",
        "age "
      ],
      [
        "an",
        "te"
      ],
      [
        "ex",
        "p"
      ],
      [
        "pair",
        "s "
      ],
      [
        "Given ",
        "a "
      ],
      [
        "(0, ",
        "0"
      ],
      [
        "dest",
        "in"
      ],
      [
        "`",
        ". The "
      ],
      [
        "e",
        "("
      ],
      [
        "g",
        "iv"
      ],
      [
        "|",
        " "
      ],
      [
        "in",
        "itial"
      ],
      [
        "resul",
        "t = "
      ],
      [
        "into ",
        "a "
      ],
      [
        "ston",
        "es "
      ],
      [
        "acc",
        "ord"
      ],
      [
        "cust",
        "om"
      ],
      [
        "se",
        "en"
      ],
      [
        "co",
        "ul"
      ],
      [
        "for ",
        "_ in range("
      ],
      [
        "][",
        "c"
      ],
      [
        "repres",
        "ent "
      ],
      [
        "edge",
        "s"
      ],
      [
        "ser",
        "ver"
      ],
      [
        "produ",
        "ct"
      ],
      [
        "guar",
        "ante"
      ],
      [
        "_",
        "to_"
      ],
      [
        "g",
        "cd"
      ],
      [
        "an",
        "ce"
      ],
      [
        "le",
        "vel "
      ],
      [
        "\" ",
        "-> "
      ],
      [
        "sorted ",
        "in "
      ],
      [
        "seg",
        "ment"
      ],
      [
        "Choo",
        "se "
      ],
      [
        "3",
        "].\r\n"
      ],
      [
        "U",
        "ni"
      ],
      [
        "es",
        ", "
      ],
      [
        "palindro",
        "me"
      ],
      [
        "avo",
        "id "
      ],
      [
        "This approach ensures that ",
        "we "
      ],
      [
        "1 <",
        "< "
      ],
      [
        "contigu",
        "ous "
      ],
      [
        "d",
        "at"
      ],
      [
        "l",
        "and"
      ],
      [
        "s",
        "y"
      ],
      [
        "ab",
        "c"
      ],
      [
        "ad",
        "ded "
      ],
      [
        "typ",
        "e "
      ],
      [
        "work",
        "er"
      ],
      [
        "permut",
        "ation"
      ],
      [
        "oriz",
        "ont"
      ],
      [
        "2",
        "].\r\n"
      ],
      [
        "3",
        "]"
      ],
      [
        "A",
        "N"
      ],
      [
        "[",
        "5,"
      ],
      [
        "d",
        "ow"
      ],
      [
        "v",
        "ari"
      ],
      [
        "→",
        " "
      ],
      [
        "St",
        "r"
      ],
      [
        "cannot ",
        "be "
      ],
      [
        "`i",
        "` "
      ],
      [
        "maxim",
        "um"
      ],
      [
        "coul",
        "d "
      ],
      [
        "=",
        "0, "
      ],
      [
        "F",
        "ir"
      ],
      [
        "st",
        "at"
      ],
      [
        ". ",
        "Finally"
      ],
      [
        "1 ",
        "is "
      ],
      [
        "tw",
        "o"
      ],
      [
        "low",
        "er "
      ],
      [
        "par",
        "en"
      ],
      [
        "Return the ",
        "minimum number of "
      ],
      [
        "proces",
        "s "
      ],
      [
        "2",
        "5"
      ],
      [
        "h",
        "orizont"
      ],
      [
        "i",
        "ma"
      ],
      [
        "l",
        "am"
      ],
      [
        "st",
        "er"
      ],
      [
        "is ",
        "either "
      ],
      [
        "                ",
        "current_"
      ],
      [
        "` ",
        "function "
      ],
      [
        "k = ",
        "2\r\n"
      ],
      [
        "emp",
        "ty"
      ],
      [
        "consist",
        "ing of "
      ],
      [
        "edg",
        "es = ["
      ],
      [
        "cy",
        "cle"
      ],
      [
        "Arra",
        "y"
      ],
      [
        "n",
        ":\r\n"
      ],
      [
        "s",
        "tic"
      ],
      [
        "w",
        "e"
      ],
      [
        "no",
        "t"
      ],
      [
        "dp",
        "[i][j"
      ],
      [
        "pi",
        "le"
      ],
      [
        "may ",
        "be "
      ],
      [
        ".",
        "pop"
      ],
      [
        "4",
        "], "
      ],
      [
        "h",
        "e"
      ],
      [
        "are ",
        "not "
      ],
      [
        "as ",
        "a "
      ],
      [
        "Explanation: ",
        "We can "
      ],
      [
        "bac",
        "k "
      ],
      [
        "Tim",
        "e"
      ],
      [
        "d",
        "e the "
      ],
      [
        "mo",
        "un"
      ],
      [
        "positive ",
        "integer "
      ],
      [
        "null,",
        "null,"
      ],
      [
        "(self, nums",
        ": List[int]) -> int:\r\n"
      ],
      [
        "        # Cre",
        "ate a "
      ],
      [
        "robo",
        "t "
      ],
      [
        "S",
        "ear"
      ],
      [
        "of ",
        "all "
      ],
      [
        "2 ",
        "is "
      ],
      [
        "by ",
        "the "
      ],
      [
        "-1",
        "]\r\n"
      ],
      [
        "        if ",
        "not "
      ],
      [
        "1],[",
        "1,"
      ],
      [
        "ide",
        "a "
      ],
      [
        "leet",
        "code"
      ],
      [
        "3",
        "2"
      ],
      [
        "3",
        ": "
      ],
      [
        "N",
        "o "
      ],
      [
        "Q",
        "u"
      ],
      [
        "T",
        "ra"
      ],
      [
        "a",
        "d "
      ],
      [
        "t",
        "able "
      ],
      [
        "in",
        "_"
      ],
      [
        "2 ",
        "- "
      ],
      [
        "s = [",
        "[1,"
      ],
      [
        "[0",
        "]\r\n"
      ],
      [
        "mov",
        "e the "
      ],
      [
        "elements ",
        "in "
      ],
      [
        "j ",
        "< "
      ],
      [
        "vel",
        "y "
      ],
      [
        "This solution uses ",
        "dynamic programming "
      ],
      [
        "b",
        "eg"
      ],
      [
        "f",
        "our "
      ],
      [
        "s",
        "o"
      ],
      [
        "# ",
        "De"
      ],
      [
        "pro",
        "per"
      ],
      [
        "nums ",
        "is "
      ],
      [
        "#",
        "     "
      ],
      [
        "5",
        "] "
      ],
      [
        "A",
        "n "
      ],
      [
        "c",
        "ard"
      ],
      [
        "# ",
        "class "
      ],
      [
        "sub",
        "tre"
      ],
      [
        "\",\"",
        "b"
      ],
      [
        "            if ",
        "not "
      ],
      [
        "nee",
        "de"
      ],
      [
        "dep",
        "th "
      ],
      [
        "gener",
        "ated "
      ],
      [
        "fini",
        "tion "
      ],
      [
        "# De",
        "finition "
      ],
      [
        "#     ",
        "def "
      ],
      [
        "=",
        "None"
      ],
      [
        "B",
        "u"
      ],
      [
        "D",
        "P "
      ],
      [
        "^",
        " "
      ],
      [
        "f",
        "it"
      ],
      [
        "        ",
        "min_"
      ],
      [
        "            ",
        "elif "
      ],
      [
        "                ",
        "max_"
      ],
      [
        "nums",
        ":\r\n"
      ],
      [
        "word",
        "s "
      ],
      [
        "up",
        "per"
      ],
      [
        "#         self.",
        "val = "
      ],
      [
        "frequency ",
        "of each "
      ],
      [
        "weigh",
        "t"
      ],
      [
        "childr",
        "en"
      ],
      [
        "from collections import defaultdict",
        "\r\n"
      ],
      [
        "#     def ",
        "__init__(self, "
      ],
      [
        "'",
        "b"
      ],
      [
        ")",
        ". "
      ],
      [
        ")",
        "` "
      ],
      [
        "m",
        " = "
      ],
      [
        "- ",
        "We "
      ],
      [
        "im",
        "possible to "
      ],
      [
        "nums",
        "[0] "
      ],
      [
        "start",
        "s "
      ],
      [
        "tri",
        "ang"
      ],
      [
        "join",
        "("
      ],
      [
        "any ",
        "number of "
      ],
      [
        "00",
        "0"
      ],
      [
        "track ",
        "of "
      ],
      [
        "incre",
        "ment"
      ],
      [
        "cell",
        "s "
      ],
      [
        "in the range ",
        "[1, "
      ],
      [
        "count the ",
        "number of "
      ],
      [
        "dif",
        "f "
      ],
      [
        "midd",
        "le "
      ],
      [
        "=None",
        "):\r\n"
      ],
      [
        "l",
        "ay"
      ],
      [
        "ar",
        "rang"
      ],
      [
        "es ",
        "to "
      ],
      [
        "word",
        "s = ["
      ],
      [
        "    def ",
        "count"
      ],
      [
        "minimum ",
        "cost "
      ],
      [
        "s that ",
        "can be "
      ],
      [
        "lar",
        "ge "
      ],
      [
        "1",
        "):\r\n"
      ],
      [
        "M",
        "o"
      ],
      [
        "[",
        ":"
      ],
      [
        "e",
        ". "
      ],
      [
        "5,",
        "6"
      ],
      [
        "), ",
        "len("
      ],
      [
        "roo",
        "m "
      ],
      [
        "non-",
        "decreasing "
      ],
      [
        "prev",
        "_"
      ],
      [
        "through ",
        "each "
      ],
      [
        "idea ",
        "is to "
      ],
      [
        "f",
        "ac"
      ],
      [
        "re",
        "d"
      ],
      [
        "ar",
        "ri"
      ],
      [
        "si",
        "mul"
      ],
      [
        ") ",
        "is "
      ],
      [
        "ou",
        "s"
      ],
      [
        "val",
        "=0, "
      ],
      [
        "is the ",
        "maximum "
      ],
      [
        "            # ",
        "If "
      ],
      [
        "sequen",
        "ce"
      ],
      [
        "set ",
        "to "
      ],
      [
        "(self, nums",
        ": List[int], "
      ],
      [
        "keeps ",
        "track of the "
      ],
      [
        "AN",
        "D "
      ],
      [
        "#         self.val = ",
        "val\r\n"
      ],
      [
        "#     def __init__(self, ",
        "val=0, "
      ],
      [
        "2",
        "0"
      ],
      [
        "B",
        "o"
      ],
      [
        "m",
        "i"
      ],
      [
        "y",
        "ing "
      ],
      [
        "on",
        "g"
      ],
      [
        "d ",
        "= "
      ],
      [
        "de",
        "que"
      ],
      [
        "[i",
        "-1"
      ],
      [
        "arr",
        "[i] "
      ],
      [
        "n - ",
        "1\r\n"
      ],
      [
        "set",
        "("
      ],
      [
        "using ",
        "a "
      ],
      [
        "sorted",
        "("
      ],
      [
        "(i.e.",
        ", "
      ],
      [
        "\"",
        "c"
      ],
      [
        "1",
        ":"
      ],
      [
        "T",
        "ri"
      ],
      [
        "Y",
        "our "
      ],
      [
        "]",
        "` "
      ],
      [
        "g",
        "ame "
      ],
      [
        "en",
        "cy "
      ],
      [
        "of the ",
        "current "
      ],
      [
        "number ",
        "is "
      ],
      [
        "sh",
        "ow"
      ],
      [
        "there ",
        "is a "
      ],
      [
        "pow",
        "er"
      ],
      [
        "close",
        "st "
      ],
      [
        "(",
        "2, "
      ],
      [
        "[",
        "2, "
      ],
      [
        "m",
        "es"
      ],
      [
        "w",
        "as "
      ],
      [
        "al",
        "tern"
      ],
      [
        "num",
        "s and "
      ],
      [
        "ru",
        "le"
      ],
      [
        "mov",
        "ing "
      ],
      [
        "only ",
        "of "
      ],
      [
        "[i]",
        ".length\r\n"
      ],
      [
        "chec",
        "king "
      ],
      [
        "binary ",
        "represent"
      ],
      [
        "s. ",
        "It "
      ],
      [
        "        def ",
        "dfs("
      ],
      [
        "Not",
        "e"
      ],
      [
        "1 <= nums",
        ".length <= 105\r\n"
      ],
      [
        "\\(",
        " "
      ],
      [
        "beauti",
        "ful "
      ],
      [
        "3",
        ". "
      ],
      [
        "4",
        "].\r\n"
      ],
      [
        "k",
        "-"
      ],
      [
        "k",
        ":\r\n"
      ],
      [
        "ge",
        "t the "
      ],
      [
        "as",
        "sign"
      ],
      [
        "\" ",
        "is "
      ],
      [
        "represent",
        "ing the "
      ],
      [
        "List[List[int]",
        "], "
      ],
      [
        "neighb",
        "or "
      ],
      [
        "i + ",
        "1, "
      ],
      [
        "S",
        "ince "
      ],
      [
        "j",
        ", "
      ],
      [
        "j",
        " = "
      ],
      [
        "on",
        "ce "
      ],
      [
        "as",
        "c"
      ],
      [
        "Output: ",
        "2"
      ],
      [
        "el",
        "y "
      ],
      [
        "        # ",
        "Find the "
      ],
      [
        "has ",
        "the "
      ],
      [
        "-",
        "-> "
      ],
      [
        "H",
        "ere "
      ],
      [
        "T",
        "o"
      ],
      [
        "u",
        "s the "
      ],
      [
        "w",
        "ant "
      ],
      [
        "y",
        "i"
      ],
      [
        "on",
        "es "
      ],
      [
        "st",
        "ore "
      ],
      [
        "al",
        "i"
      ],
      [
        "at ",
        "each "
      ],
      [
        "10",
        "^"
      ],
      [
        "end",
        "s "
      ],
      [
        "element",
        "s of "
      ],
      [
        "start",
        ", "
      ],
      [
        "chec",
        "k"
      ],
      [
        "siz",
        "e"
      ],
      [
        ": str",
        ", "
      ],
      [
        "3",
        "r"
      ],
      [
        "w",
        "ater "
      ],
      [
        "se",
        "par"
      ],
      [
        "10",
        ", "
      ],
      [
        "igh",
        "t "
      ],
      [
        "        for ",
        "i, "
      ],
      [
        "00",
        "0\r\n"
      ],
      [
        "values ",
        "of "
      ],
      [
        "* (",
        "n "
      ],
      [
        "candi",
        "es "
      ],
      [
        "enti",
        "re "
      ],
      [
        "1 <= n ",
        "<= "
      ],
      [
        "Co",
        "st"
      ],
      [
        "left and ",
        "right "
      ],
      [
        "s",
        "2"
      ],
      [
        "sub",
        "tra"
      ],
      [
        "per",
        "form "
      ],
      [
        "tree ",
        "is "
      ],
      [
        "ere",
        "fore"
      ],
      [
        "corre",
        "ct "
      ],
      [
        "origin",
        "al"
      ],
      [
        "inclu",
        "si"
      ],
      [
        "0,0,0,0,",
        "0,0,0,0,"
      ],
      [
        "balan",
        "c"
      ],
      [
        "th-",
        "first "
      ],
      [
        ",",
        "\r\n"
      ],
      [
        "S",
        "T"
      ],
      [
        "al",
        "se "
      ],
      [
        "in ",
        "any "
      ],
      [
        "ma",
        "pp"
      ],
      [
        "nums",
        "2 = "
      ],
      [
        "hea",
        "d"
      ],
      [
        "            return ",
        "0\r\n"
      ],
      [
        "if the ",
        "current "
      ],
      [
        "candi",
        "d"
      ],
      [
        "hel",
        "p"
      ],
      [
        "less than ",
        "or equal to "
      ],
      [
        "2",
        "]]\r\n"
      ],
      [
        "7",
        "]\r\n"
      ],
      [
        "re",
        "gi"
      ],
      [
        "st",
        "one "
      ],
      [
        "di",
        "tion "
      ],
      [
        "it",
        "e"
      ],
      [
        "nums",
        "1 = ["
      ],
      [
        "ou",
        "gh"
      ],
      [
        "s in ",
        "a "
      ],
      [
        "s(self, ",
        "nums"
      ],
      [
        "2],[",
        "2,"
      ],
      [
        "length of the ",
        "longest "
      ],
      [
        "​​",
        "​​"
      ],
      [
        "checks ",
        "if "
      ],
      [
        "valid",
        "_"
      ],
      [
        "2D ",
        "integer array "
      ],
      [
        "cap",
        "ac"
      ],
      [
        "Optional[",
        "TreeNode"
      ],
      [
        "D",
        "ist"
      ],
      [
        "s",
        "**: "
      ],
      [
        "10",
        "1"
      ],
      [
        "count",
        "["
      ],
      [
        "pair",
        "s of "
      ],
      [
        "number",
        "\r\n"
      ],
      [
        "queri",
        "es = ["
      ],
      [
        "combin",
        "ation"
      ],
      [
        "DFS",
        " "
      ],
      [
        "List[str",
        "]"
      ],
      [
        "bl",
        "u"
      ],
      [
        "now",
        " "
      ],
      [
        "peo",
        "ple "
      ],
      [
        "trip",
        "let"
      ],
      [
        "'",
        ")\r\n"
      ],
      [
        "W",
        "ord"
      ],
      [
        "d",
        "own "
      ],
      [
        "w",
        "in"
      ],
      [
        "x",
        "\r\n"
      ],
      [
        "in",
        "to the "
      ],
      [
        ", ",
        "where "
      ],
      [
        "to ",
        "be "
      ],
      [
        "at",
        "or"
      ],
      [
        "ap",
        " "
      ],
      [
        "List",
        "Node"
      ],
      [
        "3,",
        "3,"
      ],
      [
        "1 <= ",
        "k <= "
      ],
      [
        "3 ",
        "and "
      ],
      [
        "par",
        "ent "
      ],
      [
        "em",
        "ent"
      ],
      [
        "are",
        ":\r\n"
      ],
      [
        "dire",
        "cted "
      ],
      [
        "Node",
        ".val "
      ],
      [
        "leading ",
        "zero"
      ],
      [
        "th-first ",
        "search "
      ],
      [
        "m",
        "one"
      ],
      [
        "r",
        ", c"
      ],
      [
        "10",
        "**"
      ],
      [
        "element ",
        "is "
      ],
      [
        "Given ",
        "a string "
      ],
      [
        "You are given a ",
        "string "
      ],
      [
        "hel",
        "per function "
      ],
      [
        "indic",
        "ates "
      ],
      [
        "e",
        "ver"
      ],
      [
        "in",
        "-"
      ],
      [
        "in",
        "v"
      ],
      [
        "tim",
        "es.\r\n"
      ],
      [
        "s = [",
        "]\r\n"
      ],
      [
        "form",
        "ed "
      ],
      [
        "   - ",
        "We "
      ],
      [
        "node.",
        "right"
      ],
      [
        "continu",
        "e\r\n"
      ],
      [
        "consist ",
        "of "
      ],
      [
        "moun",
        "ta"
      ],
      [
        "S",
        "ince the "
      ],
      [
        "b",
        "its "
      ],
      [
        "c",
        "k"
      ],
      [
        "j",
        "ob"
      ],
      [
        "st",
        "ate "
      ],
      [
        "pro",
        "fit "
      ],
      [
        "number of ",
        "ways to "
      ],
      [
        "low",
        " "
      ],
      [
        "value ",
        "of the "
      ],
      [
        "Pa",
        "ir"
      ],
      [
        "_",
        "cach"
      ],
      [
        "l",
        "ru"
      ],
      [
        "en",
        "ces"
      ],
      [
        "um",
        "ul"
      ],
      [
        "ation",
        "**: We "
      ],
      [
        ") ",
        "if "
      ],
      [
        "ac",
        "k "
      ],
      [
        "wh",
        "e"
      ],
      [
        "one ",
        "of the "
      ],
      [
        ". If ",
        "it "
      ],
      [
        "set",
        "()\r\n"
      ],
      [
        "desc",
        "ending "
      ],
      [
        "memo",
        "iz"
      ],
      [
        "lru",
        "_cach"
      ],
      [
        "3",
        "]]\r\n"
      ],
      [
        "8",
        ", "
      ],
      [
        "[",
        "]\r\n"
      ],
      [
        "a",
        "fter the "
      ],
      [
        "t",
        "wi"
      ],
      [
        "re",
        "st "
      ],
      [
        ". ",
        "In "
      ],
      [
        "a ",
        "given "
      ],
      [
        "m ",
        "x n "
      ],
      [
        "In",
        "cre"
      ],
      [
        "= [",
        "0] "
      ],
      [
        "result ",
        "is "
      ],
      [
        ", we can ",
        "use a "
      ],
      [
        "over ",
        "each "
      ],
      [
        "sent",
        "ence"
      ],
      [
        "time complexity ",
        "of "
      ],
      [
        "obta",
        "in"
      ],
      [
        "has",
        "h"
      ],
      [
        "4",
        " = "
      ],
      [
        "st",
        "am"
      ],
      [
        "] ",
        "- "
      ],
      [
        "es ",
        "of "
      ],
      [
        "nums",
        "[i]"
      ],
      [
        "Output: ",
        "[1,"
      ],
      [
        "        # ",
        "Step "
      ],
      [
        "bo",
        "x "
      ],
      [
        "5,",
        "6,"
      ],
      [
        "lar",
        "ger "
      ],
      [
        "F",
        "ro"
      ],
      [
        "`",
        ", we "
      ],
      [
        "f",
        "alse "
      ],
      [
        "w",
        "ri"
      ],
      [
        "+ ",
        "1, "
      ],
      [
        ") -> ",
        "str:\r\n"
      ],
      [
        "It ",
        "is "
      ],
      [
        "0 <= ",
        "nums[i] "
      ],
      [
        "% ",
        "2 "
      ],
      [
        "upd",
        "ate the "
      ],
      [
        "prefix ",
        "sum"
      ],
      [
        "consider",
        "ed "
      ],
      [
        "2",
        "."
      ],
      [
        "L",
        "et"
      ],
      [
        "u",
        "s to "
      ],
      [
        "2,",
        "1,"
      ],
      [
        "],",
        "\r\n"
      ],
      [
        "s, ",
        "return "
      ],
      [
        "solution",
        ":\r\n"
      ],
      [
        "arr",
        "["
      ],
      [
        "11",
        "11"
      ],
      [
        "substring",
        "s "
      ],
      [
        "want ",
        "to "
      ],
      [
        "(",
        "("
      ],
      [
        "b",
        "loc"
      ],
      [
        "r",
        "][c"
      ],
      [
        "s",
        ".length\r\n"
      ],
      [
        "10",
        "9 + "
      ],
      [
        "pro",
        "fit"
      ],
      [
        "1, ",
        "and "
      ],
      [
        "row",
        "s "
      ],
      [
        "sp",
        "e"
      ],
      [
        "s[",
        "j"
      ],
      [
        "1] ",
        "+ "
      ],
      [
        "\"a",
        "a"
      ],
      [
        "od",
        "d_"
      ],
      [
        "palindro",
        "me "
      ],
      [
        "3,4",
        "]\r\n"
      ],
      [
        "conver",
        "t"
      ],
      [
        "constru",
        "ct"
      ],
      [
        "Wh",
        "en "
      ],
      [
        "Star",
        "t "
      ],
      [
        "T",
        "w"
      ],
      [
        "[",
        "root"
      ],
      [
        "in",
        "es"
      ],
      [
        "se",
        "at"
      ],
      [
        "ur",
        "e "
      ],
      [
        "ation",
        ":\r\n"
      ],
      [
        "ces",
        "s "
      ],
      [
        "character ",
        "in the "
      ],
      [
        "Coun",
        "t "
      ],
      [
        "Not",
        "e that the "
      ],
      [
        "over",
        " the "
      ],
      [
        "rectang",
        "le"
      ],
      [
        "asc",
        "ending "
      ],
      [
        "B",
        "in"
      ],
      [
        "c",
        "ity"
      ],
      [
        "e",
        "ve "
      ],
      [
        "== ",
        "1:\r\n"
      ],
      [
        "il",
        "ity "
      ],
      [
        "pres",
        "ent "
      ],
      [
        "equ",
        "i"
      ],
      [
        "use",
        "s "
      ],
      [
        "use",
        "s a "
      ],
      [
        "step",
        "s "
      ],
      [
        "high",
        "est "
      ],
      [
        "allow",
        "s "
      ],
      [
        "mainta",
        "in"
      ],
      [
        "shif",
        "t"
      ],
      [
        "Non",
        "e, "
      ],
      [
        "9",
        ", "
      ],
      [
        "ac",
        "k"
      ],
      [
        "for ",
        "all "
      ],
      [
        "<= 10",
        "6\r\n"
      ],
      [
        "len(",
        "s"
      ],
      [
        "row",
        " and "
      ],
      [
        "remov",
        "ing "
      ],
      [
        "'a",
        "' "
      ],
      [
        "F",
        "or the "
      ],
      [
        "b",
        "c"
      ],
      [
        "b",
        "d"
      ],
      [
        "b",
        "all "
      ],
      [
        "b",
        "ag"
      ],
      [
        "d",
        "er "
      ],
      [
        "        ",
        "total_"
      ],
      [
        "n ",
        "+ 1):\r\n"
      ],
      [
        "pro",
        "vi"
      ],
      [
        "for",
        "ma"
      ],
      [
        "fir",
        "st_"
      ],
      [
        "s = ",
        "\""
      ],
      [
        "queri",
        "es "
      ],
      [
        "subsequence ",
        "of "
      ],
      [
        "Here's the ",
        "step-by-step "
      ],
      [
        "seg",
        "ment "
      ],
      [
        "O(n",
        ") "
      ],
      [
        "'.",
        "join("
      ],
      [
        "        result ",
        "= []\r\n"
      ],
      [
        "bisect",
        "_"
      ],
      [
        "backtrac",
        "k"
      ],
      [
        "paren",
        "the"
      ],
      [
        "3r",
        "d "
      ],
      [
        "(",
        "DFS"
      ],
      [
        "-",
        "2,"
      ],
      [
        "M",
        "ove "
      ],
      [
        "c",
        "alle"
      ],
      [
        "t",
        "up"
      ],
      [
        "        ",
        "current_"
      ],
      [
        "an",
        "ce "
      ],
      [
        "pl",
        "o"
      ],
      [
        "Explanation: ",
        "We "
      ],
      [
        "tak",
        "es "
      ],
      [
        "tak",
        "en "
      ],
      [
        "Counter",
        "("
      ],
      [
        "rectang",
        "le "
      ],
      [
        "amoun",
        "t of "
      ],
      [
        "modulo ",
        "109 + "
      ],
      [
        "sli",
        "ding "
      ],
      [
        "_",
        "count = "
      ],
      [
        "b",
        "an"
      ],
      [
        "b",
        "ri"
      ],
      [
        "y",
        "_"
      ],
      [
        "re",
        "que"
      ],
      [
        ". ",
        "A "
      ],
      [
        "in ",
        "each "
      ],
      [
        "number ",
        "in the "
      ],
      [
        "lem",
        "ent "
      ],
      [
        "ad",
        "ding "
      ],
      [
        "dp",
        "("
      ],
      [
        ". If ",
        "no "
      ],
      [
        "The number of ",
        "nodes in the "
      ],
      [
        "Here ",
        "is the "
      ],
      [
        "1",
        "1,"
      ],
      [
        "S",
        "w"
      ],
      [
        "e",
        "f"
      ],
      [
        "i",
        ")\r\n"
      ],
      [
        "s ",
        "consists of "
      ],
      [
        ". ",
        "Each "
      ],
      [
        "        # ",
        "Di"
      ],
      [
        "ha",
        "v"
      ],
      [
        "Tim",
        "e "
      ],
      [
        "Counter",
        "\r\n"
      ],
      [
        "queue",
        ".append("
      ],
      [
        "otherwise",
        ".\r\n"
      ],
      [
        "\"",
        ", and "
      ],
      [
        "l",
        "and "
      ],
      [
        "s",
        "[i"
      ],
      [
        "of ",
        "its "
      ],
      [
        "ing ",
        "to the "
      ],
      [
        "it",
        "e "
      ],
      [
        "el",
        "l"
      ],
      [
        "ed",
        ", "
      ],
      [
        "    def ",
        "minimum"
      ],
      [
        "operation",
        "s.\r\n"
      ],
      [
        "Return the ",
        "maximum "
      ],
      [
        "nums ",
        "becomes "
      ],
      [
        "tic",
        " "
      ],
      [
        "they ",
        "are "
      ],
      [
        ") % ",
        "MOD\r\n"
      ],
      [
        "1",
        "."
      ],
      [
        "1",
        "'s "
      ],
      [
        "9",
        ".\r\n"
      ],
      [
        ";",
        " "
      ],
      [
        "le",
        "av"
      ],
      [
        "ran",
        "k"
      ],
      [
        "element",
        "s.\r\n"
      ],
      [
        "dist",
        "rib"
      ],
      [
        "represent",
        "s a "
      ],
      [
        "score ",
        "of "
      ],
      [
        "repe",
        "at"
      ],
      [
        "Ad",
        "d "
      ],
      [
        "expres",
        "sion"
      ],
      [
        "1",
        "5"
      ],
      [
        "ti",
        "v"
      ],
      [
        "al",
        "ph"
      ],
      [
        "In",
        "iti"
      ],
      [
        "pro",
        "v"
      ],
      [
        "app",
        "ing "
      ],
      [
        "element ",
        "in "
      ],
      [
        "keep ",
        "track of "
      ],
      [
        "ston",
        "es"
      ],
      [
        "used ",
        "to "
      ],
      [
        "would ",
        "be "
      ],
      [
        "        # F",
        "il"
      ],
      [
        "L",
        "C"
      ],
      [
        "b",
        " = "
      ],
      [
        "i",
        "st "
      ],
      [
        "s",
        ".length <= "
      ],
      [
        "on",
        "es"
      ],
      [
        "num",
        "er"
      ],
      [
        "wh",
        "o "
      ],
      [
        "x ",
        "+ "
      ],
      [
        "        # ",
        "Count the "
      ],
      [
        "Input: nums = [",
        "1,"
      ],
      [
        "pers",
        "on"
      ],
      [
        "from collections import ",
        "Counter\r\n"
      ],
      [
        "degre",
        "e "
      ],
      [
        "\t",
        "\r\n"
      ],
      [
        "0",
        " = "
      ],
      [
        "L",
        "eng"
      ],
      [
        "qu",
        "es"
      ],
      [
        "it",
        "self"
      ],
      [
        "of the ",
        "array "
      ],
      [
        "ne",
        "ed "
      ],
      [
        "1 <= ",
        "m, "
      ],
      [
        "ff",
        "er"
      ],
      [
        "list",
        "("
      ],
      [
        "plac",
        "ed "
      ],
      [
        "Given ",
        "an integer array "
      ],
      [
        "Fin",
        "d "
      ],
      [
        "jum",
        "p "
      ],
      [
        "There is ",
        "no "
      ],
      [
        "Ma",
        "x"
      ],
      [
        "calle",
        "d "
      ],
      [
        "l",
        "e the "
      ],
      [
        "num",
        "\r\n"
      ],
      [
        "1 ",
        "("
      ],
      [
        "lo",
        "g "
      ],
      [
        "* ",
        "n "
      ],
      [
        "length",
        "\r\n"
      ],
      [
        "Return the ",
        "minimum "
      ],
      [
        "\"a",
        "aa"
      ],
      [
        "contain",
        "ing "
      ],
      [
        "greater ",
        "than the "
      ],
      [
        "expres",
        "sion "
      ],
      [
        "palindrom",
        "ic "
      ],
      [
        "cho",
        "s"
      ],
      [
        "wid",
        "th "
      ],
      [
        "false",
        ".\r\n"
      ],
      [
        "1",
        "` "
      ],
      [
        "5",
        ". **"
      ],
      [
        "g",
        "o "
      ],
      [
        "        ",
        "count = 0\r\n"
      ],
      [
        "s ",
        "where "
      ],
      [
        ", ",
        "or "
      ],
      [
        "en",
        "counter"
      ],
      [
        "ro",
        "bot"
      ],
      [
        "in ",
        "enumerate("
      ],
      [
        "                ",
        "            "
      ],
      [
        "s, ",
        "we "
      ],
      [
        "incre",
        "as"
      ],
      [
        "`nums",
        "` "
      ],
      [
        "mar",
        "ked "
      ],
      [
        "Ad",
        "d the "
      ],
      [
        ".next",
        "\r\n"
      ],
      [
        "_",
        "map"
      ],
      [
        "p",
        "t"
      ],
      [
        "tur",
        "n"
      ],
      [
        "fro",
        "m"
      ],
      [
        "ex",
        "clu"
      ],
      [
        "ad",
        "dition"
      ],
      [
        "string",
        "\r\n"
      ],
      [
        ".length <= 10",
        "4\r\n"
      ],
      [
        "adjac",
        "ency "
      ],
      [
        "sent",
        "ence "
      ],
      [
        "sti",
        "ll "
      ],
      [
        "Resul",
        "t"
      ],
      [
        "(",
        "1,"
      ],
      [
        "[",
        "3, "
      ],
      [
        "a",
        "i, "
      ],
      [
        "h",
        "o"
      ],
      [
        "re",
        "ce"
      ],
      [
        "at ",
        "a "
      ],
      [
        "is the ",
        "minimum "
      ],
      [
        "        for ",
        "num in "
      ],
      [
        "            # ",
        "Update the "
      ],
      [
        "operation",
        ", "
      ],
      [
        "            return ",
        "False\r\n"
      ],
      [
        "bu",
        "c"
      ],
      [
        "list",
        ")\r\n"
      ],
      [
        "n - ",
        "1, "
      ],
      [
        "number",
        "ed "
      ],
      [
        "rever",
        "se "
      ],
      [
        "patter",
        "n "
      ],
      [
        "achi",
        "eve "
      ],
      [
        "corn",
        "er "
      ],
      [
        "10**",
        "9 + "
      ],
      [
        "(",
        ")"
      ],
      [
        "B",
        "ST"
      ],
      [
        "`",
        "("
      ],
      [
        "e",
        "_"
      ],
      [
        "p",
        "ea"
      ],
      [
        "y",
        "e"
      ],
      [
        "in ",
        "word"
      ],
      [
        "Input: ",
        "words = ["
      ],
      [
        "        return ",
        "count\r\n"
      ],
      [
        "node ",
        "= "
      ],
      [
        "pri",
        "ce"
      ],
      [
        "stud",
        "ent "
      ],
      [
        "lim",
        "it "
      ],
      [
        "fru",
        "it"
      ],
      [
        "float('inf'",
        ")\r\n"
      ],
      [
        "Use ",
        "a "
      ],
      [
        ") // ",
        "2\r\n"
      ],
      [
        "1",
        "6"
      ],
      [
        "2",
        "):\r\n"
      ],
      [
        "A",
        "A"
      ],
      [
        "F",
        "ollow"
      ],
      [
        "r",
        " "
      ],
      [
        "w",
        "ard "
      ],
      [
        "] ",
        "!= "
      ],
      [
        "qu",
        "ent "
      ],
      [
        "3,",
        "1,"
      ],
      [
        "to the ",
        "right "
      ],
      [
        "s of ",
        "size "
      ],
      [
        "            # ",
        "Calculate the "
      ],
      [
        "to",
        "k"
      ],
      [
        "distan",
        "ces "
      ],
      [
        "_sum",
        " = "
      ],
      [
        "TreeNode",
        ":\r\n"
      ],
      [
        "of",
        "_"
      ],
      [
        "build",
        "ing"
      ],
      [
        "expl",
        "ore "
      ],
      [
        "Sear",
        "ch "
      ],
      [
        "1",
        "\",\""
      ],
      [
        "b",
        "lock"
      ],
      [
        "w",
        "a"
      ],
      [
        ", ",
        "then "
      ],
      [
        "2,",
        "4,"
      ],
      [
        "valu",
        "e\r\n"
      ],
      [
        "][",
        "n"
      ],
      [
        "left",
        "="
      ],
      [
        "us",
        "age"
      ],
      [
        "list",
        "\r\n"
      ],
      [
        "inter",
        "se"
      ],
      [
        "find",
        "ing the "
      ],
      [
        "difference ",
        "between the "
      ],
      [
        "-1, ",
        "-1):\r\n"
      ],
      [
        "hal",
        "f"
      ],
      [
        "You are given a 0-indexed ",
        "integer array "
      ],
      [
        "cn",
        "t"
      ],
      [
        "beg",
        "inn"
      ],
      [
        "modulo 109 + ",
        "7.\r\n"
      ],
      [
        "1",
        "3"
      ],
      [
        "2",
        "] = "
      ],
      [
        "P",
        "ython"
      ],
      [
        "b",
        "ase "
      ],
      [
        "e",
        "w"
      ],
      [
        "s",
        "lo"
      ],
      [
        "t",
        "eg"
      ],
      [
        "is ",
        "\""
      ],
      [
        "ro",
        "ad"
      ],
      [
        "and ",
        "then "
      ],
      [
        "or ",
        "more "
      ],
      [
        "up",
        "per "
      ],
      [
        "prefix ",
        "sum "
      ],
      [
        "#         self.",
        "right = "
      ],
      [
        "#         self.",
        "left = "
      ],
      [
        "for a ",
        "binary tree "
      ],
      [
        "G",
        "C"
      ],
      [
        "b",
        "as"
      ],
      [
        "j",
        " + "
      ],
      [
        "s ",
        "from "
      ],
      [
        "ch",
        "a"
      ],
      [
        "and ",
        "a "
      ],
      [
        "at",
        "or "
      ],
      [
        "retur",
        "ne"
      ],
      [
        "of the ",
        "same "
      ],
      [
        "sum",
        " = "
      ],
      [
        "dire",
        "ctly "
      ],
      [
        "('",
        "a"
      ],
      [
        "s[i]",
        ".length == 2\r\n"
      ],
      [
        "weigh",
        "t "
      ],
      [
        "work",
        "er "
      ],
      [
        "bea",
        "ut"
      ],
      [
        "coordin",
        "ates "
      ],
      [
        "recursi",
        "vely "
      ],
      [
        "lea",
        "f "
      ],
      [
        "avail",
        "able "
      ],
      [
        "Uni",
        "on"
      ],
      [
        "# class ",
        "TreeNode:\r\n"
      ],
      [
        "# Definition ",
        "for a binary tree "
      ],
      [
        "# Definition for a binary tree ",
        "node.\r\n"
      ],
      [
        "2",
        "0,"
      ],
      [
        "A",
        "fter the "
      ],
      [
        "d",
        "p "
      ],
      [
        "l",
        "c"
      ],
      [
        "s",
        "[i]["
      ],
      [
        "an",
        "\r\n"
      ],
      [
        "di",
        "fi"
      ],
      [
        "in ",
        "this "
      ],
      [
        "ol",
        "s "
      ],
      [
        "10",
        "00"
      ],
      [
        "in the ",
        "same "
      ],
      [
        "[0",
        "], "
      ],
      [
        "5,",
        "4,"
      ],
      [
        "ate",
        "st "
      ],
      [
        "beca",
        "use the "
      ],
      [
        "sig",
        "n "
      ],
      [
        "dep",
        "th"
      ],
      [
        "hal",
        "f "
      ],
      [
        "Numb",
        "er"
      ],
      [
        "Qu",
        "er"
      ],
      [
        "None, ",
        "right"
      ],
      [
        "sliding ",
        "window "
      ],
      [
        "alph",
        "ab"
      ],
      [
        "left=",
        "None, right"
      ],
      [
        "T",
        "ot"
      ],
      [
        "|",
        " = "
      ],
      [
        "al",
        "_"
      ],
      [
        "num",
        ")\r\n"
      ],
      [
        "le",
        "ver"
      ],
      [
        "qu",
        "e\r\n"
      ],
      [
        "fi",
        "g"
      ],
      [
        "lo",
        "op "
      ],
      [
        "Input: ",
        "nums1 = ["
      ],
      [
        "ord",
        "("
      ],
      [
        "s, ",
        "return the "
      ],
      [
        "me",
        "m"
      ],
      [
        "row",
        ", "
      ],
      [
        "can",
        "d"
      ],
      [
        "s that ",
        "are "
      ],
      [
        "replac",
        "e "
      ],
      [
        "#     def __init__(self, val=0, ",
        "left=None, right"
      ],
      [
        "Note",
        ": "
      ],
      [
        "#         self.right = ",
        "right\r\n"
      ],
      [
        "#         self.left = ",
        "left\r\n"
      ],
      [
        "'",
        ")"
      ],
      [
        "1",
        "5,"
      ],
      [
        "5",
        "00\r\n"
      ],
      [
        "l",
        "l"
      ],
      [
        "t",
        "t"
      ],
      [
        "        ",
        "self."
      ],
      [
        "        ",
        "m, "
      ],
      [
        "is ",
        "defin"
      ],
      [
        "un",
        "der"
      ],
      [
        "ma",
        "king "
      ],
      [
        "gh",
        "t"
      ],
      [
        "node",
        "\r\n"
      ],
      [
        "ow",
        "ever"
      ],
      [
        "            # ",
        "If the "
      ],
      [
        "count ",
        "+= "
      ],
      [
        "' ",
        "or "
      ],
      [
        "can",
        "_"
      ],
      [
        "order",
        "\r\n"
      ],
      [
        "Given ",
        "two "
      ],
      [
        "12",
        "3"
      ],
      [
        "recursi",
        "ve "
      ],
      [
        "require",
        "ment"
      ],
      [
        "satisf",
        "y the "
      ],
      [
        "buil",
        "ding "
      ],
      [
        "dat",
        "a "
      ],
      [
        "#     def __init__(self, val=0, left=None, right",
        "=None):\r\n"
      ],
      [
        "1",
        "]:\r\n"
      ],
      [
        "C",
        "ol"
      ],
      [
        "g",
        "ic"
      ],
      [
        "m",
        "en"
      ],
      [
        ": ",
        "List[List[int]]) -> int:\r\n"
      ],
      [
        "mo",
        "difi"
      ],
      [
        "arr",
        " "
      ],
      [
        "index ",
        "i "
      ],
      [
        "nums[",
        "j"
      ],
      [
        "1,2,",
        "3,4,"
      ],
      [
        "[0,",
        "1,"
      ],
      [
        "        # S",
        "ort the "
      ],
      [
        ". Finally",
        ", it "
      ],
      [
        "help",
        "s in "
      ],
      [
        "        m, ",
        "n = len("
      ],
      [
        "2",
        ", and "
      ],
      [
        "j",
        "ust "
      ],
      [
        "z",
        "z"
      ],
      [
        "an",
        "s\r\n"
      ],
      [
        "to ",
        "its "
      ],
      [
        "a ",
        "valid "
      ],
      [
        "of the ",
        "ith "
      ],
      [
        "        # ",
        "Conver"
      ],
      [
        "nex",
        "t = "
      ],
      [
        "bu",
        "y "
      ],
      [
        "ed by ",
        "a "
      ],
      [
        "return",
        "ed "
      ],
      [
        "..",
        ". "
      ],
      [
        "2],[",
        "1,"
      ],
      [
        "difference ",
        "between "
      ],
      [
        "chos",
        "en "
      ],
      [
        "10**9 + ",
        "7\r\n"
      ],
      [
        "lever",
        "ag"
      ],
      [
        "?",
        "\r\n"
      ],
      [
        "\\",
        "text"
      ],
      [
        "        ",
        "an"
      ],
      [
        "con",
        "dition "
      ],
      [
        "ne",
        "cess"
      ],
      [
        "**",
        " "
      ],
      [
        "ab",
        "o"
      ],
      [
        "i ",
        "== "
      ],
      [
        "il",
        "ar"
      ],
      [
        "\", ",
        "k = "
      ],
      [
        "arr",
        "2"
      ],
      [
        "), ",
        "(0, "
      ],
      [
        "is a ",
        "contiguous "
      ],
      [
        "number",
        ".\r\n"
      ],
      [
        "non-",
        "negative "
      ],
      [
        "starting ",
        "from the "
      ],
      [
        "                return ",
        "False\r\n"
      ],
      [
        "`k",
        "`"
      ],
      [
        ", return ",
        "it "
      ],
      [
        "Alice ",
        "and "
      ],
      [
        "pop",
        "("
      ],
      [
        "), (",
        "1, "
      ],
      [
        "unique",
        "_"
      ],
      [
        "\" and ",
        "\""
      ],
      [
        "tho",
        "d "
      ],
      [
        "Fir",
        "st "
      ],
      [
        "\\text",
        "{"
      ],
      [
        "_",
        "index "
      ],
      [
        "s",
        "ort "
      ],
      [
        "- ",
        "1, "
      ],
      [
        "nums",
        ", "
      ],
      [
        "Output: ",
        "7\r\n"
      ],
      [
        "[1,",
        "1,"
      ],
      [
        "with the ",
        "same "
      ],
      [
        "du",
        "e "
      ],
      [
        "do",
        "min"
      ],
      [
        "[i - ",
        "1]["
      ],
      [
        "interval",
        " "
      ],
      [
        "remaind",
        "er"
      ],
      [
        "them",
        ".\r\n"
      ],
      [
        "defaultdict(",
        "list)\r\n"
      ],
      [
        "allows ",
        "us to "
      ],
      [
        "e",
        "t the "
      ],
      [
        "y",
        "\r\n"
      ],
      [
        "an",
        "e"
      ],
      [
        "ra",
        "c"
      ],
      [
        ") ",
        "* "
      ],
      [
        "it ",
        "to the "
      ],
      [
        "i ",
        "+= 1\r\n"
      ],
      [
        "tim",
        "e, "
      ],
      [
        "me",
        "thod "
      ],
      [
        "mov",
        "e"
      ],
      [
        "arr",
        "1"
      ],
      [
        "value ",
        "is "
      ],
      [
        "nums[",
        "j] "
      ],
      [
        "'s ",
        "a "
      ],
      [
        "total ",
        "cost "
      ],
      [
        "consist",
        "s "
      ],
      [
        "ment ",
        "the "
      ],
      [
        "divis",
        "or "
      ],
      [
        "remaind",
        "er "
      ],
      [
        "-",
        ">"
      ],
      [
        "6",
        "]\r\n"
      ],
      [
        "7",
        "],["
      ],
      [
        ":",
        "\\r\r\n"
      ],
      [
        "H",
        "owever"
      ],
      [
        "on",
        "ce"
      ],
      [
        "se",
        "q"
      ],
      [
        "to ",
        "efficiently "
      ],
      [
        "] ",
        "and "
      ],
      [
        "nums",
        ".length\r\n"
      ],
      [
        "10",
        ".\r\n"
      ],
      [
        "per",
        "i"
      ],
      [
        "sum ",
        "+= "
      ],
      [
        "left",
        "()\r\n"
      ],
      [
        "right",
        ":\r\n"
      ],
      [
        "differ",
        "ence"
      ],
      [
        "   - ",
        "If "
      ],
      [
        "ser",
        "v"
      ],
      [
        "push",
        "("
      ],
      [
        "he",
        "al"
      ],
      [
        "Bin",
        "ary "
      ],
      [
        "tup",
        "le"
      ],
      [
        "ols ",
        "import "
      ],
      [
        "1",
        "2,"
      ],
      [
        "[",
        "node"
      ],
      [
        "`",
        "j"
      ],
      [
        "s",
        "[0] "
      ],
      [
        "in",
        "fin"
      ],
      [
        "= ",
        "max(max_"
      ],
      [
        "de",
        "le"
      ],
      [
        "to the ",
        "next "
      ],
      [
        "pri",
        "ces "
      ],
      [
        "digit",
        "s.\r\n"
      ],
      [
        "1,1,",
        "1,"
      ],
      [
        "Coun",
        "t"
      ],
      [
        "x, ",
        "n"
      ],
      [
        "find",
        "s the "
      ],
      [
        "checks ",
        "if the "
      ],
      [
        "box",
        "es "
      ],
      [
        "occurrences ",
        "of each "
      ],
      [
        "plo",
        "ye"
      ],
      [
        "S",
        "iz"
      ],
      [
        "_",
        "of_"
      ],
      [
        "re",
        "s"
      ],
      [
        "re",
        "arrang"
      ],
      [
        "ac",
        "tion"
      ],
      [
        "[i] ",
        "- "
      ],
      [
        "valu",
        "e.\r\n"
      ],
      [
        "gra",
        "m "
      ],
      [
        "sort",
        "("
      ],
      [
        "\"a",
        "ab"
      ],
      [
        "becom",
        "e "
      ],
      [
        "BFS",
        " "
      ],
      [
        ".",
        "sort()\r\n"
      ],
      [
        "K",
        "e"
      ],
      [
        "i",
        "p "
      ],
      [
        "s",
        "**: We "
      ],
      [
        "x",
        "i, "
      ],
      [
        "{",
        "}\r\n"
      ],
      [
        "s ",
        "to the "
      ],
      [
        "to ",
        "make "
      ],
      [
        " = ",
        "Solution"
      ],
      [
        "In",
        "de"
      ],
      [
        "[i] ",
        "is the "
      ],
      [
        "3 ",
        "<= "
      ],
      [
        "current ",
        "= "
      ],
      [
        "This solution ",
        "iterates "
      ],
      [
        ", it ",
        "returns `"
      ],
      [
        "large",
        ", return it "
      ],
      [
        "play",
        "er"
      ],
      [
        "positive ",
        "integers "
      ],
      [
        "minim",
        "iz"
      ],
      [
        "degre",
        "e"
      ],
      [
        " = Solution",
        "()\r\n"
      ],
      [
        "0",
        ")"
      ],
      [
        "3",
        ") "
      ],
      [
        "m",
        "):\r\n"
      ],
      [
        "t",
        "ex"
      ],
      [
        "u",
        ", "
      ],
      [
        "v",
        "es "
      ],
      [
        ": ",
        "Optional[TreeNode"
      ],
      [
        "# ",
        "Example "
      ],
      [
        "Input: ",
        "num = "
      ],
      [
        "i ",
        "!= "
      ],
      [
        "s, ",
        "it "
      ],
      [
        "an integer ",
        "k"
      ],
      [
        "sear",
        "ch"
      ],
      [
        "O(",
        "1) "
      ],
      [
        "travers",
        "al "
      ],
      [
        "pic",
        "k "
      ],
      [
        "fri",
        "end"
      ],
      [
        "(self, n",
        ": int, "
      ],
      [
        "usage",
        ":\r\n"
      ],
      [
        "# Example ",
        "usage:\r\n"
      ],
      [
        "F",
        "un"
      ],
      [
        "[",
        "1], "
      ],
      [
        "x",
        "_"
      ],
      [
        "y",
        "ing the "
      ],
      [
        "pl",
        "i"
      ],
      [
        ". ",
        "Otherwise"
      ],
      [
        "at ",
        "any "
      ],
      [
        "tur",
        "e "
      ],
      [
        "k ",
        "- "
      ],
      [
        "all ",
        "elements "
      ],
      [
        "ad",
        "d the "
      ],
      [
        "index",
        " = "
      ],
      [
        "1],[",
        "0,"
      ],
      [
        ".length <= ",
        "2"
      ],
      [
        "min(",
        "min_"
      ],
      [
        "O(",
        "n "
      ],
      [
        "subsequen",
        "ce"
      ],
      [
        ") + ",
        "("
      ],
      [
        "shortest ",
        "path "
      ],
      [
        "meet",
        "ing"
      ],
      [
        "iterate ",
        "through the "
      ],
      [
        "        dp",
        " = ["
      ],
      [
        "...",
        ", "
      ],
      [
        "Pre",
        "fi"
      ],
      [
        "sour",
        "ce "
      ],
      [
        "that",
        ":\r\n"
      ],
      [
        "Str",
        "ing"
      ],
      [
        "Tw",
        "o "
      ],
      [
        "'",
        "'.join("
      ],
      [
        "1",
        "9"
      ],
      [
        "t",
        "able"
      ],
      [
        "de",
        "que\r\n"
      ],
      [
        "s, ",
        "so "
      ],
      [
        "count",
        "s the "
      ],
      [
        "first ",
        "and "
      ],
      [
        "consi",
        "der "
      ],
      [
        "tri",
        "ple"
      ],
      [
        "thre",
        "sh"
      ],
      [
        "Pa",
        "th"
      ],
      [
        "lam",
        "bd"
      ],
      [
        "false ",
        "otherwise.\r\n"
      ],
      [
        "\"",
        "]]\r\n"
      ],
      [
        "o",
        "se "
      ],
      [
        "ti",
        "ce "
      ],
      [
        "ro",
        "und"
      ],
      [
        "se",
        "en "
      ],
      [
        "in ",
        "descending "
      ],
      [
        "qu",
        "al"
      ],
      [
        "                ",
        "result.append("
      ],
      [
        " = ",
        "[0] "
      ],
      [
        "[i] ",
        "+ "
      ],
      [
        "This ",
        "code "
      ],
      [
        "on ",
        "a "
      ],
      [
        "index ",
        "of the "
      ],
      [
        "0,0,",
        "0,"
      ],
      [
        "        # Initializ",
        "e "
      ],
      [
        "repe",
        "ated "
      ],
      [
        "balan",
        "ce "
      ],
      [
        "botto",
        "m "
      ],
      [
        "fini",
        "sh"
      ],
      [
        "fri",
        "end "
      ],
      [
        "(",
        "x, y"
      ],
      [
        "1",
        "8"
      ],
      [
        "c",
        "ros"
      ],
      [
        "d",
        "ing the "
      ],
      [
        "j",
        "k"
      ],
      [
        "x",
        "or"
      ],
      [
        "            ",
        "graph["
      ],
      [
        "ma",
        "in "
      ],
      [
        "ed ",
        "from "
      ],
      [
        "nums",
        "[i + "
      ],
      [
        "po",
        "t"
      ],
      [
        "for ",
        "i in range("
      ],
      [
        "per",
        "form the "
      ],
      [
        "        return ",
        "True\r\n"
      ],
      [
        "any ",
        "two "
      ],
      [
        "3 ",
        "is "
      ],
      [
        "value ",
        "in the "
      ],
      [
        "), ",
        "where "
      ],
      [
        "position",
        "s "
      ],
      [
        ". If ",
        "there are "
      ],
      [
        "distan",
        "ces"
      ],
      [
        "root",
        "."
      ],
      [
        "Calcul",
        "ate "
      ],
      [
        "pi",
        "ec"
      ],
      [
        "node.",
        "left"
      ],
      [
        "ari",
        "th"
      ],
      [
        ". S",
        "o "
      ],
      [
        "2D ",
        "array "
      ],
      [
        "occur",
        "s "
      ],
      [
        "#",
        "\",\""
      ],
      [
        "1",
        "4"
      ],
      [
        "y",
        "ear"
      ],
      [
        "ti",
        " "
      ],
      [
        "ma",
        "p "
      ],
      [
        "an ",
        "un"
      ],
      [
        "that ",
        "are "
      ],
      [
        "wh",
        "ose "
      ],
      [
        "ed",
        "\r\n"
      ],
      [
        "com",
        "pres"
      ],
      [
        "Re",
        "move the "
      ],
      [
        "such ",
        "a "
      ],
      [
        "Given ",
        "an array of "
      ],
      [
        "\"abc",
        "d"
      ],
      [
        "key",
        "="
      ],
      [
        "1 <= n ",
        "<= 105\r\n"
      ],
      [
        "Non",
        "e\r\n"
      ],
      [
        "bottom",
        "-"
      ],
      [
        "represent ",
        "the "
      ],
      [
        "Let",
        "'s "
      ],
      [
        "5",
        "].\r\n"
      ],
      [
        "x ",
        "< "
      ],
      [
        "3,",
        "5,"
      ],
      [
        "pa",
        "int"
      ],
      [
        "tim",
        "e.\r\n"
      ],
      [
        "s: ",
        "List[List[int]]) -> int:\r\n"
      ],
      [
        "root",
        ": Optional[TreeNode"
      ],
      [
        "bit",
        "mask "
      ],
      [
        "ensures that ",
        "the "
      ],
      [
        "3],[",
        "2,"
      ],
      [
        "Sub",
        "array"
      ],
      [
        "even",
        "_"
      ],
      [
        "chang",
        "es "
      ],
      [
        "ful",
        "l "
      ],
      [
        "respectivel",
        "y.\r\n"
      ],
      [
        "mes",
        "sa"
      ],
      [
        "memoiz",
        "ation "
      ],
      [
        "(",
        "2,"
      ],
      [
        "2",
        "2"
      ],
      [
        "st",
        "a"
      ],
      [
        "of ",
        "`"
      ],
      [
        "co",
        "lo"
      ],
      [
        "a ",
        "= "
      ],
      [
        "ma",
        "th"
      ],
      [
        "char",
        " "
      ],
      [
        "Re",
        "cursi"
      ],
      [
        "have ",
        "to "
      ],
      [
        "character",
        "s.\r\n"
      ],
      [
        "subarray ",
        "is "
      ],
      [
        "size ",
        "of the "
      ],
      [
        "Return ",
        "true if "
      ],
      [
        "MOD",
        " = "
      ],
      [
        "suffi",
        "x "
      ],
      [
        "mis",
        "sing "
      ],
      [
        "consists ",
        "only of "
      ],
      [
        "(",
        "num"
      ],
      [
        ")",
        "] "
      ],
      [
        "T",
        "ry "
      ],
      [
        "a",
        "ke "
      ],
      [
        "b",
        "r"
      ],
      [
        "c",
        "lock"
      ],
      [
        "f",
        "a"
      ],
      [
        "- ",
        "1\r\n"
      ],
      [
        "ec",
        "t "
      ],
      [
        "1 <= ",
        "word"
      ],
      [
        "ction",
        "ary "
      ],
      [
        "tra",
        "il"
      ],
      [
        "tre",
        "e, "
      ],
      [
        "dire",
        "ction "
      ],
      [
        "remov",
        "e the "
      ],
      [
        "flo",
        "or"
      ],
      [
        "run",
        "n"
      ],
      [
        "childr",
        "en "
      ],
      [
        "from 0 to ",
        "n - "
      ],
      [
        "10^",
        "9 + "
      ],
      [
        "returne",
        "d.\r\n"
      ],
      [
        "large, return it ",
        "modulo 109 + 7.\r\n"
      ],
      [
        "MOD = ",
        "10**9 + 7\r\n"
      ],
      [
        ":",
        "  # "
      ],
      [
        "B",
        "ase "
      ],
      [
        "c",
        "ut"
      ],
      [
        "n",
        "an\r\n"
      ],
      [
        "s",
        "1"
      ],
      [
        "en",
        "co"
      ],
      [
        "pl",
        "y "
      ],
      [
        "ation",
        ".\r\n"
      ],
      [
        "mo",
        "du"
      ],
      [
        "from ",
        "`"
      ],
      [
        "1, ",
        "2, "
      ],
      [
        "                    ",
        "break\r\n"
      ],
      [
        "right",
        ", "
      ],
      [
        "em",
        "ploye"
      ],
      [
        "ci",
        "ties "
      ],
      [
        "' ",
        "to "
      ],
      [
        "0 <= ",
        "i < "
      ],
      [
        "left ",
        "to "
      ],
      [
        "is",
        "land"
      ],
      [
        "total ",
        "of "
      ],
      [
        "remain",
        "ing_"
      ],
      [
        "comput",
        "es the "
      ],
      [
        ": int) -> ",
        "bool:\r\n"
      ],
      [
        "Po",
        "int"
      ],
      [
        "minut",
        "es "
      ],
      [
        "extra",
        " "
      ],
      [
        "ough",
        " "
      ],
      [
        "'",
        "c"
      ],
      [
        "'",
        ", and "
      ],
      [
        "0",
        "].\r\n"
      ],
      [
        "3",
        "3"
      ],
      [
        "[",
        "n"
      ],
      [
        "st",
        "re"
      ],
      [
        "] ",
        "> "
      ],
      [
        "di",
        "st "
      ],
      [
        ") ",
        "or "
      ],
      [
        "x ",
        "and "
      ],
      [
        "[i] ",
        "= ["
      ],
      [
        "with ",
        "an "
      ],
      [
        "array",
        ", "
      ],
      [
        "solution ",
        "is "
      ],
      [
        "mov",
        "es"
      ],
      [
        "nums[",
        "2] "
      ],
      [
        "There ",
        "is a "
      ],
      [
        "tak",
        "e the "
      ],
      [
        "cy",
        "cle "
      ],
      [
        "dep",
        "th-first search "
      ],
      [
        "defin",
        "es a "
      ],
      [
        "exce",
        "p"
      ],
      [
        "diagon",
        "al"
      ],
      [
        ".pop",
        "()\r\n"
      ],
      [
        "balanc",
        "ed "
      ],
      [
        "stam",
        "p"
      ],
      [
        "        # Di",
        "ctionary "
      ],
      [
        "c",
        "ri"
      ],
      [
        "e",
        "st"
      ],
      [
        "h",
        "our "
      ],
      [
        "t",
        "u"
      ],
      [
        "u",
        "st"
      ],
      [
        ", ",
        "("
      ],
      [
        "or",
        "ity "
      ],
      [
        ": ",
        "List[List[int]]"
      ],
      [
        "] ",
        "indicates "
      ],
      [
        "am",
        "ong "
      ],
      [
        "an ",
        "m x n "
      ],
      [
        "1 ",
        "-> "
      ],
      [
        "nums",
        "[i"
      ],
      [
        "0 ",
        "("
      ],
      [
        "with ",
        "value "
      ],
      [
        "node",
        "'s "
      ],
      [
        "s, ",
        "where "
      ],
      [
        "element",
        "s\r\n"
      ],
      [
        "You are given ",
        "an array "
      ],
      [
        "are",
        ": "
      ],
      [
        "der",
        "iv"
      ],
      [
        "conver",
        "t "
      ],
      [
        "For example, ",
        "if "
      ],
      [
        "pas",
        "s"
      ],
      [
        "heapq.heap",
        "push("
      ],
      [
        "regi",
        "on"
      ],
      [
        "mone",
        "y "
      ],
      [
        "S",
        "um "
      ],
      [
        "[",
        "1]"
      ],
      [
        "]",
        ". "
      ],
      [
        "]",
        ". The "
      ],
      [
        "        ",
        "result = "
      ],
      [
        "ch",
        "ni"
      ],
      [
        "<= ",
        "nums[i] "
      ],
      [
        "1 ",
        "* "
      ],
      [
        "1 ",
        "< "
      ],
      [
        "star",
        "t = "
      ],
      [
        "will ",
        "be the "
      ],
      [
        "5 ",
        "* 104\r\n"
      ],
      [
        "answer ",
        "may be "
      ],
      [
        "root ",
        "of a "
      ],
      [
        "exist",
        "s "
      ],
      [
        "It can be ",
        "prov"
      ],
      [
        "based ",
        "on "
      ],
      [
        "team",
        " "
      ],
      [
        "Here's the implement",
        "ation of the "
      ],
      [
        "energ",
        "y "
      ],
      [
        "a",
        "\"\r\n"
      ],
      [
        "b",
        "ar"
      ],
      [
        "f",
        "low"
      ],
      [
        "g",
        "ard"
      ],
      [
        "r",
        ", "
      ],
      [
        "v",
        " in "
      ],
      [
        "x",
        "y"
      ],
      [
        "t ",
        "is "
      ],
      [
        "ol",
        "d "
      ],
      [
        "str",
        "eng"
      ],
      [
        "are ",
        "unique.\r\n"
      ],
      [
        "sub",
        "set "
      ],
      [
        "Explanation",
        ":"
      ],
      [
        "with",
        "_"
      ],
      [
        "s[",
        "j] "
      ],
      [
        "current_",
        "sum"
      ],
      [
        ", it ",
        "means "
      ],
      [
        "uni",
        "on"
      ],
      [
        "tru",
        "e"
      ],
      [
        "                return ",
        "0\r\n"
      ],
      [
        "distance ",
        "between "
      ],
      [
        "`nums",
        "2"
      ],
      [
        "0-index",
        "ed"
      ],
      [
        "stru",
        "ction"
      ],
      [
        "In ",
        "this "
      ],
      [
        "integer",
        ".\r\n"
      ],
      [
        "linked ",
        "list "
      ],
      [
        "solve the ",
        "problem"
      ],
      [
        "Follow",
        " "
      ],
      [
        "(",
        "1"
      ],
      [
        "E",
        "very "
      ],
      [
        "M",
        "e"
      ],
      [
        "d",
        "x, "
      ],
      [
        "e",
        "led "
      ],
      [
        "w",
        "inn"
      ],
      [
        "        ",
        "MOD = 10**9 + 7\r\n"
      ],
      [
        "] ",
        "< "
      ],
      [
        "un",
        "it"
      ],
      [
        "ma",
        "de "
      ],
      [
        "su",
        "it"
      ],
      [
        "an ",
        "edge "
      ],
      [
        "nums",
        "1 and "
      ],
      [
        "string ",
        "`s"
      ],
      [
        "    def ",
        "maximum"
      ],
      [
        "sort",
        "ing "
      ],
      [
        "node ",
        "is "
      ],
      [
        "result",
        ".\r\n"
      ],
      [
        "secon",
        "d_"
      ],
      [
        "sol",
        " = Solution()\r\n"
      ],
      [
        "Input: n = ",
        "3, "
      ],
      [
        ": List[int]",
        ") -> List[int]:\r\n"
      ],
      [
        "hand",
        "le"
      ],
      [
        "swap",
        " "
      ],
      [
        "solve the ",
        "problem "
      ],
      [
        "dec",
        "im"
      ],
      [
        "[",
        "2] "
      ],
      [
        "e",
        "e"
      ],
      [
        "f",
        "our"
      ],
      [
        "n",
        ")]\r\n"
      ],
      [
        "re",
        "stri"
      ],
      [
        "st",
        "op"
      ],
      [
        "y ",
        "in "
      ],
      [
        "pl",
        "ay "
      ],
      [
        "at ",
        "indices "
      ],
      [
        "plan",
        "t"
      ],
      [
        "ver",
        "tic"
      ],
      [
        "[1,",
        "0,"
      ],
      [
        "s: ",
        "List[int]"
      ],
      [
        "return",
        "\r\n"
      ],
      [
        "pi",
        "x"
      ],
      [
        "determin",
        "e "
      ],
      [
        "choo",
        "se the "
      ],
      [
        "integer",
        "s.\r\n"
      ],
      [
        "appear",
        " "
      ],
      [
        "enti",
        "f"
      ],
      [
        "coin",
        "s "
      ],
      [
        ". Th",
        "en"
      ],
      [
        "ip",
        "("
      ],
      [
        "lab",
        "eled "
      ],
      [
        "initial",
        "ly "
      ],
      [
        "        for num in ",
        "nums:\r\n"
      ],
      [
        "3",
        " - "
      ],
      [
        "`",
        "num"
      ],
      [
        "`",
        ". This "
      ],
      [
        "e",
        "valu"
      ],
      [
        "k",
        "th "
      ],
      [
        "s",
        ".length <= 105\r\n"
      ],
      [
        "th",
        "en the "
      ],
      [
        "on",
        "ce.\r\n"
      ],
      [
        "an",
        "s "
      ],
      [
        "            ",
        "total_"
      ],
      [
        "ra",
        "t"
      ],
      [
        "] ",
        "* "
      ],
      [
        "k ",
        "is "
      ],
      [
        "app",
        "le"
      ],
      [
        "index",
        "\r\n"
      ],
      [
        "grid",
        ".\r\n"
      ],
      [
        "0 <= ",
        "n"
      ],
      [
        "Output: [",
        "\""
      ],
      [
        "iter",
        "ating "
      ],
      [
        "contain",
        "s the "
      ],
      [
        "at most ",
        "one "
      ],
      [
        "mar",
        "k"
      ],
      [
        "tivel",
        "y "
      ],
      [
        "travers",
        "al"
      ],
      [
        "sele",
        "ct "
      ],
      [
        "delet",
        "e "
      ],
      [
        "cour",
        "se"
      ],
      [
        "Hence",
        ", the "
      ],
      [
        "pot",
        "enti"
      ],
      [
        "10^9 + ",
        "7"
      ],
      [
        "Follow ",
        "up"
      ],
      [
        "\"",
        "\"\r\n"
      ],
      [
        "/",
        "/"
      ],
      [
        "7",
        "], "
      ],
      [
        "8",
        "]\r\n"
      ],
      [
        ":",
        "i"
      ],
      [
        "r",
        "in"
      ],
      [
        "r",
        "on"
      ],
      [
        "s",
        " "
      ],
      [
        "u",
        "g"
      ],
      [
        "w",
        "all"
      ],
      [
        ": ",
        "The "
      ],
      [
        "of ",
        "these "
      ],
      [
        "be",
        "st "
      ],
      [
        "so ",
        "that "
      ],
      [
        "mat",
        "ch "
      ],
      [
        "calcul",
        "ation"
      ],
      [
        "4 ",
        "and "
      ],
      [
        "number",
        "s.\r\n"
      ],
      [
        "ther",
        " the "
      ],
      [
        "upd",
        "ates the "
      ],
      [
        "[i - ",
        "1] "
      ],
      [
        ": str",
        ") -> int:\r\n"
      ],
      [
        "travers",
        "e the "
      ],
      [
        "The number of nodes in the ",
        "tree is "
      ],
      [
        "lambd",
        "a "
      ],
      [
        "\"",
        " + "
      ],
      [
        ")",
        ", and "
      ],
      [
        "6",
        "],["
      ],
      [
        "B",
        " "
      ],
      [
        "M",
        "in"
      ],
      [
        "\\",
        ").\r\n"
      ],
      [
        "_",
        "count "
      ],
      [
        "`",
        "max_"
      ],
      [
        "z",
        "ip("
      ],
      [
        "en",
        "d the "
      ],
      [
        "ing",
        ", "
      ],
      [
        "# ",
        "sol = Solution()\r\n"
      ],
      [
        "lo",
        "op"
      ],
      [
        "ne",
        "ed"
      ],
      [
        "it ",
        "to "
      ],
      [
        "vi",
        "si"
      ],
      [
        "\" ",
        "("
      ],
      [
        "length",
        ", "
      ],
      [
        "nums[",
        "1] "
      ],
      [
        "s: ",
        "List[int], "
      ],
      [
        "number",
        "Of"
      ],
      [
        "iter",
        "a"
      ],
      [
        "1],[",
        "2,"
      ],
      [
        "day",
        "s "
      ],
      [
        "1 + ",
        "1 + "
      ],
      [
        "n == ",
        "grid"
      ],
      [
        "3,4",
        "],["
      ],
      [
        "[i][j",
        "] = "
      ],
      [
        "allow",
        "ed to "
      ],
      [
        "2 <= ",
        "n "
      ],
      [
        "amoun",
        "t"
      ],
      [
        "cour",
        "se "
      ],
      [
        "stic",
        "k"
      ],
      [
        "separ",
        "at"
      ],
      [
        "helper function ",
        "`"
      ],
      [
        "tok",
        "en"
      ],
      [
        "depth-first search ",
        "(DFS"
      ],
      [
        "X",
        "\",\""
      ],
      [
        "ti",
        "es"
      ],
      [
        "st",
        "ate"
      ],
      [
        "ro",
        "ll"
      ],
      [
        "de",
        "s "
      ],
      [
        "            ",
        "min_"
      ],
      [
        "min",
        "-"
      ],
      [
        "ct",
        "ure"
      ],
      [
        ". The ",
        "idea is to "
      ],
      [
        "index",
        ", "
      ],
      [
        "7,",
        "8,"
      ],
      [
        "Here",
        "'s a "
      ],
      [
        "diction",
        "ary"
      ],
      [
        "left, ",
        "right = "
      ],
      [
        "out",
        "put "
      ],
      [
        "queue",
        ":\r\n"
      ],
      [
        "denot",
        "es the "
      ],
      [
        "medi",
        "an "
      ],
      [
        "ali",
        "ce"
      ],
      [
        "reque",
        "st"
      ],
      [
        "handle",
        "s the "
      ],
      [
        "-",
        "2"
      ],
      [
        "B",
        "y "
      ],
      [
        "a",
        "\",\""
      ],
      [
        "c",
        " in "
      ],
      [
        "i",
        "s:\r\n"
      ],
      [
        "t",
        "ry "
      ],
      [
        "u",
        "s, "
      ],
      [
        "|",
        " + "
      ],
      [
        "um",
        "m"
      ],
      [
        "es ",
        "are "
      ],
      [
        "ed ",
        "the "
      ],
      [
        "ed ",
        "in the "
      ],
      [
        "sort",
        "s the "
      ],
      [
        "character",
        "s in "
      ],
      [
        "with the ",
        "maximum "
      ],
      [
        "order ",
        "of the "
      ],
      [
        "queu",
        "e."
      ],
      [
        "vers",
        "e the "
      ],
      [
        "bl",
        "ack "
      ],
      [
        "connected ",
        "component"
      ],
      [
        "accord",
        "ing"
      ],
      [
        "altern",
        "ating "
      ],
      [
        "Here's the step-by-step ",
        "approach:\r\n"
      ],
      [
        "-",
        "th "
      ],
      [
        "8",
        ".\r\n"
      ],
      [
        "A",
        "p"
      ],
      [
        "C",
        "ase"
      ],
      [
        "`",
        "left"
      ],
      [
        "h",
        "er"
      ],
      [
        " ",
        " "
      ],
      [
        "en ",
        "that "
      ],
      [
        "0 ",
        "is "
      ],
      [
        "sh",
        "e "
      ],
      [
        "bo",
        "o"
      ],
      [
        "igh",
        "t"
      ],
      [
        "ke",
        "t "
      ],
      [
        "s: ",
        "List[List[int]], "
      ],
      [
        "form",
        "ul"
      ],
      [
        "into ",
        "two "
      ],
      [
        "List[List[int]",
        "]:\r\n"
      ],
      [
        "because ",
        "it "
      ],
      [
        "[j",
        "]"
      ],
      [
        "Input: arr",
        " = "
      ],
      [
        "ite",
        "m "
      ],
      [
        "Alice and ",
        "Bob "
      ],
      [
        "B",
        "\",\""
      ],
      [
        "c",
        "li"
      ],
      [
        "d",
        "umm"
      ],
      [
        "th",
        "ere"
      ],
      [
        "in",
        "ver"
      ],
      [
        "re",
        "l"
      ],
      [
        "st",
        ", "
      ],
      [
        "and ",
        "its "
      ],
      [
        "ation",
        "**: "
      ],
      [
        "ed ",
        "in "
      ],
      [
        "sub",
        "-"
      ],
      [
        "2 ",
        "to "
      ],
      [
        "Re",
        "move "
      ],
      [
        "    def ",
        "is"
      ],
      [
        "        return ",
        "ans\r\n"
      ],
      [
        ". If ",
        "a "
      ],
      [
        "Input: nums = [",
        "2,"
      ],
      [
        "ation ",
        "is "
      ],
      [
        "gre",
        "atest "
      ],
      [
        "character ",
        "in "
      ],
      [
        "5 ",
        "and "
      ],
      [
        "No",
        "tice "
      ],
      [
        "ag",
        "a"
      ],
      [
        "score ",
        "is "
      ],
      [
        "find",
        "("
      ],
      [
        "s(self, ",
        "n"
      ],
      [
        "te",
        "chni"
      ],
      [
        "upd",
        "ating the "
      ],
      [
        "stack",
        ".append("
      ],
      [
        "in the range ",
        "[0, "
      ],
      [
        "hand",
        "le "
      ],
      [
        ": int) -> ",
        "List[int]:\r\n"
      ],
      [
        "coordin",
        "ate "
      ],
      [
        "defaultdict(",
        "int"
      ],
      [
        "fe",
        "w"
      ],
      [
        "satisfi",
        "es the "
      ],
      [
        "This approach ensures that we ",
        "efficiently "
      ],
      [
        "minimum cost ",
        "to "
      ],
      [
        "Leng",
        "th"
      ],
      [
        "colo",
        "red "
      ],
      [
        "4",
        ". "
      ],
      [
        "P",
        "ri"
      ],
      [
        "a",
        "gram "
      ],
      [
        "j",
        "\r\n"
      ],
      [
        "m",
        "\r\n"
      ],
      [
        "s",
        "en"
      ],
      [
        "th",
        " the "
      ],
      [
        "] ",
        "-= 1\r\n"
      ],
      [
        "qu",
        "ic"
      ],
      [
        "ea",
        "si"
      ],
      [
        "array ",
        "and "
      ],
      [
        "com",
        "par"
      ],
      [
        "ct",
        "o"
      ],
      [
        "sh",
        "ap"
      ],
      [
        "be",
        "ing "
      ],
      [
        "You are given ",
        "an array of "
      ],
      [
        "fun",
        "cto"
      ],
      [
        "There are ",
        "no "
      ],
      [
        "stack",
        "[-1"
      ],
      [
        "-b",
        "it "
      ],
      [
        "cir",
        "cul"
      ],
      [
        "destin",
        "ation"
      ],
      [
        "bas",
        "ket"
      ],
      [
        "Tot",
        "al "
      ],
      [
        "key=",
        "lambda "
      ],
      [
        "(",
        "0,"
      ],
      [
        "-",
        "1:\r\n"
      ],
      [
        ".",
        "com"
      ],
      [
        "1",
        "\"\r\n"
      ],
      [
        "D",
        "iv"
      ],
      [
        "O",
        "n "
      ],
      [
        "i",
        ".\r\n"
      ],
      [
        "k",
        "now"
      ],
      [
        "o",
        "ff"
      ],
      [
        "p",
        "q"
      ],
      [
        "t",
        "ow"
      ],
      [
        "in ",
        "nums"
      ],
      [
        "ed ",
        "at "
      ],
      [
        "[i] ",
        "== "
      ],
      [
        "bo",
        "b"
      ],
      [
        "count",
        "s "
      ],
      [
        "word",
        "s[i] "
      ],
      [
        "(self, ",
        "root: Optional[TreeNode"
      ],
      [
        "element",
        "\r\n"
      ],
      [
        "string",
        ", "
      ],
      [
        "5,",
        "5,"
      ],
      [
        "point",
        "s.\r\n"
      ],
      [
        "represent",
        "s "
      ],
      [
        "act",
        "u"
      ],
      [
        "order ",
        "of "
      ],
      [
        "ser",
        "ver "
      ],
      [
        "head ",
        "= ["
      ],
      [
        "tive",
        "_"
      ],
      [
        "heapq.heap",
        "pop("
      ],
      [
        "        # Fil",
        "l the "
      ],
      [
        "log ",
        "n"
      ],
      [
        "dele",
        "tion"
      ],
      [
        "1",
        ").\r\n"
      ],
      [
        "E",
        "lement"
      ],
      [
        "d",
        "one "
      ],
      [
        "i",
        "es"
      ],
      [
        "co",
        "l "
      ],
      [
        "1, ",
        "1, "
      ],
      [
        "li",
        "ke "
      ],
      [
        "1 <= ",
        "k "
      ],
      [
        "This solution ",
        "iterates through the "
      ],
      [
        "bu",
        "ild "
      ],
      [
        "right ",
        "- "
      ],
      [
        "ded ",
        "by "
      ],
      [
        "target",
        ".\r\n"
      ],
      [
        "for the ",
        "current "
      ],
      [
        "proces",
        "sing "
      ],
      [
        "In ",
        "one "
      ],
      [
        ", return the ",
        "number of "
      ],
      [
        "This solution works ",
        "as follows:\r\n"
      ],
      [
        "fru",
        "it "
      ],
      [
        "0 or ",
        "1.\r\n"
      ],
      [
        "tho",
        "se "
      ],
      [
        "space ",
        "complex"
      ],
      [
        "Sort",
        "ed"
      ],
      [
        "guarante",
        "ed "
      ],
      [
        "added ",
        "to the "
      ],
      [
        "[i-1",
        "]["
      ],
      [
        "| + ",
        "|"
      ],
      [
        "\"",
        ")\r\n"
      ],
      [
        "(",
        "1 << "
      ],
      [
        "[",
        "neighbor"
      ],
      [
        "_",
        "id"
      ],
      [
        "n",
        "or"
      ],
      [
        "s",
        "ort the "
      ],
      [
        "v",
        "es"
      ],
      [
        "x",
        "x"
      ],
      [
        "x",
        ": "
      ],
      [
        "an",
        "ge"
      ],
      [
        "en",
        "di"
      ],
      [
        "if ",
        "it is "
      ],
      [
        "ex",
        "ist "
      ],
      [
        "valu",
        "e, "
      ],
      [
        "If ",
        "we "
      ],
      [
        "two ",
        "integers "
      ],
      [
        "so ",
        "far"
      ],
      [
        "s[",
        "1] "
      ],
      [
        "has ",
        "an "
      ],
      [
        "have ",
        "been "
      ],
      [
        "Input: nums = [",
        "4,"
      ],
      [
        "and",
        "\r\n"
      ],
      [
        "Di",
        "ffer"
      ],
      [
        "greater than ",
        "or equal to "
      ],
      [
        "mid ",
        "= ("
      ],
      [
        "Valu",
        "e"
      ],
      [
        "ensuring ",
        "that "
      ],
      [
        "* (n ",
        "+ 1)\r\n"
      ],
      [
        "Initi",
        "ally, "
      ],
      [
        "trail",
        "ing "
      ],
      [
        "nums1 and ",
        "nums"
      ],
      [
        "0",
        "] = "
      ],
      [
        "4",
        "5"
      ],
      [
        "`",
        ") "
      ],
      [
        "s",
        "am"
      ],
      [
        "st",
        "ea"
      ],
      [
        "le",
        ".\r\n"
      ],
      [
        "or ",
        "equal to the "
      ],
      [
        "ac",
        "ce"
      ],
      [
        " = ",
        "\""
      ],
      [
        "[i] ",
        "<= "
      ],
      [
        "for",
        "mat"
      ],
      [
        "s = [",
        "[0,"
      ],
      [
        "node",
        ":\r\n"
      ],
      [
        "il",
        "l "
      ],
      [
        ", we ",
        "return the "
      ],
      [
        "represent",
        "ed as "
      ],
      [
        "Given ",
        "an integer "
      ],
      [
        "word ",
        "= "
      ],
      [
        "cost",
        "\r\n"
      ],
      [
        "av",
        "or"
      ],
      [
        "` to ",
        "`"
      ],
      [
        "spac",
        "es "
      ],
      [
        "values",
        "("
      ],
      [
        "trans",
        "action"
      ],
      [
        "time complexity ",
        "is "
      ],
      [
        "power ",
        "of "
      ],
      [
        "peo",
        "ple"
      ],
      [
        "edges = [",
        "[0,"
      ],
      [
        "spe",
        "ed "
      ],
      [
        "Here is the ",
        "implement"
      ],
      [
        "GC",
        "D "
      ],
      [
        "Here's a ",
        "step-by-step "
      ],
      [
        "1",
        "3,"
      ],
      [
        "1",
        "  # "
      ],
      [
        "B",
        "B"
      ],
      [
        "t ",
        "= ["
      ],
      [
        "= ",
        "1\r\n"
      ],
      [
        "= ",
        "deque"
      ],
      [
        "or",
        "d "
      ],
      [
        "or",
        "y "
      ],
      [
        "le",
        "ct "
      ],
      [
        "            ",
        "self."
      ],
      [
        "or ",
        "not "
      ],
      [
        "an ",
        "adjacency "
      ],
      [
        "it",
        "y.\r\n"
      ],
      [
        "str",
        "("
      ],
      [
        "ea",
        "ch"
      ],
      [
        "x ",
        "- "
      ],
      [
        "ver",
        "tical "
      ],
      [
        "with ",
        "cost "
      ],
      [
        "tim",
        "e\r\n"
      ],
      [
        "which ",
        "is the "
      ],
      [
        "character",
        "\r\n"
      ],
      [
        "binary ",
        "string "
      ],
      [
        "min_",
        "heap"
      ],
      [
        "        def ",
        "is_"
      ],
      [
        "s(self, ",
        "s: str"
      ],
      [
        "path",
        "s "
      ],
      [
        "0],[",
        "0,"
      ],
      [
        "consider",
        "ing "
      ],
      [
        ". S",
        "ince "
      ],
      [
        "go",
        "al"
      ],
      [
        "acc",
        "umul"
      ],
      [
        "desc",
        "rib"
      ],
      [
        "ect",
        "ed "
      ],
      [
        "overl",
        "apping "
      ],
      [
        "(self, s: str",
        ", "
      ],
      [
        "-",
        "3,"
      ],
      [
        "A",
        "s "
      ],
      [
        "H",
        "el"
      ],
      [
        "l",
        ", "
      ],
      [
        "s",
        ")"
      ],
      [
        "a ",
        "new "
      ],
      [
        "] ",
        "is "
      ],
      [
        "in ",
        "graph["
      ],
      [
        "at ",
        "time "
      ],
      [
        "m ",
        "and "
      ],
      [
        "2 ",
        "("
      ],
      [
        "\",\"",
        "c"
      ],
      [
        "vi",
        "ew"
      ],
      [
        "(self, ",
        "grid"
      ],
      [
        "sum",
        ".\r\n"
      ],
      [
        "so ",
        "the "
      ],
      [
        "sequen",
        "ces "
      ],
      [
        "Output: [",
        "0,"
      ],
      [
        "dire",
        "ct"
      ],
      [
        "pi",
        "le "
      ],
      [
        "mid",
        "\r\n"
      ],
      [
        "corre",
        "ctly "
      ],
      [
        "Return ",
        "an array "
      ],
      [
        "candi",
        "es"
      ],
      [
        "do ",
        "the "
      ],
      [
        "unti",
        "l the "
      ],
      [
        "dictionary ",
        "to "
      ],
      [
        "top",
        "-"
      ],
      [
        "red",
        "und"
      ],
      [
        "addition",
        "al "
      ],
      [
        "explore ",
        "all possible "
      ],
      [
        "due ",
        "to the "
      ],
      [
        "2",
        "6"
      ],
      [
        "[",
        "u"
      ],
      [
        "a",
        "k"
      ],
      [
        "a",
        "\", "
      ],
      [
        "f",
        "l"
      ],
      [
        "The ",
        "input "
      ],
      [
        "plan",
        ":\r\n"
      ],
      [
        "        # ",
        "If the "
      ],
      [
        "be",
        "fore"
      ],
      [
        "col",
        "li"
      ],
      [
        "point",
        "ers "
      ],
      [
        "em",
        "ent "
      ],
      [
        "is a ",
        "valid "
      ],
      [
        "Output: [",
        "]\r\n"
      ],
      [
        "target",
        ":\r\n"
      ],
      [
        "order ",
        "traversal "
      ],
      [
        "find",
        "_"
      ],
      [
        "frequen",
        "cy"
      ],
      [
        "3,4",
        "], "
      ],
      [
        "3],[",
        "1,"
      ],
      [
        ", so ",
        "the "
      ],
      [
        "parti",
        "tion "
      ],
      [
        "over ",
        "all possible "
      ],
      [
        "product ",
        "of "
      ],
      [
        "maxim",
        "iz"
      ],
      [
        "        # S",
        "ort "
      ],
      [
        "shif",
        "t "
      ],
      [
        "overl",
        "ap"
      ],
      [
        "ima",
        "ge "
      ],
      [
        "blu",
        "e "
      ],
      [
        "beaut",
        "y "
      ],
      [
        "jk",
        "stra"
      ],
      [
        "defaultdict(int",
        ")\r\n"
      ],
      [
        "redund",
        "ant "
      ],
      [
        "1",
        "])\r\n"
      ],
      [
        "3",
        ")"
      ],
      [
        "5",
        " = "
      ],
      [
        "[",
        "0,0,"
      ],
      [
        "`",
        ")"
      ],
      [
        "b",
        "el"
      ],
      [
        "b",
        "rac"
      ],
      [
        "w",
        "ere "
      ],
      [
        "w",
        "ater"
      ],
      [
        "th",
        ", "
      ],
      [
        "        ",
        "else:\r\n"
      ],
      [
        "er",
        ".\r\n"
      ],
      [
        "re",
        "la"
      ],
      [
        "se",
        "cre"
      ],
      [
        "and ",
        "only "
      ],
      [
        "1 ",
        "if "
      ],
      [
        "Output: ",
        "10\r\n"
      ],
      [
        "pre",
        "f"
      ],
      [
        "Explanation: ",
        "One "
      ],
      [
        "][",
        "y"
      ],
      [
        "        return ",
        "False\r\n"
      ],
      [
        "integer ",
        "arrays "
      ],
      [
        "any ",
        "other "
      ],
      [
        "you ",
        "will "
      ],
      [
        "is",
        ": "
      ],
      [
        "letter",
        "s "
      ],
      [
        "No",
        "de "
      ],
      [
        "play",
        "ers "
      ],
      [
        "pop",
        "left()\r\n"
      ],
      [
        "Sub",
        "string"
      ],
      [
        "mer",
        "g"
      ],
      [
        "' and ",
        "'"
      ],
      [
        "avail",
        "able"
      ],
      [
        "`x",
        "` "
      ],
      [
        "This solution works by ",
        "first "
      ],
      [
        "generated ",
        "such that "
      ],
      [
        "ong",
        " the "
      ],
      [
        "inclusi",
        "ve"
      ],
      [
        "equi",
        "val"
      ],
      [
        "suit",
        "able "
      ],
      [
        "queue.",
        "popleft()\r\n"
      ],
      [
        "0",
        ") "
      ],
      [
        "3",
        ", and "
      ],
      [
        "I",
        "D"
      ],
      [
        "S",
        "o "
      ],
      [
        "c",
        " = "
      ],
      [
        "n",
        "es"
      ],
      [
        "t",
        "e "
      ],
      [
        "ro",
        "ad "
      ],
      [
        ". ",
        "You are also given "
      ],
      [
        "it",
        "y, "
      ],
      [
        "10",
        "],["
      ],
      [
        "as",
        "e the "
      ],
      [
        ". The ",
        "key "
      ],
      [
        "count",
        "er "
      ],
      [
        "sum",
        "_"
      ],
      [
        "-1",
        "]"
      ],
      [
        "start",
        "_"
      ],
      [
        "This solution ",
        "first "
      ],
      [
        "you ",
        "are "
      ],
      [
        "[i]",
        ":\r\n"
      ],
      [
        "element ",
        "of "
      ],
      [
        "ed to ",
        "be "
      ],
      [
        "differ",
        "ences "
      ],
      [
        "stac",
        "k = "
      ],
      [
        "tri",
        "b"
      ],
      [
        "Input: n = ",
        "5, "
      ],
      [
        "[1, ",
        "2, "
      ],
      [
        "For example",
        ", the "
      ],
      [
        "fli",
        "pp"
      ],
      [
        "item",
        "s("
      ],
      [
        "obta",
        "in "
      ],
      [
        "minut",
        "es"
      ],
      [
        "mer",
        "ge"
      ],
      [
        "Input: arr",
        " = ["
      ],
      [
        "roun",
        "d "
      ],
      [
        "mounta",
        "in "
      ],
      [
        "backtrack",
        "("
      ],
      [
        "1 <= m, ",
        "n <= "
      ],
      [
        "modifi",
        "ed "
      ],
      [
        "0",
        "th "
      ],
      [
        "P",
        "l"
      ],
      [
        "`",
        "target"
      ],
      [
        "m",
        "b"
      ],
      [
        "p",
        "ass "
      ],
      [
        "s",
        "on"
      ],
      [
        "v",
        " "
      ],
      [
        "            ",
        "dp"
      ],
      [
        "wh",
        "ere"
      ],
      [
        "each ",
        "other"
      ],
      [
        "not ",
        "be "
      ],
      [
        "imp",
        "lement "
      ],
      [
        "ers ",
        "of "
      ],
      [
        "is the ",
        "sum of the "
      ],
      [
        "s and ",
        "the "
      ],
      [
        "list ",
        "and "
      ],
      [
        "list",
        ", "
      ],
      [
        "1,1,",
        "1,1,"
      ],
      [
        "lin",
        "ear"
      ],
      [
        "group",
        "s "
      ],
      [
        "is not ",
        "a "
      ],
      [
        "fli",
        "p "
      ],
      [
        "contains ",
        "only "
      ],
      [
        "fact",
        "or "
      ],
      [
        ") for ",
        "_ in range("
      ],
      [
        "compon",
        "ent "
      ],
      [
        "queue ",
        "= deque"
      ],
      [
        "delet",
        "ing "
      ],
      [
        "possible",
        ".\r\n"
      ],
      [
        "Com",
        "p"
      ],
      [
        "Bu",
        "il"
      ],
      [
        "bloc",
        "k "
      ],
      [
        "arith",
        "me"
      ],
      [
        "(",
        "3, "
      ],
      [
        "4",
        "]]\r\n"
      ],
      [
        "G",
        "ra"
      ],
      [
        "N",
        "ow"
      ],
      [
        "[",
        "k"
      ],
      [
        "g",
        "am"
      ],
      [
        "n",
        "ame "
      ],
      [
        "o",
        "red "
      ],
      [
        "ar",
        "range"
      ],
      [
        "or",
        "y"
      ],
      [
        "is ",
        "found"
      ],
      [
        "ma",
        "z"
      ],
      [
        "si",
        "tion"
      ],
      [
        "1 ",
        "or "
      ],
      [
        "if ",
        "they "
      ],
      [
        "k ",
        "+ 1"
      ],
      [
        "sub",
        "tree"
      ],
      [
        "node",
        "):\r\n"
      ],
      [
        "node",
        "s are "
      ],
      [
        "possib",
        "ly "
      ],
      [
        "up",
        " the "
      ],
      [
        "index",
        ".\r\n"
      ],
      [
        "from the ",
        "`"
      ],
      [
        "left ",
        "+ "
      ],
      [
        "list ",
        "is "
      ],
      [
        "A ",
        "subarray "
      ],
      [
        "s[i] ",
        "== "
      ],
      [
        "fre",
        "quent "
      ],
      [
        "remov",
        "ed "
      ],
      [
        "following ",
        "condition"
      ],
      [
        "minimum number of ",
        "operations "
      ],
      [
        "speci",
        "al"
      ],
      [
        "Bo",
        "th "
      ],
      [
        "rece",
        "iv"
      ],
      [
        "rela",
        "tive "
      ],
      [
        "2",
        "4"
      ],
      [
        "A",
        "s"
      ],
      [
        "d",
        "d"
      ],
      [
        "f",
        "lower"
      ],
      [
        "s ",
        "for each "
      ],
      [
        "= ",
        "max("
      ],
      [
        "en",
        "em"
      ],
      [
        "al",
        "iz"
      ],
      [
        ". ",
        "After "
      ],
      [
        "at",
        "ch"
      ],
      [
        "ma",
        "il"
      ],
      [
        "                ",
        "elif "
      ],
      [
        "Input: ",
        "head = ["
      ],
      [
        "k ",
        "== "
      ],
      [
        "from ",
        "functo"
      ],
      [
        "2 ",
        "* 10"
      ],
      [
        "import ",
        "heapq"
      ],
      [
        "\" ",
        "are "
      ],
      [
        "cre",
        "ate a "
      ],
      [
        "left ",
        "+= 1\r\n"
      ],
      [
        "efficient",
        "ly"
      ],
      [
        "substring ",
        "of "
      ],
      [
        "Ali",
        "ce"
      ],
      [
        "frequen",
        "ci"
      ],
      [
        "upd",
        "ate "
      ],
      [
        "up ",
        "to the "
      ],
      [
        "stru",
        "c"
      ],
      [
        "10,",
        "10,"
      ],
      [
        "dp[",
        "n"
      ],
      [
        "it is ",
        "possible to "
      ],
      [
        "frequency ",
        "of "
      ],
      [
        "permut",
        "ation "
      ],
      [
        "happ",
        "ines"
      ],
      [
        "upper",
        "case "
      ],
      [
        "ques",
        "tion"
      ],
      [
        "Buil",
        "d the "
      ],
      [
        "from functo",
        "ols import "
      ],
      [
        "import heapq",
        "\r\n"
      ],
      [
        "5",
        "]]\r\n"
      ],
      [
        "C",
        "our"
      ],
      [
        "R",
        "ow"
      ],
      [
        "]",
        "))  # "
      ],
      [
        "e",
        "ff"
      ],
      [
        "k",
        "):\r\n"
      ],
      [
        "s",
        ").\r\n"
      ],
      [
        "s",
        "ince the "
      ],
      [
        "v",
        "e.\r\n"
      ],
      [
        "en",
        "code"
      ],
      [
        "st",
        "oc"
      ],
      [
        "de",
        "vi"
      ],
      [
        ". ",
        "You can "
      ],
      [
        "a ",
        "and "
      ],
      [
        ") ",
        "/ "
      ],
      [
        "po",
        "st"
      ],
      [
        "ord",
        "('a"
      ],
      [
        "x ",
        "is "
      ],
      [
        "mo",
        "dif"
      ],
      [
        "i ",
        "+ 1"
      ],
      [
        "s = [",
        "\""
      ],
      [
        ". The ",
        "function "
      ],
      [
        "pres",
        "ent"
      ],
      [
        "app",
        "end "
      ],
      [
        "3 ",
        "* "
      ],
      [
        "5,",
        "2,"
      ],
      [
        "can",
        "'t "
      ],
      [
        "Return the ",
        "maximum number of "
      ],
      [
        "calcul",
        "ated "
      ],
      [
        "an integer ",
        "k.\r\n"
      ],
      [
        "values ",
        "of the "
      ],
      [
        "form",
        "ed by "
      ],
      [
        "Alice ",
        "can "
      ],
      [
        ", we can ",
        "use "
      ],
      [
        "\\(",
        "10^9 + 7"
      ],
      [
        "visited",
        ".add("
      ],
      [
        "List[str",
        "], "
      ],
      [
        "mainta",
        "in a "
      ],
      [
        "Optional[",
        "ListNode"
      ],
      [
        "lexicographically ",
        "smallest "
      ],
      [
        "sour",
        "ce"
      ],
      [
        "Here's the implement",
        "ation:\r\n"
      ],
      [
        "horizont",
        "al "
      ],
      [
        "However",
        ", "
      ],
      [
        "key=lambda ",
        "x: "
      ],
      [
        "(",
        "BFS"
      ],
      [
        "0",
        ": "
      ],
      [
        "7",
        " + "
      ],
      [
        "9",
        "]\r\n"
      ],
      [
        "F",
        "ri"
      ],
      [
        "S",
        "core"
      ],
      [
        "`",
        "s` "
      ],
      [
        "d",
        "ro"
      ],
      [
        "f",
        "oo"
      ],
      [
        "h",
        "att"
      ],
      [
        "p",
        "y"
      ],
      [
        "x",
        "-"
      ],
      [
        "se",
        "s the "
      ],
      [
        "n ",
        "+ 1"
      ],
      [
        "ou",
        "b"
      ],
      [
        "Output: ",
        "3"
      ],
      [
        "lo",
        "o"
      ],
      [
        "ul",
        "ar "
      ],
      [
        "bo",
        "ok"
      ],
      [
        "to the ",
        "left "
      ],
      [
        "element",
        ".\r\n"
      ],
      [
        "        return ",
        "total_"
      ],
      [
        "is the ",
        "length of the "
      ],
      [
        "point",
        "s"
      ],
      [
        "node ",
        "in the "
      ],
      [
        "wor",
        "k "
      ],
      [
        "            return ",
        "True\r\n"
      ],
      [
        "k = ",
        "1\r\n"
      ],
      [
        "fun",
        "ction"
      ],
      [
        "divi",
        "de "
      ],
      [
        "tru",
        "e.\r\n"
      ],
      [
        "`nums",
        "1"
      ],
      [
        "] == ",
        "0:\r\n"
      ],
      [
        "[1",
        "]["
      ],
      [
        "swap",
        "s "
      ],
      [
        "keep",
        "ing "
      ],
      [
        "modulo ",
        "\\(10^9 + 7"
      ],
      [
        "sk",
        "ill"
      ],
      [
        "len(nums",
        ")):\r\n"
      ],
      [
        "capac",
        "ity "
      ],
      [
        "from",
        "_"
      ],
      [
        "gic",
        "al "
      ],
      [
        "bottom-",
        "right "
      ],
      [
        "It can be prov",
        "en that "
      ],
      [
        "1",
        "1 "
      ],
      [
        "1",
        "5\r\n"
      ],
      [
        "6",
        " = "
      ],
      [
        "c",
        ", "
      ],
      [
        "e",
        "-"
      ],
      [
        "        ",
        "@"
      ],
      [
        "en",
        "ough "
      ],
      [
        "is ",
        "even"
      ],
      [
        "ri",
        "d"
      ],
      [
        "ed ",
        "with "
      ],
      [
        "ed ",
        "as the "
      ],
      [
        "                ",
        "while "
      ],
      [
        "val",
        ")\r\n"
      ],
      [
        "as",
        "h"
      ],
      [
        "in the ",
        "array "
      ],
      [
        "Explanation: ",
        "You can "
      ],
      [
        "bo",
        "th the "
      ],
      [
        "                    ",
        "queue.append("
      ],
      [
        "word",
        "s, "
      ],
      [
        "tra",
        "vel "
      ],
      [
        "**: ",
        "This "
      ],
      [
        "equ",
        "ation"
      ],
      [
        "[i]",
        "` "
      ],
      [
        "current_",
        "sum "
      ],
      [
        "ev",
        "ent "
      ],
      [
        "You are given ",
        "an integer "
      ],
      [
        "Input: n = ",
        "4, "
      ],
      [
        "longe",
        "st"
      ],
      [
        "ensur",
        "e "
      ],
      [
        "minim",
        "ize the "
      ],
      [
        "De",
        "termin"
      ],
      [
        "repe",
        "ating "
      ],
      [
        "equal",
        "s "
      ],
      [
        "True",
        ")\r\n"
      ],
      [
        "obstac",
        "le"
      ],
      [
        "This solution uses dynamic programming ",
        "to "
      ],
      [
        "show",
        "s the "
      ],
      [
        ". If no ",
        "such "
      ],
      [
        "] indicates ",
        "that "
      ],
      [
        ".",
        "is"
      ],
      [
        "c",
        "up"
      ],
      [
        "d",
        "a"
      ],
      [
        "l",
        "y, "
      ],
      [
        "q",
        " "
      ],
      [
        "}",
        " "
      ],
      [
        "in",
        "put"
      ],
      [
        "re",
        "mo"
      ],
      [
        "st",
        "ation"
      ],
      [
        "un",
        "ction "
      ],
      [
        "[i",
        "].\r\n"
      ],
      [
        "of the ",
        "two "
      ],
      [
        "2 ",
        "are "
      ],
      [
        "ver",
        "te"
      ],
      [
        "be",
        "low"
      ],
      [
        "to",
        "ge"
      ],
      [
        "point",
        "er"
      ],
      [
        "list ",
        "to "
      ],
      [
        "Output: [",
        "2,"
      ],
      [
        "1,2,",
        "3,"
      ],
      [
        "ear",
        "li"
      ],
      [
        "do",
        "es"
      ],
      [
        "   - ",
        "For each "
      ],
      [
        "sum of ",
        "all "
      ],
      [
        "_count",
        "\r\n"
      ],
      [
        ". This ",
        "is "
      ],
      [
        "1]",
        "], "
      ],
      [
        "less ",
        "than the "
      ],
      [
        "determin",
        "e if "
      ],
      [
        "        while ",
        "left "
      ],
      [
        "s` ",
        "function "
      ],
      [
        "match",
        "es "
      ],
      [
        "1 <= nums",
        ".length <= "
      ],
      [
        ", so ",
        "we return "
      ],
      [
        "from collections import ",
        "deque\r\n"
      ],
      [
        "brea",
        "k"
      ],
      [
        "maxim",
        "ize the "
      ],
      [
        "        # F",
        "unction "
      ],
      [
        "bitwise ",
        "AND "
      ],
      [
        "ous",
        "ly "
      ],
      [
        "in any ",
        "order.\r\n"
      ],
      [
        "depth-first search (DFS",
        ") "
      ],
      [
        "T",
        "y"
      ],
      [
        "p",
        "iv"
      ],
      [
        "s",
        "ame"
      ],
      [
        "= ",
        "2\r\n"
      ],
      [
        "al",
        "C"
      ],
      [
        "ra",
        "di"
      ],
      [
        "                ",
        "min_"
      ],
      [
        "                ",
        "continue\r\n"
      ],
      [
        "max",
        " "
      ],
      [
        "Output: ",
        "8\r\n"
      ],
      [
        "k ",
        "and "
      ],
      [
        "k ",
        "in range("
      ],
      [
        "in the ",
        "`"
      ],
      [
        "number of ",
        "valid "
      ],
      [
        "                    ",
        "max_"
      ],
      [
        "element",
        ", "
      ],
      [
        "len(",
        "word"
      ],
      [
        "with",
        "in a "
      ],
      [
        "on ",
        "day "
      ],
      [
        "operation",
        "s to "
      ],
      [
        "[i]",
        ")\r\n"
      ],
      [
        "elements ",
        "are "
      ],
      [
        "A ",
        "and "
      ],
      [
        "smalle",
        "st"
      ],
      [
        "start ",
        "and "
      ],
      [
        "There are ",
        "n "
      ],
      [
        "reach",
        "able "
      ],
      [
        "find ",
        "a "
      ],
      [
        "            for j in range(",
        "n):\r\n"
      ],
      [
        "split ",
        "the "
      ],
      [
        "task ",
        "is to "
      ],
      [
        "bitwise ",
        "OR "
      ],
      [
        "                    return ",
        "False\r\n"
      ],
      [
        "occurrence ",
        "of "
      ],
      [
        "s(self, nums",
        ": List[int]) -> int:\r\n"
      ],
      [
        "Follow up",
        ": "
      ],
      [
        "'",
        "A"
      ],
      [
        ".",
        "e. "
      ],
      [
        "4",
        ": "
      ],
      [
        "D",
        "ec"
      ],
      [
        "G",
        "ener"
      ],
      [
        "O",
        "n the "
      ],
      [
        " ",
        "\\r\r\n"
      ],
      [
        "        ",
        "left, right = "
      ],
      [
        "ing",
        "\r\n"
      ],
      [
        "Th",
        "erefore"
      ],
      [
        "ation",
        "\r\n"
      ],
      [
        ") ",
        "<= "
      ],
      [
        "In",
        "di"
      ],
      [
        "val",
        ", "
      ],
      [
        "as",
        "sum"
      ],
      [
        "Output: ",
        "9\r\n"
      ],
      [
        "in the ",
        "first "
      ],
      [
        "ab",
        "ility "
      ],
      [
        "0 ",
        "- "
      ],
      [
        ". The ",
        "solution "
      ],
      [
        "ta",
        "g"
      ],
      [
        "t = ",
        "\""
      ],
      [
        "            # ",
        "Add the "
      ],
      [
        "length",
        ".\r\n"
      ],
      [
        "where ",
        "`"
      ],
      [
        "s to ",
        "be "
      ],
      [
        "character",
        "s in the "
      ],
      [
        "with the ",
        "current "
      ],
      [
        "        for i in range(",
        "len("
      ],
      [
        "proces",
        "sed "
      ],
      [
        ", return ",
        "-1.\r\n"
      ],
      [
        "high",
        "er "
      ],
      [
        "hou",
        "ses "
      ],
      [
        "consider",
        "ing the "
      ],
      [
        "check ",
        "if the "
      ],
      [
        "cat",
        "eg"
      ],
      [
        ". Th",
        "erefore"
      ],
      [
        "None",
        ":\r\n"
      ],
      [
        "amoun",
        "t "
      ],
      [
        "perform",
        "ing "
      ],
      [
        "cir",
        "cle"
      ],
      [
        "th-",
        "First "
      ],
      [
        "inser",
        "t"
      ],
      [
        "Se",
        "con"
      ],
      [
        "accord",
        "ing to the "
      ],
      [
        "node.right",
        ")\r\n"
      ],
      [
        "        # Count the ",
        "frequency of each "
      ],
      [
        ")",
        "  # "
      ],
      [
        "6",
        "6"
      ],
      [
        "6",
        " + "
      ],
      [
        "=",
        " "
      ],
      [
        "c",
        "ar "
      ],
      [
        "n",
        "ea"
      ],
      [
        "r",
        " = "
      ],
      [
        "        ",
        "nums"
      ],
      [
        "n ",
        "// "
      ],
      [
        "+ ",
        "nums["
      ],
      [
        "10",
        "]\r\n"
      ],
      [
        "array ",
        "of "
      ],
      [
        "we ",
        "cannot "
      ],
      [
        "Explanation: ",
        "In this "
      ],
      [
        "node",
        "s.\r\n"
      ],
      [
        "You ",
        "may "
      ],
      [
        "sum",
        "\r\n"
      ],
      [
        "is the ",
        "same "
      ],
      [
        "        for ",
        "char in "
      ],
      [
        "row",
        "\r\n"
      ],
      [
        "' ",
        "is "
      ],
      [
        "k = ",
        "3\r\n"
      ],
      [
        "4 ",
        "<= "
      ],
      [
        "s: ",
        "List[str]"
      ],
      [
        "2 = ",
        "\""
      ],
      [
        "lon",
        "ger "
      ],
      [
        "edge",
        "s:\r\n"
      ],
      [
        "0],[",
        "0,0,"
      ],
      [
        "On",
        "ly "
      ],
      [
        "sele",
        "ct"
      ],
      [
        "get",
        "_"
      ],
      [
        "indic",
        "ating "
      ],
      [
        "Given the ",
        "constraint"
      ],
      [
        "destin",
        "ation "
      ],
      [
        "dp[i][j",
        "] = "
      ],
      [
        "provi",
        "ded "
      ],
      [
        "\", and ",
        "\""
      ],
      [
        "runn",
        "ing "
      ],
      [
        "decim",
        "al "
      ],
      [
        "itera",
        "tively "
      ],
      [
        "acce",
        "pt"
      ],
      [
        "redundant ",
        "calculation"
      ],
      [
        "'",
        "z"
      ],
      [
        "(",
        "n - "
      ],
      [
        "-",
        "2, "
      ],
      [
        "1",
        ". The "
      ],
      [
        "L",
        "ef"
      ],
      [
        "[",
        "char"
      ],
      [
        "[",
        "4, "
      ],
      [
        "a",
        "x"
      ],
      [
        "d",
        "ol"
      ],
      [
        "t",
        ".\r\n"
      ],
      [
        "st",
        "op "
      ],
      [
        "ing",
        ":\r\n"
      ],
      [
        ") ",
        "> "
      ],
      [
        "nums",
        "[i]\r\n"
      ],
      [
        "lo",
        "ok"
      ],
      [
        "we ",
        "are "
      ],
      [
        "per",
        "form a "
      ],
      [
        "valu",
        "es.\r\n"
      ],
      [
        "4,",
        "2,"
      ],
      [
        "operation",
        "s:\r\n"
      ],
      [
        "hea",
        "d\r\n"
      ],
      [
        "such ",
        "that:\r\n"
      ],
      [
        "                # ",
        "If "
      ],
      [
        "pi",
        "e"
      ],
      [
        "                return ",
        "True\r\n"
      ],
      [
        ". We ",
        "can "
      ],
      [
        "s.",
        "sort()\r\n"
      ],
      [
        "equal",
        ".\r\n"
      ],
      [
        "above ",
        "approach:\r\n"
      ],
      [
        "reverse",
        "="
      ],
      [
        "len(nums",
        ") - "
      ],
      [
        "* n ",
        "for _ in range("
      ],
      [
        "pix",
        "el"
      ],
      [
        "th-First ",
        "Search "
      ],
      [
        "'",
        "ll "
      ],
      [
        "(",
        "0-indexed"
      ],
      [
        "B",
        "e"
      ],
      [
        "I",
        "I"
      ],
      [
        "N",
        "ow "
      ],
      [
        "[",
        "6,"
      ],
      [
        "`",
        ").\r\n"
      ],
      [
        "c",
        "k "
      ],
      [
        "d",
        "on"
      ],
      [
        "o",
        "per"
      ],
      [
        "p",
        "en"
      ],
      [
        "s",
        "**: For each "
      ],
      [
        "t",
        "ane"
      ],
      [
        "w",
        "are"
      ],
      [
        "        ",
        "graph"
      ],
      [
        "in",
        "si"
      ],
      [
        "st",
        "ored "
      ],
      [
        "to ",
        "avoid "
      ],
      [
        "pl",
        "it "
      ],
      [
        "            ",
        "mid = ("
      ],
      [
        "                ",
        "        if "
      ],
      [
        "The ",
        "first "
      ],
      [
        "we ",
        "need to "
      ],
      [
        "bo",
        "un"
      ],
      [
        "][",
        "k"
      ],
      [
        "maximum ",
        "score "
      ],
      [
        "position",
        "\r\n"
      ],
      [
        "grid",
        "[0])\r\n"
      ],
      [
        "0 <= ",
        "Node.val "
      ],
      [
        "pri",
        "ority "
      ],
      [
        "cost ",
        "= "
      ],
      [
        "7,",
        "7,"
      ],
      [
        "path ",
        "from "
      ],
      [
        "most ",
        "frequent "
      ],
      [
        "Input: s = ",
        "\"abc"
      ],
      [
        "is not ",
        "possible to "
      ],
      [
        "add",
        "res"
      ],
      [
        "        n = len(",
        "s)\r\n"
      ],
      [
        "gu",
        "es"
      ],
      [
        "choo",
        "sing "
      ],
      [
        ". S",
        "ince the "
      ],
      [
        "gener",
        "ate "
      ],
      [
        "Given the ",
        "root of a "
      ],
      [
        "window",
        "\r\n"
      ],
      [
        "sim",
        "ilar"
      ],
      [
        "m == ",
        "grid"
      ],
      [
        "two",
        "-"
      ],
      [
        "proper",
        "ties "
      ],
      [
        "Union",
        "-"
      ],
      [
        "four",
        "th "
      ],
      [
        "struc",
        "ture "
      ],
      [
        "pie",
        "ce "
      ],
      [
        "0",
        "]"
      ],
      [
        "6",
        "], "
      ],
      [
        "H",
        "eigh"
      ],
      [
        "M",
        "an"
      ],
      [
        "`",
        "Counter"
      ],
      [
        "f",
        "ra"
      ],
      [
        "p",
        "ec"
      ],
      [
        "r",
        " + "
      ],
      [
        "s",
        "low"
      ],
      [
        "s",
        ". If "
      ],
      [
        "t",
        "est "
      ],
      [
        "u",
        "i, "
      ],
      [
        "w",
        "ant"
      ],
      [
        "x",
        ".\r\n"
      ],
      [
        "re",
        "e "
      ],
      [
        "er ",
        "of "
      ],
      [
        "at",
        "ure"
      ],
      [
        "su",
        "c"
      ],
      [
        ") ",
        "in "
      ],
      [
        "pro",
        "j"
      ],
      [
        "ver",
        "se "
      ],
      [
        "0 ",
        "else "
      ],
      [
        "for",
        "ce "
      ],
      [
        "with ",
        "memoization "
      ],
      [
        "char",
        "_"
      ],
      [
        "\",\"",
        "0"
      ],
      [
        "count",
        "ed "
      ],
      [
        ", and ",
        "then "
      ],
      [
        "-1",
        "` "
      ],
      [
        "5,",
        "3,"
      ],
      [
        "This solution ",
        "calculates the "
      ],
      [
        "s[",
        "left"
      ],
      [
        "calcul",
        "ating the "
      ],
      [
        ", it ",
        "is "
      ],
      [
        "values ",
        "in the "
      ],
      [
        "edge",
        "s[i] = ["
      ],
      [
        "2],[",
        "0,"
      ],
      [
        "corre",
        "ct"
      ],
      [
        "la",
        "st"
      ],
      [
        "s.",
        "add("
      ],
      [
        "work",
        "ers "
      ],
      [
        "optim",
        "iz"
      ],
      [
        "mid ",
        "+ 1\r\n"
      ],
      [
        "[x",
        "][y"
      ],
      [
        "\" -> ",
        "\""
      ],
      [
        "ima",
        "ge"
      ],
      [
        "whe",
        "ther "
      ],
      [
        "ai, ",
        "bi"
      ],
      [
        "tex",
        "t "
      ],
      [
        "pass",
        "eng"
      ],
      [
        "        # Function ",
        "to "
      ],
      [
        "Union-",
        "Find "
      ],
      [
        "(",
        "r, c"
      ],
      [
        "2",
        ". The "
      ],
      [
        "2",
        "), "
      ],
      [
        "9",
        "], "
      ],
      [
        "b",
        "atter"
      ],
      [
        "p",
        " = "
      ],
      [
        "s",
        "ing the "
      ],
      [
        "s",
        ".length == "
      ],
      [
        "an",
        "ge "
      ],
      [
        "num",
        " + "
      ],
      [
        "to ",
        "reach "
      ],
      [
        "di",
        "men"
      ],
      [
        "es ",
        "and "
      ],
      [
        "of the ",
        "first "
      ],
      [
        "wh",
        "en the "
      ],
      [
        "` ",
        "that "
      ],
      [
        "length ",
        "= 0\r\n"
      ],
      [
        "array ",
        "to "
      ],
      [
        "com",
        "pa"
      ],
      [
        "Explanation: ",
        "There is no "
      ],
      [
        "string ",
        "\""
      ],
      [
        "given ",
        "constraints.\r\n"
      ],
      [
        "sum",
        ", "
      ],
      [
        "        return ",
        "''.join("
      ],
      [
        "all",
        "y.\r\n"
      ],
      [
        "            if ",
        "i "
      ],
      [
        "nums[",
        "right"
      ],
      [
        "with the ",
        "smallest "
      ],
      [
        "tru",
        "e "
      ],
      [
        "   - ",
        "`"
      ],
      [
        "_sum",
        "\r\n"
      ],
      [
        ". It ",
        "can be "
      ],
      [
        "edge",
        "s.\r\n"
      ],
      [
        "foun",
        "d.\r\n"
      ],
      [
        "1 + ",
        "2 + "
      ],
      [
        "subsequence ",
        "is "
      ],
      [
        "consider",
        " the "
      ],
      [
        "visited",
        ":\r\n"
      ],
      [
        "1 <= s",
        ".length <= 105\r\n"
      ],
      [
        "has",
        "_"
      ],
      [
        "bound",
        "ary "
      ],
      [
        "Pro",
        "cess "
      ],
      [
        "duplic",
        "ate "
      ],
      [
        "dow",
        "n"
      ],
      [
        "vari",
        "able "
      ],
      [
        "0,0,0,0,0,0,0,0,",
        "0,0,0,0,0,0,0,0,"
      ],
      [
        "ho",
        "me"
      ],
      [
        "making ",
        "it "
      ],
      [
        "an un",
        "directed "
      ],
      [
        "enco",
        "ded "
      ],
      [
        "solve the problem ",
        "of "
      ],
      [
        "s: List[int]",
        ") -> int:\r\n"
      ],
      [
        "visi",
        "t "
      ],
      [
        "n == grid",
        "[i].length\r\n"
      ],
      [
        "circul",
        "ar "
      ],
      [
        "space complex",
        "ity "
      ],
      [
        "arithme",
        "tic "
      ],
      [
        "verte",
        "x "
      ],
      [
        "pec",
        "i"
      ],
      [
        "\"",
        ": "
      ],
      [
        "(",
        "\""
      ],
      [
        "2",
        ").\r\n"
      ],
      [
        "2",
        ") = "
      ],
      [
        "S",
        "li"
      ],
      [
        "[",
        "2"
      ],
      [
        "`",
        ". If "
      ],
      [
        "e",
        "at "
      ],
      [
        "f",
        "ur"
      ],
      [
        "f",
        "ea"
      ],
      [
        "n",
        "'t "
      ],
      [
        "p",
        "e "
      ],
      [
        "s",
        "2 "
      ],
      [
        "s",
        "1 = "
      ],
      [
        "y ",
        "< "
      ],
      [
        "                ",
        "return\r\n"
      ],
      [
        " = ",
        "defaultdict(list)\r\n"
      ],
      [
        "10",
        "0000"
      ],
      [
        "1, ",
        "y"
      ],
      [
        "all ",
        "other "
      ],
      [
        "two ",
        "adjacent "
      ],
      [
        "is the ",
        "smallest "
      ],
      [
        "0, ",
        "1, "
      ],
      [
        "            # ",
        "Find the "
      ],
      [
        "time ",
        "= "
      ],
      [
        "represent",
        "ing "
      ],
      [
        ", it ",
        "returns "
      ],
      [
        "s. ",
        "This "
      ],
      [
        "target",
        "\r\n"
      ],
      [
        "numbers ",
        "are "
      ],
      [
        "colle",
        "ct"
      ],
      [
        "difference ",
        "is "
      ],
      [
        "answer",
        ".\r\n"
      ],
      [
        "        while ",
        "queue:\r\n"
      ],
      [
        "ni",
        "fi"
      ],
      [
        "`, ",
        "which "
      ],
      [
        "hand",
        "le the "
      ],
      [
        "- 1",
        ")\r\n"
      ],
      [
        "befor",
        "e the "
      ],
      [
        "1 <= nums[i] ",
        "<= 109\r\n"
      ],
      [
        "23",
        "1 - "
      ],
      [
        "linked ",
        "list.\r\n"
      ],
      [
        "distinct",
        ".\r\n"
      ],
      [
        "        # Check ",
        "if "
      ],
      [
        "could ",
        "be "
      ],
      [
        "            if not ",
        "node:\r\n"
      ],
      [
        "simul",
        "tane"
      ],
      [
        "mounta",
        "in"
      ],
      [
        "hash",
        " "
      ],
      [
        "Fro",
        "m "
      ],
      [
        "Sw",
        "ap "
      ],
      [
        "buc",
        "ket"
      ],
      [
        "triple",
        "t "
      ],
      [
        "clock",
        "wise "
      ],
      [
        "encode",
        "d"
      ],
      [
        "dimen",
        "sion"
      ],
      [
        "1",
        "'"
      ],
      [
        "D",
        "ep"
      ],
      [
        "P",
        "ic"
      ],
      [
        "b",
        "\r\n"
      ],
      [
        "d",
        "c"
      ],
      [
        "h",
        "ere "
      ],
      [
        "j",
        "th "
      ],
      [
        "l",
        "u"
      ],
      [
        "s ",
        "can be "
      ],
      [
        "st",
        "and"
      ],
      [
        "of ",
        "them "
      ],
      [
        "to ",
        "each "
      ],
      [
        "] ",
        "+= "
      ],
      [
        "                ",
        "left = "
      ],
      [
        "                ",
        "i += 1\r\n"
      ],
      [
        "nums",
        "[i - "
      ],
      [
        "po",
        "s "
      ],
      [
        "10",
        " + "
      ],
      [
        "con",
        "trib"
      ],
      [
        "        return ",
        "min_"
      ],
      [
        "bin",
        "ary"
      ],
      [
        "nums[",
        "left"
      ],
      [
        "grid",
        "), len("
      ],
      [
        "subarray",
        ".\r\n"
      ],
      [
        "sig",
        "nifi"
      ],
      [
        "n, ",
        "where "
      ],
      [
        "neighbor",
        ", "
      ],
      [
        "comm",
        "on"
      ],
      [
        "continu",
        "es "
      ],
      [
        "ful",
        "ly "
      ],
      [
        "], k = ",
        "2\r\n"
      ],
      [
        "strictly ",
        "increasing "
      ],
      [
        "exce",
        "ed"
      ],
      [
        "        for i in range(1, ",
        "n):\r\n"
      ],
      [
        "diagon",
        "al "
      ],
      [
        "32",
        "-bit "
      ],
      [
        "'b",
        "' "
      ],
      [
        "binary represent",
        "ation of "
      ],
      [
        "twi",
        "ce "
      ],
      [
        "wa",
        "it"
      ],
      [
        "fig",
        "ure "
      ],
      [
        "Fun",
        "ction"
      ],
      [
        "perform the ",
        "following "
      ],
      [
        "flow",
        "ers "
      ],
      [
        "potenti",
        "al "
      ],
      [
        "Gra",
        "ph"
      ],
      [
        "grid), len(",
        "grid[0])\r\n"
      ],
      [
        "1",
        "), ("
      ],
      [
        "B",
        "it"
      ],
      [
        "C",
        "re"
      ],
      [
        "F",
        "ind"
      ],
      [
        "J",
        "um"
      ],
      [
        "M",
        "ar"
      ],
      [
        "P",
        "ar"
      ],
      [
        "a",
        "\" "
      ],
      [
        "a",
        "ster"
      ],
      [
        "i",
        "g"
      ],
      [
        "k",
        "n"
      ],
      [
        "o",
        "min"
      ],
      [
        "r",
        "y"
      ],
      [
        "        ",
        "i = "
      ],
      [
        "s ",
        "as "
      ],
      [
        "s ",
        "all "
      ],
      [
        "an",
        "s.append("
      ],
      [
        "re",
        "c"
      ],
      [
        "st",
        "ree"
      ],
      [
        "pl",
        "us "
      ],
      [
        "di",
        "agram "
      ],
      [
        "ac",
        "ros"
      ],
      [
        "con",
        "son"
      ],
      [
        "fi",
        "le "
      ],
      [
        "x ",
        "in "
      ],
      [
        "ed",
        ". "
      ],
      [
        "2 ",
        "-> "
      ],
      [
        "by ",
        "their "
      ],
      [
        "in range(",
        "1, "
      ],
      [
        "4,",
        "4,"
      ],
      [
        "maximum ",
        "value "
      ],
      [
        "right",
        ".\r\n"
      ],
      [
        "quer",
        "y, "
      ],
      [
        "\"ab",
        "ab"
      ],
      [
        "ate",
        "_"
      ],
      [
        "at the ",
        "current "
      ],
      [
        ".length == ",
        "3\r\n"
      ],
      [
        ", return ",
        "true if "
      ],
      [
        "if",
        ":\r\n"
      ],
      [
        "match",
        "es the "
      ],
      [
        "score",
        "\r\n"
      ],
      [
        "cap",
        "it"
      ],
      [
        "sele",
        "cted "
      ],
      [
        ".\",\".\",\"",
        ".\",\""
      ],
      [
        "cent",
        "er"
      ],
      [
        "grid[",
        "r][c"
      ],
      [
        "parenthe",
        "ses "
      ],
      [
        "consists only of ",
        "lowercase English letters.\r\n"
      ],
      [
        "(self, root: Optional[TreeNode",
        "]"
      ],
      [
        "Here is the implement",
        "ation of the "
      ],
      [
        "The input ",
        "is "
      ],
      [
        "jkstra",
        "'s "
      ],
      [
        "'",
        "*"
      ],
      [
        "'",
        ": "
      ],
      [
        "2",
        "^"
      ],
      [
        "4",
        "]"
      ],
      [
        ">",
        "> "
      ],
      [
        "E",
        "v"
      ],
      [
        "[",
        "a"
      ],
      [
        "`",
        "mid"
      ],
      [
        "e",
        "et"
      ],
      [
        "h",
        "old"
      ],
      [
        "x",
        ":\r\n"
      ],
      [
        "  ",
        "- "
      ],
      [
        "re",
        "f"
      ],
      [
        "ar",
        "y.\r\n"
      ],
      [
        "se",
        "t = "
      ],
      [
        "            ",
        "result.append("
      ],
      [
        ") ",
        "< "
      ],
      [
        "es",
        "s"
      ],
      [
        "0 ",
        "-> "
      ],
      [
        "stra",
        "teg"
      ],
      [
        "s, ",
        "we can "
      ],
      [
        ") -> ",
        "List[List[int]]:\r\n"
      ],
      [
        "    def ",
        "num"
      ],
      [
        "    def ",
        "get"
      ],
      [
        "any ",
        "of the "
      ],
      [
        "so ",
        "we return "
      ],
      [
        "you ",
        "need to "
      ],
      [
        "nums[",
        "k"
      ],
      [
        "grid",
        "[0]["
      ],
      [
        "elements ",
        "is "
      ],
      [
        "represent",
        "ed by "
      ],
      [
        "gre",
        "ater"
      ],
      [
        "s[i] ",
        "is the "
      ],
      [
        "plac",
        "e the "
      ],
      [
        "Calcul",
        "ation"
      ],
      [
        "To ",
        "solve the problem of "
      ],
      [
        "height",
        "s["
      ],
      [
        "stack",
        ".pop()\r\n"
      ],
      [
        "Here's the ",
        "complete "
      ],
      [
        "ensur",
        "e that "
      ],
      [
        ": str",
        ") -> bool:\r\n"
      ],
      [
        "valid",
        ".\r\n"
      ],
      [
        "height ",
        "of the "
      ],
      [
        "permut",
        "ation of "
      ],
      [
        "List[str",
        "]:\r\n"
      ],
      [
        "meet",
        "ing "
      ],
      [
        "cir",
        "cle "
      ],
      [
        "occurrences ",
        "of "
      ],
      [
        "lab",
        "el"
      ],
      [
        "respectivel",
        "y"
      ],
      [
        "gcd",
        "("
      ],
      [
        "is either ",
        "0 or 1.\r\n"
      ],
      [
        "wri",
        "tt"
      ],
      [
        "; ",
        "otherwise"
      ],
      [
        "modu",
        "le "
      ],
      [
        "tu",
        "ple "
      ],
      [
        "streng",
        "th "
      ],
      [
        "Now",
        ", "
      ],
      [
        "eff",
        "ec"
      ],
      [
        ".",
        "items("
      ],
      [
        "1",
        "5 "
      ],
      [
        "3",
        "0"
      ],
      [
        "3",
        "] = "
      ],
      [
        "L",
        "im"
      ],
      [
        "[",
        "3] "
      ],
      [
        "`",
        "count"
      ],
      [
        "    ",
        " - "
      ],
      [
        "an",
        "ti"
      ],
      [
        "st",
        "ed "
      ],
      [
        "an ",
        "array.\r\n"
      ],
      [
        "1 ",
        "== "
      ],
      [
        "                ",
        "total_"
      ],
      [
        "                ",
        "right = "
      ],
      [
        "ution",
        " "
      ],
      [
        "1 <= ",
        "words"
      ],
      [
        "tra",
        "vel"
      ],
      [
        "-1",
        ")"
      ],
      [
        "row",
        " in "
      ],
      [
        "to",
        "o "
      ],
      [
        "is",
        "land "
      ],
      [
        "calcul",
        "ate "
      ],
      [
        "nums[i] ",
        "- "
      ],
      [
        "pu",
        "sh "
      ],
      [
        "        if ",
        "len("
      ],
      [
        "at the ",
        "same "
      ],
      [
        "**: We ",
        "use a "
      ],
      [
        "`nums",
        "`"
      ],
      [
        "ga",
        "in "
      ],
      [
        "* (",
        "n - "
      ],
      [
        "        while ",
        "i < "
      ],
      [
        "Di",
        "jkstra's "
      ],
      [
        "-1, ",
        "0"
      ],
      [
        "mean",
        "s the "
      ],
      [
        "[1",
        "] = "
      ],
      [
        "group ",
        "of "
      ],
      [
        "denot",
        "ing the "
      ],
      [
        "times",
        ":\r\n"
      ],
      [
        "a, b",
        " in "
      ],
      [
        "strictly ",
        "increas"
      ],
      [
        "(self, s: str",
        ") -> int:\r\n"
      ],
      [
        "corn",
        "er"
      ],
      [
        "wid",
        "th"
      ],
      [
        "specifi",
        "c "
      ],
      [
        "dur",
        "ing the "
      ],
      [
        "giv",
        "es "
      ],
      [
        "giv",
        "es the "
      ],
      [
        "vari",
        "able"
      ],
      [
        "diff ",
        "= "
      ],
      [
        "inv",
        "ol"
      ],
      [
        "repeat",
        "ed"
      ],
      [
        "itself",
        ".\r\n"
      ],
      [
        "Prefi",
        "x "
      ],
      [
        "equival",
        "ent "
      ],
      [
        "keeping ",
        "track of the "
      ],
      [
        "Dec",
        "re"
      ],
      [
        "'",
        "B"
      ],
      [
        "4",
        "th "
      ],
      [
        "A",
        "B"
      ],
      [
        "[",
        "r][c"
      ],
      [
        "_",
        "max"
      ],
      [
        "c",
        "all "
      ],
      [
        "f",
        "avor"
      ],
      [
        "h",
        "e "
      ],
      [
        "h",
        "ol"
      ],
      [
        "e ",
        "= "
      ],
      [
        "        ",
        "total"
      ],
      [
        "        ",
        "visited "
      ],
      [
        "se",
        "d"
      ],
      [
        "The ",
        "maximum "
      ],
      [
        "number ",
        "in "
      ],
      [
        "ran",
        "k "
      ],
      [
        "per",
        "f"
      ],
      [
        "s = [",
        "1,"
      ],
      [
        "s, ",
        "which "
      ],
      [
        "end",
        ", "
      ],
      [
        "-1",
        "] "
      ],
      [
        "typ",
        "es of "
      ],
      [
        "mov",
        "e, "
      ],
      [
        "minimum ",
        "possible "
      ],
      [
        "operation",
        ".\r\n"
      ],
      [
        "you ",
        "have "
      ],
      [
        "op",
        "en"
      ],
      [
        "cu",
        "t "
      ],
      [
        "order ",
        "and "
      ],
      [
        "                # ",
        "If the "
      ],
      [
        "very ",
        "large, return it modulo 109 + 7.\r\n"
      ],
      [
        ". This ",
        "approach ensures that "
      ],
      [
        "adj",
        "ust"
      ],
      [
        "rever",
        "sed "
      ],
      [
        "matrix",
        " = ["
      ],
      [
        "None",
        ")\r\n"
      ],
      [
        "multiple ",
        "of "
      ],
      [
        "binary search ",
        "to find the "
      ],
      [
        "1 <= nums[i] ",
        "<= "
      ],
      [
        "99",
        "99"
      ],
      [
        "Explanation: There are ",
        "no "
      ],
      [
        "cn",
        "t "
      ],
      [
        "redu",
        "c"
      ],
      [
        "custom",
        "er"
      ],
      [
        "sorted in ",
        "non-decreasing "
      ],
      [
        "left and right ",
        "subtre"
      ],
      [
        "cand",
        "y "
      ],
      [
        "A subarray ",
        "is a contiguous "
      ],
      [
        "da",
        "ma"
      ],
      [
        "alC",
        "ut"
      ],
      [
        "writt",
        "en "
      ],
      [
        "\"",
        "].\r\n"
      ],
      [
        "(",
        "0"
      ],
      [
        ".",
        "next = "
      ],
      [
        "1",
        "10"
      ],
      [
        "2",
        "1"
      ],
      [
        "4",
        ") "
      ],
      [
        "D",
        "ay"
      ],
      [
        "`",
        ": "
      ],
      [
        "d",
        "oub"
      ],
      [
        "j",
        "]\r\n"
      ],
      [
        "        ",
        "queue = deque"
      ],
      [
        "in",
        "valid "
      ],
      [
        "on",
        "e.\r\n"
      ],
      [
        "al",
        "k "
      ],
      [
        "num",
        "s of length "
      ],
      [
        "- ",
        "T"
      ],
      [
        "im",
        "medi"
      ],
      [
        "con",
        "st"
      ],
      [
        "= [",
        "1,"
      ],
      [
        "from ",
        "each "
      ],
      [
        "[i] ",
        "is "
      ],
      [
        "                    ",
        "for "
      ],
      [
        "word",
        ".\r\n"
      ],
      [
        "max_",
        "heap"
      ],
      [
        "5,",
        "1,"
      ],
      [
        "sort",
        "ing the "
      ],
      [
        "que",
        "en"
      ],
      [
        "1] ",
        "and "
      ],
      [
        "bu",
        "d"
      ],
      [
        "j ",
        "+= 1\r\n"
      ],
      [
        "2 = ",
        "["
      ],
      [
        "word ",
        "is "
      ],
      [
        "position ",
        "in the "
      ],
      [
        "nam",
        "e"
      ],
      [
        "3],[",
        "4,"
      ],
      [
        "inclu",
        "ding "
      ],
      [
        "2 <= ",
        "nums"
      ],
      [
        "-10",
        "9 "
      ],
      [
        "go",
        "es "
      ],
      [
        "go",
        "al "
      ],
      [
        "mon",
        "ster"
      ],
      [
        "Upd",
        "ate "
      ],
      [
        "smaller ",
        "than "
      ],
      [
        "Star",
        "ting "
      ],
      [
        "given the ",
        "constraints.\r\n"
      ],
      [
        "-1 ",
        "if "
      ],
      [
        "initializ",
        "e "
      ],
      [
        "custom",
        "er "
      ],
      [
        "sorted in ",
        "ascending "
      ],
      [
        "assign",
        "ed "
      ],
      [
        "lru_cach",
        "e("
      ],
      [
        "rank",
        "[root"
      ],
      [
        "Input: words = [",
        "\""
      ],
      [
        "        # Conver",
        "t the "
      ],
      [
        "heal",
        "th "
      ],
      [
        "excep",
        "t "
      ],
      [
        "        # Dictionary ",
        "to store the "
      ],
      [
        "unit",
        "s of "
      ],
      [
        "hatt",
        "an "
      ],
      [
        "nea",
        "rest "
      ],
      [
        "reverse=",
        "True)\r\n"
      ],
      [
        "m == grid",
        ".length\r\n"
      ],
      [
        "Graph",
        " "
      ],
      [
        "'",
        "+"
      ],
      [
        "'",
        "X"
      ],
      [
        ".",
        "values("
      ],
      [
        "2",
        "]], "
      ],
      [
        "E",
        "d"
      ],
      [
        "P",
        "u"
      ],
      [
        "[",
        "v"
      ],
      [
        "e",
        "at"
      ],
      [
        "f",
        "ron"
      ],
      [
        "l",
        "an"
      ],
      [
        "m",
        "ut"
      ],
      [
        "s",
        "[i]\r\n"
      ],
      [
        "x",
        ")\r\n"
      ],
      [
        ", ",
        "which is "
      ],
      [
        "= ",
        "set()\r\n"
      ],
      [
        "st",
        "ore"
      ],
      [
        "in ",
        "one "
      ],
      [
        "at ",
        "position "
      ],
      [
        "1 ",
        "in "
      ],
      [
        "el",
        "l "
      ],
      [
        "can ",
        "only "
      ],
      [
        "each ",
        "element "
      ],
      [
        "2 ",
        "* 104\r\n"
      ],
      [
        "1, ",
        "c"
      ],
      [
        "1 <= ",
        "queries"
      ],
      [
        "                    ",
        "current_"
      ],
      [
        "string ",
        "by "
      ],
      [
        "word",
        "s["
      ],
      [
        "    def ",
        "numberOf"
      ],
      [
        "sum",
        "s "
      ],
      [
        "        return ",
        "max("
      ],
      [
        "me",
        "et the "
      ],
      [
        "id",
        "entif"
      ],
      [
        "ffi",
        "cul"
      ],
      [
        "character",
        ".\r\n"
      ],
      [
        "s are ",
        "unique.\r\n"
      ],
      [
        "4 ",
        "* "
      ],
      [
        "Ch",
        "ar"
      ],
      [
        "6,",
        "7,"
      ],
      [
        "root",
        "\r\n"
      ],
      [
        "end ",
        "of "
      ],
      [
        "colle",
        "ct "
      ],
      [
        "make ",
        "a "
      ],
      [
        "bre",
        "ad"
      ],
      [
        "appear",
        " in "
      ],
      [
        "0-indexed ",
        "integer array "
      ],
      [
        "go",
        "ing "
      ],
      [
        "], k = ",
        "3\r\n"
      ],
      [
        "beauti",
        "ful"
      ],
      [
        "Tra",
        "verse the "
      ],
      [
        "s(self, nums",
        ": List[int], "
      ],
      [
        "= [0] ",
        "* n\r\n"
      ],
      [
        "Sw",
        "ap"
      ],
      [
        "operation, ",
        "you can "
      ],
      [
        "`j",
        "` "
      ],
      [
        "first and ",
        "last "
      ],
      [
        "messa",
        "ge "
      ],
      [
        "formul",
        "a "
      ],
      [
        "few",
        "er "
      ],
      [
        "linear",
        " "
      ],
      [
        "signifi",
        "can"
      ],
      [
        ".",
        "count"
      ],
      [
        "3",
        ". The "
      ],
      [
        "D",
        "ay "
      ],
      [
        "a",
        "ab"
      ],
      [
        "d",
        "x"
      ],
      [
        "g",
        "c"
      ],
      [
        "t",
        "r"
      ],
      [
        "w",
        " "
      ],
      [
        ", ",
        "but "
      ],
      [
        "on",
        ".\r\n"
      ],
      [
        "is ",
        "used to "
      ],
      [
        "de",
        "ci"
      ],
      [
        "n ",
        "+ "
      ],
      [
        "n ",
        "where "
      ],
      [
        "                ",
        "break\r\n"
      ],
      [
        " = ",
        "0, "
      ],
      [
        "es",
        ":\r\n"
      ],
      [
        "max",
        "-"
      ],
      [
        "= [",
        "\""
      ],
      [
        "number of ",
        "distinct "
      ],
      [
        "1 <= ",
        "m "
      ],
      [
        "for",
        "ward "
      ],
      [
        "with ",
        "n "
      ],
      [
        "s = [",
        "["
      ],
      [
        ". The ",
        "time complexity is "
      ],
      [
        "be",
        "st_"
      ],
      [
        "word",
        "1"
      ],
      [
        "        return ",
        "["
      ],
      [
        "right",
        "` "
      ],
      [
        "You are ",
        "given the "
      ],
      [
        "value ",
        "in "
      ],
      [
        "only ",
        "the "
      ],
      [
        "has ",
        "been "
      ],
      [
        "1] ",
        "- "
      ],
      [
        "differ",
        "ent"
      ],
      [
        "graph",
        ".\r\n"
      ],
      [
        "character ",
        "is "
      ],
      [
        "numbers ",
        "in the "
      ],
      [
        "large",
        "st"
      ],
      [
        "        if ",
        "n == "
      ],
      [
        "for the ",
        "first "
      ],
      [
        "1) ",
        "and "
      ],
      [
        "distance ",
        "= "
      ],
      [
        "conne",
        "ct "
      ],
      [
        "add",
        "ing the "
      ],
      [
        "multi",
        "ple"
      ],
      [
        "multi",
        "pli"
      ],
      [
        "n, ",
        "return the "
      ],
      [
        "s_",
        "to_"
      ],
      [
        "allow",
        "ed "
      ],
      [
        "De",
        "let"
      ],
      [
        "To solve this ",
        "problem "
      ],
      [
        "Output: 1",
        "2\r\n"
      ],
      [
        "O(n",
        "^"
      ],
      [
        "-1,",
        "-1,"
      ],
      [
        "rot",
        "ated "
      ],
      [
        "level",
        "_"
      ],
      [
        "        # Iterate ",
        "over each "
      ],
      [
        "energ",
        "y"
      ],
      [
        "palindrome",
        ".\r\n"
      ],
      [
        "construct",
        "s the "
      ],
      [
        "bisect_",
        "left"
      ],
      [
        "distrib",
        "ut"
      ],
      [
        "table",
        "\r\n"
      ],
      [
        ". If there are ",
        "multiple "
      ],
      [
        "node.left",
        ")\r\n"
      ],
      [
        "Notice ",
        "that "
      ],
      [
        "Man",
        "hattan "
      ],
      [
        "stree",
        "t "
      ],
      [
        "-",
        "inf'"
      ],
      [
        "2",
        "), ("
      ],
      [
        "C",
        "ould "
      ],
      [
        "P",
        "lay"
      ],
      [
        "S",
        "ort the "
      ],
      [
        "\\",
        ")"
      ],
      [
        "e",
        "\",\""
      ],
      [
        ", ",
        "you can "
      ],
      [
        "an",
        "s["
      ],
      [
        "st",
        "ates "
      ],
      [
        ": ",
        "List[List[int]], "
      ],
      [
        "de",
        "t"
      ],
      [
        "to ",
        "any "
      ],
      [
        "a ",
        "list of "
      ],
      [
        "Input: ",
        "point"
      ],
      [
        "sub",
        "set of "
      ],
      [
        "2 ",
        "in "
      ],
      [
        "== ",
        "len("
      ],
      [
        "                    ",
        "continue\r\n"
      ],
      [
        "sib",
        "le"
      ],
      [
        "< ",
        "n\r\n"
      ],
      [
        "use",
        "d"
      ],
      [
        "from the ",
        "first "
      ],
      [
        "list ",
        "`"
      ],
      [
        "s[i] ",
        "<= "
      ],
      [
        "binary ",
        "tree, "
      ],
      [
        "!= ",
        "0:\r\n"
      ],
      [
        "comput",
        "ed "
      ],
      [
        "0],[",
        "1,"
      ],
      [
        "score",
        ".\r\n"
      ],
      [
        "condition",
        "s.\r\n"
      ],
      [
        "second",
        "s.\r\n"
      ],
      [
        "den",
        "omin"
      ],
      [
        "chang",
        "ing the "
      ],
      [
        "balan",
        "ce"
      ],
      [
        "float('",
        "-inf'"
      ],
      [
        "perform",
        "ing the "
      ],
      [
        "stat",
        "ement"
      ],
      [
        "parenthe",
        "se"
      ],
      [
        "ai, ",
        "b"
      ],
      [
        "Recursi",
        "ve "
      ],
      [
        "The number of nodes in the tree is ",
        "in the range [1, "
      ],
      [
        "aga",
        "in"
      ],
      [
        "quic",
        "k"
      ],
      [
        "actu",
        "al "
      ],
      [
        "right - ",
        "left "
      ],
      [
        "where",
        ":\r\n"
      ],
      [
        "look",
        "up"
      ],
      [
        "231 - ",
        "1\r\n"
      ],
      [
        "lru_cache(",
        "None)\r\n"
      ],
      [
        "\"",
        "10"
      ],
      [
        "(",
        "root"
      ],
      [
        "5",
        "]"
      ],
      [
        "9",
        "],["
      ],
      [
        "X",
        " "
      ],
      [
        "`",
        ", the "
      ],
      [
        "b",
        "y"
      ],
      [
        "b",
        "ul"
      ],
      [
        "f",
        "all"
      ],
      [
        "f",
        "old"
      ],
      [
        "g",
        "g"
      ],
      [
        "        ",
        "stack = "
      ],
      [
        "ti",
        ", "
      ],
      [
        "ut",
        "t"
      ],
      [
        "to ",
        "get "
      ],
      [
        "at",
        "ely "
      ],
      [
        "tur",
        "n "
      ],
      [
        "con",
        "stra"
      ],
      [
        "In",
        "ser"
      ],
      [
        "= [",
        "2,"
      ],
      [
        "Output: ",
        "[1,2,"
      ],
      [
        "sel",
        "f "
      ],
      [
        "ex",
        "ample "
      ],
      [
        "low",
        ", "
      ],
      [
        "You ",
        "have "
      ],
      [
        "is the ",
        "only "
      ],
      [
        "the",
        "st "
      ],
      [
        "        for ",
        "u, "
      ],
      [
        "            if ",
        "len("
      ],
      [
        "point",
        ".\r\n"
      ],
      [
        "s[",
        "right"
      ],
      [
        "nums[",
        "3] "
      ],
      [
        "character",
        "s are "
      ],
      [
        "with the ",
        "first "
      ],
      [
        "non-",
        "overlapping "
      ],
      [
        "approach ",
        "to find the "
      ],
      [
        "between ",
        "two "
      ],
      [
        "incre",
        "ment "
      ],
      [
        "df",
        "s` function "
      ],
      [
        "substring",
        "s of "
      ],
      [
        "colle",
        "ction"
      ],
      [
        "longest ",
        "common "
      ],
      [
        "tas",
        "ks "
      ],
      [
        "s. The ",
        "`"
      ],
      [
        "Tim",
        "es"
      ],
      [
        "case",
        "s are "
      ],
      [
        "left, ",
        "right"
      ],
      [
        "box",
        "es"
      ],
      [
        "prime ",
        "factor"
      ],
      [
        "Otherwise",
        ", "
      ],
      [
        "specifi",
        "ed "
      ],
      [
        "fil",
        "l"
      ],
      [
        "part ",
        "of the "
      ],
      [
        "obstac",
        "le "
      ],
      [
        "neede",
        "d.\r\n"
      ],
      [
        "Since the ",
        "answer may be "
      ],
      [
        "beginn",
        "ing "
      ],
      [
        "        # Conver",
        "t "
      ],
      [
        "math",
        "."
      ],
      [
        "techni",
        "que "
      ],
      [
        "Sorted",
        "List"
      ],
      [
        "guaranteed ",
        "that "
      ],
      [
        "Determin",
        "e the "
      ],
      [
        "Could ",
        "you "
      ],
      [
        "\"",
        ". "
      ],
      [
        "0",
        "'s "
      ],
      [
        "a",
        "\r\n"
      ],
      [
        "k",
        ")\r\n"
      ],
      [
        "l",
        "it"
      ],
      [
        "m",
        "ou"
      ],
      [
        "n",
        "x, n"
      ],
      [
        "t",
        "\r\n"
      ],
      [
        "v",
        ", "
      ],
      [
        "th",
        "od"
      ],
      [
        "ar",
        "oun"
      ],
      [
        "ti",
        "le"
      ],
      [
        "y ",
        "+ "
      ],
      [
        "num",
        ", "
      ],
      [
        "pl",
        "y the "
      ],
      [
        "it",
        "\r\n"
      ],
      [
        "ter",
        "m"
      ],
      [
        "        # ",
        "Build the "
      ],
      [
        "count",
        "ing the "
      ],
      [
        "to the ",
        "current "
      ],
      [
        "    def ",
        "longest"
      ],
      [
        "ta",
        "il"
      ],
      [
        "4,",
        "1,"
      ],
      [
        "left",
        "most "
      ],
      [
        "arr",
        ")\r\n"
      ],
      [
        "index ",
        "i = "
      ],
      [
        "minimum ",
        "and "
      ],
      [
        "value ",
        "= "
      ],
      [
        "only ",
        "lowercase English letters.\r\n"
      ],
      [
        "quer",
        "y.\r\n"
      ],
      [
        "has ",
        "no "
      ],
      [
        "fre",
        "e "
      ],
      [
        "max(",
        "0, "
      ],
      [
        "large",
        "st_"
      ],
      [
        "En",
        "er"
      ],
      [
        "1) ",
        "= "
      ],
      [
        "2],[",
        "3,"
      ],
      [
        "total_",
        "sum "
      ],
      [
        ": List[int]",
        ") -> bool:\r\n"
      ],
      [
        "with a ",
        "time complexity of "
      ],
      [
        ") - ",
        "ord('a"
      ],
      [
        "interval",
        "s "
      ],
      [
        "in the range ",
        "["
      ],
      [
        "\"b",
        "c"
      ],
      [
        ": str",
        ") -> str:\r\n"
      ],
      [
        ": int) -> ",
        "str:\r\n"
      ],
      [
        "trans",
        "forma"
      ],
      [
        "Co",
        "st "
      ],
      [
        "gi",
        "ve "
      ],
      [
        "increment",
        "s the "
      ],
      [
        "(self, nums: List[int], ",
        "k: int) -> int:\r\n"
      ],
      [
        "rule",
        "s:\r\n"
      ],
      [
        "yi",
        "el"
      ],
      [
        "Dist",
        "ance"
      ],
      [
        "rest ",
        "of the "
      ],
      [
        "Base ",
        "case"
      ],
      [
        "Explanation:",
        " "
      ],
      [
        "\" + ",
        "\""
      ],
      [
        "Hel",
        "per function "
      ],
      [
        "dol",
        "lar"
      ],
      [
        "two-",
        "pointer "
      ],
      [
        "(",
        "inclusive"
      ],
      [
        "5",
        "0"
      ],
      [
        "8",
        " + "
      ],
      [
        "R",
        "L"
      ],
      [
        "_",
        "list"
      ],
      [
        "g",
        "en"
      ],
      [
        "i",
        "s, "
      ],
      [
        "s",
        "[i], "
      ],
      [
        "u",
        "s, the "
      ],
      [
        "w",
        "ell"
      ],
      [
        "in",
        "t the "
      ],
      [
        "ur",
        "r"
      ],
      [
        "ma",
        "th "
      ],
      [
        "mo",
        "iz"
      ],
      [
        "from ",
        "index "
      ],
      [
        "as ",
        "it "
      ],
      [
        "ex",
        "ec"
      ],
      [
        "with ",
        "`"
      ],
      [
        "low",
        "est "
      ],
      [
        "word",
        "\r\n"
      ],
      [
        "Re",
        "present"
      ],
      [
        "4,",
        "5,"
      ],
      [
        "me",
        "t"
      ],
      [
        "            if ",
        "nums[i] "
      ],
      [
        "tre",
        "es "
      ],
      [
        "sw",
        "app"
      ],
      [
        "**: ",
        "If "
      ],
      [
        "operation",
        "s\r\n"
      ],
      [
        "[1,",
        "3,"
      ],
      [
        "count ",
        "in "
      ],
      [
        "                if ",
        "not "
      ],
      [
        ".length <= 10",
        "\r\n"
      ],
      [
        "s[i] ",
        "= "
      ],
      [
        "        for i in range(",
        "m):\r\n"
      ],
      [
        "   - ",
        "The "
      ],
      [
        "   - ",
        "If the "
      ],
      [
        "need to ",
        "be "
      ],
      [
        "remov",
        "ing the "
      ],
      [
        "zero",
        "s"
      ],
      [
        "constraint",
        "s "
      ],
      [
        ") and ",
        "("
      ],
      [
        "inclu",
        "de "
      ],
      [
        "inclu",
        "ding the "
      ],
      [
        "4],[",
        "2,"
      ],
      [
        "1 <= s",
        ".length <= "
      ],
      [
        "meet",
        "s the "
      ],
      [
        "aver",
        "age"
      ],
      [
        "Input: nums = [1,2,",
        "3,4,"
      ],
      [
        "medi",
        "an"
      ],
      [
        "not in ",
        "visited:\r\n"
      ],
      [
        "Hence",
        ", "
      ],
      [
        "cent",
        "er "
      ],
      [
        "backtrac",
        "king "
      ],
      [
        "ensuring ",
        "that the "
      ],
      [
        "Your ",
        "task is to "
      ],
      [
        "hav",
        "ing "
      ],
      [
        "fig",
        "ur"
      ],
      [
        "under",
        "lin"
      ],
      [
        "counts the ",
        "number of "
      ],
      [
        "Me",
        "moiz"
      ],
      [
        "Pl",
        "ac"
      ],
      [
        "Cour",
        "se"
      ],
      [
        "aster",
        "o"
      ],
      [
        "constra",
        "int "
      ],
      [
        "(",
        "-"
      ],
      [
        "(",
        "the "
      ],
      [
        "(",
        "possibly "
      ],
      [
        ".",
        "split"
      ],
      [
        "1",
        "), "
      ],
      [
        "2",
        "*"
      ],
      [
        ":",
        "]\r\n"
      ],
      [
        "[",
        "5, "
      ],
      [
        "`",
        "0"
      ],
      [
        "a",
        "tive "
      ],
      [
        "b",
        ")\r\n"
      ],
      [
        "s",
        "1 and "
      ],
      [
        "x",
        "][n"
      ],
      [
        "de",
        "que "
      ],
      [
        "            ",
        "new_"
      ],
      [
        "            ",
        "left_"
      ],
      [
        "            ",
        "count = 0\r\n"
      ],
      [
        "a ",
        "single "
      ],
      [
        "a ",
        "positive integer "
      ],
      [
        "1 ",
        "for "
      ],
      [
        "ol",
        "o"
      ],
      [
        "nums",
        ".length "
      ],
      [
        "nums",
        "[i], "
      ],
      [
        "fi",
        "x"
      ],
      [
        "ne",
        "ver "
      ],
      [
        "        # ",
        "Helper function "
      ],
      [
        "sh",
        "ip "
      ],
      [
        "][",
        "col"
      ],
      [
        "ta",
        "in "
      ],
      [
        "dp",
        "[i - 1]["
      ],
      [
        "iz",
        "z"
      ],
      [
        "you ",
        "cannot "
      ],
      [
        "s to ",
        "avoid "
      ],
      [
        "left ",
        "corner "
      ],
      [
        "j ",
        "and "
      ],
      [
        "4 ",
        "is "
      ],
      [
        "number",
        "s\r\n"
      ],
      [
        "end ",
        "= "
      ],
      [
        "\", \"",
        "c"
      ],
      [
        "last ",
        "element "
      ],
      [
        "cell",
        ".\r\n"
      ],
      [
        "prefix ",
        "of "
      ],
      [
        "bre",
        "vi"
      ],
      [
        "mar",
        "k "
      ],
      [
        "        # Initializ",
        "e a "
      ],
      [
        "chang",
        "ing "
      ],
      [
        "stack ",
        "and "
      ],
      [
        "        # Iterate ",
        "through the "
      ],
      [
        "appl",
        "ying the "
      ],
      [
        "neede",
        "d"
      ],
      [
        "triang",
        "le"
      ],
      [
        "* (n ",
        "+ 1"
      ],
      [
        "subtra",
        "ct "
      ],
      [
        "% 2 ",
        "== 0:\r\n"
      ],
      [
        "numbered ",
        "from 0 to n - "
      ],
      [
        "        m, n = len(",
        "grid), len(grid[0])\r\n"
      ],
      [
        "), (0, ",
        "-1"
      ],
      [
        "), (1, ",
        "0"
      ],
      [
        "xi, ",
        "yi"
      ],
      [
        "do the ",
        "following "
      ],
      [
        "implement ",
        "this "
      ],
      [
        "deleting ",
        "some "
      ],
      [
        "accept",
        "ed.\r\n"
      ],
      [
        "quick",
        "ly "
      ],
      [
        "(",
        "a, b"
      ],
      [
        "2",
        "0\r\n"
      ],
      [
        "4",
        ":\r\n"
      ],
      [
        "6",
        "] "
      ],
      [
        "A",
        "pp"
      ],
      [
        "J",
        "o"
      ],
      [
        "[",
        "index"
      ],
      [
        "f",
        "("
      ],
      [
        "n",
        "))\r\n"
      ],
      [
        "s",
        "r"
      ],
      [
        "u",
        "f"
      ],
      [
        "al",
        ".\r\n"
      ],
      [
        "n ",
        "is "
      ],
      [
        ". ",
        "For example, "
      ],
      [
        "Th",
        "e"
      ],
      [
        "ent",
        "er"
      ],
      [
        "- ",
        "At "
      ],
      [
        "if ",
        "and only "
      ],
      [
        "The ",
        "total "
      ],
      [
        "con",
        "figur"
      ],
      [
        "= [",
        "["
      ],
      [
        "lo",
        "s"
      ],
      [
        "k ",
        "< "
      ],
      [
        "> ",
        "0 and "
      ],
      [
        "ed",
        ". The "
      ],
      [
        "        # ",
        "Return the "
      ],
      [
        "from ",
        "math "
      ],
      [
        "i ",
        "to "
      ],
      [
        "s = [",
        "1,2,"
      ],
      [
        "node",
        "]:\r\n"
      ],
      [
        "word",
        "2"
      ],
      [
        "ta",
        "king "
      ],
      [
        "[0",
        "]:\r\n"
      ],
      [
        "< ",
        "right:\r\n"
      ],
      [
        ", we ",
        "calculate the "
      ],
      [
        "2, ",
        "y"
      ],
      [
        "            if ",
        "num "
      ],
      [
        "\", ",
        "s"
      ],
      [
        "This solution ",
        "defines a "
      ],
      [
        "position",
        ".\r\n"
      ],
      [
        "+ 1",
        "))\r\n"
      ],
      [
        "A ",
        "substring "
      ],
      [
        "s in ",
        "each "
      ],
      [
        "ob",
        "serv"
      ],
      [
        "divi",
        "sion "
      ],
      [
        "\"a",
        "\",\"b"
      ],
      [
        "subarray ",
        "of "
      ],
      [
        "subarray",
        "s of "
      ],
      [
        "sa",
        "f"
      ],
      [
        "ensures that ",
        "we "
      ],
      [
        "3],[",
        "3,"
      ],
      [
        "out ",
        "of the "
      ],
      [
        "item",
        "s "
      ],
      [
        "algorith",
        "m"
      ],
      [
        "suffi",
        "x"
      ],
      [
        "exce",
        "ed "
      ],
      [
        "ball",
        "s "
      ],
      [
        "An",
        "d"
      ],
      [
        "            # Check ",
        "if "
      ],
      [
        "custom",
        "ers "
      ],
      [
        "ance",
        "stor"
      ],
      [
        "[:",
        ":"
      ],
      [
        "​​​​",
        "​​"
      ],
      [
        "ques",
        "tion "
      ],
      [
        "encounter",
        "ed "
      ],
      [
        "1 <= word",
        "s[i]"
      ],
      [
        "xy",
        "z"
      ],
      [
        "secre",
        "t "
      ],
      [
        "available",
        "_"
      ],
      [
        "        @",
        "lru_cache(None)\r\n"
      ],
      [
        "repeated",
        "ly "
      ],
      [
        "x][n",
        "y"
      ],
      [
        "from math ",
        "import "
      ],
      [
        "'",
        "L"
      ],
      [
        "(",
        "):\r\n"
      ],
      [
        ".",
        "0000"
      ],
      [
        "1",
        "`"
      ],
      [
        "1",
        "2 "
      ],
      [
        "4",
        "-"
      ],
      [
        "8",
        "], "
      ],
      [
        "A",
        "T"
      ],
      [
        "F",
        "or"
      ],
      [
        "F",
        "li"
      ],
      [
        "L",
        "et "
      ],
      [
        "[",
        "2], "
      ],
      [
        "_",
        ", "
      ],
      [
        "_",
        "with_"
      ],
      [
        "`",
        "["
      ],
      [
        "a",
        "gram"
      ],
      [
        "c",
        "umul"
      ],
      [
        "r",
        "t"
      ],
      [
        "s",
        "on "
      ],
      [
        "s",
        "[i + "
      ],
      [
        "}",
        ", "
      ],
      [
        "        ",
        "row"
      ],
      [
        "        ",
        "sorted_"
      ],
      [
        "er",
        "equi"
      ],
      [
        ", ",
        "current_"
      ],
      [
        "on",
        "ly.\r\n"
      ],
      [
        "an",
        "y"
      ],
      [
        "ro",
        "ver"
      ],
      [
        "to ",
        "find "
      ],
      [
        ". ",
        "Note that "
      ],
      [
        "an ",
        "element "
      ],
      [
        "it",
        "self "
      ],
      [
        "ol",
        "y"
      ],
      [
        "if ",
        "a "
      ],
      [
        "m ",
        "- "
      ],
      [
        "Input: ",
        "ma"
      ],
      [
        "ord",
        "ers "
      ],
      [
        "x ",
        "== "
      ],
      [
        "0,",
        "2,"
      ],
      [
        "ver",
        "sion "
      ],
      [
        "number of ",
        "operations "
      ],
      [
        "(self, ",
        "arr"
      ],
      [
        "maximum ",
        "sum "
      ],
      [
        "is the ",
        "sum of "
      ],
      [
        "minimum ",
        "time "
      ],
      [
        "] = ",
        "True\r\n"
      ],
      [
        "count ",
        "how many "
      ],
      [
        "cre",
        "ate "
      ],
      [
        "For ",
        "i = "
      ],
      [
        "n - ",
        "1 "
      ],
      [
        "s: ",
        "List[List[int]]"
      ],
      [
        ", it ",
        "calculates the "
      ],
      [
        ", it ",
        "returns the "
      ],
      [
        "s. ",
        "We "
      ],
      [
        "target",
        ", "
      ],
      [
        "numbers ",
        "in "
      ],
      [
        "op",
        "tion"
      ],
      [
        "_sum",
        " = 0\r\n"
      ],
      [
        "word ",
        "in "
      ],
      [
        "x, ",
        "y, "
      ],
      [
        "x, ",
        "y = "
      ],
      [
        "1],[",
        "1,1,"
      ],
      [
        "incre",
        "ment the "
      ],
      [
        "-index",
        "ed "
      ],
      [
        "Initializ",
        "ation**: We "
      ],
      [
        "ari",
        "ly "
      ],
      [
        "prev",
        " = "
      ],
      [
        "mean",
        "s that "
      ],
      [
        "does not ",
        "contain "
      ],
      [
        "coordin",
        "ates"
      ],
      [
        "            for j in range(",
        "1, "
      ],
      [
        "ect",
        "ed"
      ],
      [
        "_index",
        " = "
      ],
      [
        "it's ",
        "not "
      ],
      [
        "`dp` ",
        "array "
      ],
      [
        "An",
        "y "
      ],
      [
        ". You ",
        "may "
      ],
      [
        "(n",
        "x, n"
      ],
      [
        "neighbor ",
        "in graph["
      ],
      [
        "regi",
        "on "
      ],
      [
        "Max",
        "imum "
      ],
      [
        "Python",
        " "
      ],
      [
        "recursive ",
        "function "
      ],
      [
        "abo",
        "ve.\r\n"
      ],
      [
        "infin",
        "ite "
      ],
      [
        "rel",
        "ation"
      ],
      [
        "left + ",
        "right"
      ],
      [
        "minimum and ",
        "maximum "
      ],
      [
        "erequi",
        "sit"
      ],
      [
        "\"",
        "11"
      ],
      [
        "'",
        "9"
      ],
      [
        "3",
        "0\r\n"
      ],
      [
        "4",
        "] = "
      ],
      [
        "7",
        "] "
      ],
      [
        "C",
        "urr"
      ],
      [
        "b",
        "ab"
      ],
      [
        "c",
        "arr"
      ],
      [
        "m",
        "p"
      ],
      [
        "s ",
        "+= 1\r\n"
      ],
      [
        "en",
        "ded "
      ],
      [
        "or",
        "\r\n"
      ],
      [
        "st",
        "one"
      ],
      [
        "of ",
        "them.\r\n"
      ],
      [
        "se",
        "e if "
      ],
      [
        "a ",
        "2D integer array "
      ],
      [
        "- ",
        "If "
      ],
      [
        "[i",
        "+"
      ],
      [
        "if ",
        "we "
      ],
      [
        "e the ",
        "first "
      ],
      [
        "Input: ",
        "word = "
      ],
      [
        "Input: ",
        "matrix = ["
      ],
      [
        "min",
        "ute "
      ],
      [
        "in the ",
        "sorted "
      ],
      [
        "from ",
        "left to "
      ],
      [
        "sel",
        "l "
      ],
      [
        "sh",
        "or"
      ],
      [
        "1 <= ",
        "arr"
      ],
      [
        "pa",
        "i"
      ],
      [
        "pa",
        "w"
      ],
      [
        "(self, ",
        "num"
      ],
      [
        "        return ",
        "dfs("
      ],
      [
        "s of ",
        "a "
      ],
      [
        "all",
        "("
      ],
      [
        "-1",
        ")\r\n"
      ],
      [
        "result",
        ")\r\n"
      ],
      [
        "us",
        "er"
      ],
      [
        ". If ",
        "there is no "
      ],
      [
        "Return the ",
        "maximum possible "
      ],
      [
        "1] ",
        "== "
      ],
      [
        "follow",
        "ing:\r\n"
      ],
      [
        "trac",
        "k the "
      ],
      [
        "s. ",
        "Each "
      ],
      [
        "Explanation: The ",
        "longest "
      ],
      [
        "other ",
        "words, "
      ],
      [
        "ag",
        "es "
      ],
      [
        ".length == ",
        "n\r\n"
      ],
      [
        "`k",
        "`.\r\n"
      ],
      [
        "[2,",
        "1,"
      ],
      [
        "largest ",
        "possible "
      ],
      [
        "node.",
        "children"
      ],
      [
        "lowercase ",
        "letter"
      ],
      [
        "queries",
        ":\r\n"
      ],
      [
        "0],[",
        "2,"
      ],
      [
        "positive ",
        "integer"
      ],
      [
        "match",
        "ing "
      ],
      [
        "exist",
        "s.\r\n"
      ],
      [
        "appear",
        "s in "
      ],
      [
        ", so ",
        "we "
      ],
      [
        "dictionary ",
        "to store the "
      ],
      [
        "buil",
        "d the "
      ],
      [
        "inser",
        "t "
      ],
      [
        "(self, n",
        ": int) -> int:\r\n"
      ],
      [
        "2, 3, ",
        "4, "
      ],
      [
        "dow",
        "n, "
      ],
      [
        "we",
        "e"
      ],
      [
        "subtra",
        "ct"
      ],
      [
        "candid",
        "ate "
      ],
      [
        "capac",
        "ity"
      ],
      [
        "lru_cach",
        "e\r\n"
      ],
      [
        "bri",
        "ck"
      ],
      [
        "interse",
        "ction"
      ],
      [
        "alphab",
        "et"
      ],
      [
        "xi, ",
        "y"
      ],
      [
        "an edge ",
        "between "
      ],
      [
        "s(self, n",
        ": int, "
      ],
      [
        "So ",
        "the "
      ],
      [
        "from functools import ",
        "lru_cache\r\n"
      ],
      [
        "Explanation: In this ",
        "example"
      ],
      [
        "const",
        "ant "
      ],
      [
        "low, ",
        "high"
      ],
      [
        "0",
        "  # "
      ],
      [
        "1",
        "7"
      ],
      [
        ":",
        ":"
      ],
      [
        "P",
        "alindro"
      ],
      [
        "S",
        "im"
      ],
      [
        "[",
        "3,2,"
      ],
      [
        "c",
        "t = "
      ],
      [
        "e",
        "st_"
      ],
      [
        "g",
        "l"
      ],
      [
        "i",
        "ve "
      ],
      [
        "i",
        ".e."
      ],
      [
        "k",
        "_"
      ],
      [
        "k",
        "]\r\n"
      ],
      [
        "l",
        "ang"
      ],
      [
        "m",
        ")]\r\n"
      ],
      [
        "n",
        "th "
      ],
      [
        "o",
        "t "
      ],
      [
        "s",
        "or"
      ],
      [
        "s",
        "` to "
      ],
      [
        "        ",
        "left = "
      ],
      [
        "in",
        "er"
      ],
      [
        "in",
        "order"
      ],
      [
        "in",
        "side "
      ],
      [
        "re",
        "ward"
      ],
      [
        ". ",
        "By "
      ],
      [
        "a ",
        "total of "
      ],
      [
        "un",
        "it "
      ],
      [
        "an ",
        "even "
      ],
      [
        "                ",
        "result"
      ],
      [
        "                ",
        "count += 1\r\n"
      ],
      [
        "nums",
        "1 "
      ],
      [
        "10",
        " = "
      ],
      [
        "10",
        "], "
      ],
      [
        "es",
        "s "
      ],
      [
        "gh",
        "t "
      ],
      [
        "        # ",
        "Start "
      ],
      [
        "pro",
        "fi"
      ],
      [
        "ab",
        "brevi"
      ],
      [
        "ver",
        "ti"
      ],
      [
        "sel",
        "l"
      ],
      [
        "as ",
        "many "
      ],
      [
        "Explanation: ",
        "It is "
      ],
      [
        "ir",
        "r"
      ],
      [
        "Re",
        "place "
      ],
      [
        "to the ",
        "result "
      ],
      [
        ") -> ",
        "List[str]:\r\n"
      ],
      [
        "You ",
        "must "
      ],
      [
        "element",
        "s, "
      ],
      [
        "        return ",
        "-1\r\n"
      ],
      [
        "[0",
        ".."
      ],
      [
        "            if ",
        "current_"
      ],
      [
        "so ",
        "that the "
      ],
      [
        "id",
        "en"
      ],
      [
        "result",
        "s of "
      ],
      [
        "[i]",
        ".length == 2\r\n"
      ],
      [
        "is a ",
        "subsequence of "
      ],
      [
        "pair",
        "s ("
      ],
      [
        "elements ",
        "from the "
      ],
      [
        "represent",
        "ing a "
      ],
      [
        "            return ",
        "-1\r\n"
      ],
      [
        "j ",
        "<= "
      ],
      [
        "siz",
        "es "
      ],
      [
        "6,",
        "2,"
      ],
      [
        "set",
        ":\r\n"
      ],
      [
        "digit",
        "\r\n"
      ],
      [
        "digit",
        "s, "
      ],
      [
        "        for i in range(",
        "n - "
      ],
      [
        "smallest ",
        "possible "
      ],
      [
        "do",
        "t "
      ],
      [
        "efficient",
        "ly.\r\n"
      ],
      [
        "lon",
        "g "
      ],
      [
        "lin",
        "e"
      ],
      [
        "                # ",
        "Check "
      ],
      [
        "Input: n = ",
        "2, "
      ],
      [
        "group",
        ".\r\n"
      ],
      [
        "make ",
        "all "
      ],
      [
        "upd",
        "ated "
      ],
      [
        "n == ",
        "nums.length\r\n"
      ],
      [
        "stru",
        "cture"
      ],
      [
        "pr",
        "erequisit"
      ],
      [
        "decre",
        "as"
      ],
      [
        "bal",
        "lo"
      ],
      [
        "Output: 1",
        "5\r\n"
      ],
      [
        "first",
        ".\r\n"
      ],
      [
        "To solve this problem",
        ", we can use a "
      ],
      [
        "Po",
        "sition"
      ],
      [
        "float('inf'",
        ")] "
      ],
      [
        "more than ",
        "one "
      ],
      [
        "concaten",
        "ated "
      ],
      [
        "larger ",
        "than "
      ],
      [
        "slo",
        "t"
      ],
      [
        "Let's ",
        "implement this "
      ],
      [
        "iterating ",
        "through the "
      ],
      [
        "Indi",
        "ces"
      ],
      [
        "        nums",
        ".sort()\r\n"
      ],
      [
        "Given the constraint",
        "s, "
      ],
      [
        "The input is ",
        "generated such that "
      ],
      [
        "Base case",
        ": "
      ],
      [
        "\"",
        "ac"
      ],
      [
        "\"",
        "],\r\n"
      ],
      [
        "'",
        "e"
      ],
      [
        ".",
        "sort("
      ],
      [
        "1",
        ". We "
      ],
      [
        "5",
        "00"
      ],
      [
        "5",
        "000\r\n"
      ],
      [
        "O",
        "\",\""
      ],
      [
        "R",
        "oo"
      ],
      [
        "[",
        "p"
      ],
      [
        "_",
        "length"
      ],
      [
        "c",
        "er"
      ],
      [
        "h",
        "en"
      ],
      [
        "j",
        ")\r\n"
      ],
      [
        "n",
        "at"
      ],
      [
        "p",
        "ack"
      ],
      [
        "s",
        "ou"
      ],
      [
        "t",
        "ing the "
      ],
      [
        "w",
        "in "
      ],
      [
        "        ",
        "direction"
      ],
      [
        "on",
        "to the "
      ],
      [
        "en",
        "ari"
      ],
      [
        "to ",
        "store "
      ],
      [
        "ing ",
        "this "
      ],
      [
        "n ",
        "x n "
      ],
      [
        "Th",
        "us, "
      ],
      [
        "                ",
        "left += 1\r\n"
      ],
      [
        "for ",
        "large "
      ],
      [
        "sub",
        "problem"
      ],
      [
        "length ",
        "of a "
      ],
      [
        "array ",
        "by "
      ],
      [
        "number of ",
        "unique "
      ],
      [
        "li",
        "ght"
      ],
      [
        "by ",
        "1.\r\n"
      ],
      [
        "Con",
        "struction"
      ],
      [
        ". The ",
        "final "
      ],
      [
        "count",
        "ing "
      ],
      [
        "        return ",
        "dp"
      ],
      [
        "up",
        ", "
      ],
      [
        "par",
        "ts "
      ],
      [
        "row",
        ".\r\n"
      ],
      [
        "You are given ",
        "an m x n "
      ],
      [
        "graph",
        "\r\n"
      ],
      [
        "right ",
        "to "
      ],
      [
        "sc",
        "enari"
      ],
      [
        "cost ",
        "is "
      ],
      [
        "result ",
        "+= "
      ],
      [
        "Ch",
        "ange "
      ],
      [
        "Given ",
        "an array "
      ],
      [
        "move ",
        "to "
      ],
      [
        "Input: s = ",
        "\"ab"
      ],
      [
        "incre",
        "ase"
      ],
      [
        "                # ",
        "Calculate the "
      ],
      [
        "cost",
        ".\r\n"
      ],
      [
        "loc",
        "al "
      ],
      [
        "This solution use",
        "s the "
      ],
      [
        "[2,",
        "3,"
      ],
      [
        "[2,",
        "4,"
      ],
      [
        "cell ",
        "is "
      ],
      [
        "path",
        ".\r\n"
      ],
      [
        "flo",
        "or "
      ],
      [
        ", return ",
        "false.\r\n"
      ],
      [
        "also ",
        "be "
      ],
      [
        "ga",
        "in"
      ],
      [
        "pop",
        "ul"
      ],
      [
        "match",
        " the "
      ],
      [
        "matrix",
        ".\r\n"
      ],
      [
        "3] ",
        "and "
      ],
      [
        "first",
        ", "
      ],
      [
        "max(max_",
        "length, "
      ],
      [
        "else ",
        "-1\r\n"
      ],
      [
        "common ",
        "divisor "
      ],
      [
        "Po",
        "s"
      ],
      [
        "False",
        "`.\r\n"
      ],
      [
        "it's ",
        "impossible to "
      ],
      [
        "Valu",
        "es"
      ],
      [
        "satisfi",
        "es "
      ],
      [
        "length = ",
        "max(max_length, "
      ],
      [
        "Se",
        "lect "
      ],
      [
        "Resul",
        "t "
      ],
      [
        "empty",
        ".\r\n"
      ],
      [
        "leading zero",
        "s.\r\n"
      ],
      [
        "whe",
        "ther the "
      ],
      [
        "time complexity of ",
        "this "
      ],
      [
        "obtain",
        "ed by "
      ],
      [
        "men",
        "tion"
      ],
      [
        "        result = ",
        "0\r\n"
      ],
      [
        "restri",
        "ction"
      ],
      [
        "Differ",
        "ence"
      ],
      [
        "(BFS",
        ") "
      ],
      [
        "        graph",
        " = defaultdict(list)\r\n"
      ],
      [
        "want",
        "s to "
      ],
      [
        "suc",
        "cess"
      ],
      [
        "4",
        " - "
      ],
      [
        ":",
        "0"
      ],
      [
        "I",
        "d"
      ],
      [
        "`",
        "current_"
      ],
      [
        "a",
        "\".\r\n"
      ],
      [
        "c",
        "all"
      ],
      [
        "g",
        "n"
      ],
      [
        "i",
        "li"
      ],
      [
        "n",
        ")"
      ],
      [
        "        ",
        "\""
      ],
      [
        "st",
        "e"
      ],
      [
        "le",
        "g"
      ],
      [
        "ch",
        " the "
      ],
      [
        "de",
        "si"
      ],
      [
        "co",
        "p"
      ],
      [
        "in ",
        "ascending "
      ],
      [
        "su",
        "p"
      ],
      [
        ") ",
        "are "
      ],
      [
        "                ",
        "new_"
      ],
      [
        "[i",
        " "
      ],
      [
        "ge",
        "ts "
      ],
      [
        "In",
        "teg"
      ],
      [
        "Input: ",
        "board "
      ],
      [
        "ne",
        "d"
      ],
      [
        "sub",
        "matrix "
      ],
      [
        "length ",
        "is "
      ],
      [
        "[i] ",
        "<= 109\r\n"
      ],
      [
        "sh",
        "are"
      ],
      [
        "sh",
        "op "
      ],
      [
        "Con",
        "t"
      ],
      [
        "word",
        "s.\r\n"
      ],
      [
        "vi",
        "de"
      ],
      [
        "maximum ",
        "and "
      ],
      [
        "< ",
        "len("
      ],
      [
        "] = ",
        "i\r\n"
      ],
      [
        "node ",
        "0 "
      ],
      [
        "will ",
        "store the "
      ],
      [
        "pair",
        "s.\r\n"
      ],
      [
        "elements ",
        "of the "
      ],
      [
        "pri",
        "z"
      ],
      [
        ", the ",
        "number of "
      ],
      [
        "siz",
        "e\r\n"
      ],
      [
        "number",
        "s, "
      ],
      [
        "iter",
        "to"
      ],
      [
        "return the ",
        "answer "
      ],
      [
        "path ",
        "is "
      ],
      [
        "cu",
        "bo"
      ],
      [
        "1],[",
        "3,"
      ],
      [
        "remov",
        "e"
      ],
      [
        "next",
        "\r\n"
      ],
      [
        ". This ",
        "allows us to "
      ],
      [
        "You are given a ",
        "2D integer array "
      ],
      [
        "digit ",
        "in "
      ],
      [
        "ending ",
        "at "
      ],
      [
        "occurr",
        "ence"
      ],
      [
        "inclu",
        "de"
      ],
      [
        "goo",
        "d"
      ],
      [
        "Bob",
        "'s "
      ],
      [
        "less than ",
        "or equal to the "
      ],
      [
        "even ",
        "and "
      ],
      [
        "direction",
        "s:\r\n"
      ],
      [
        "-10",
        "0"
      ],
      [
        "chang",
        "e the "
      ],
      [
        "jo",
        "int "
      ],
      [
        "sk",
        "ip"
      ],
      [
        "Input: grid = [",
        "[1,"
      ],
      [
        "avo",
        "id"
      ],
      [
        "happ",
        "y "
      ],
      [
        "mis",
        "sing"
      ],
      [
        "triang",
        "le "
      ],
      [
        "Mo",
        "ve the "
      ],
      [
        "O(n) ",
        "time complex"
      ],
      [
        "pea",
        "k "
      ],
      [
        "row, ",
        "col"
      ],
      [
        "nums[j",
        "]"
      ],
      [
        ". Finally, it ",
        "returns the "
      ],
      [
        "tuple",
        "("
      ],
      [
        "dx, ",
        "d"
      ],
      [
        "try ",
        "to "
      ],
      [
        "conson",
        "ant"
      ],
      [
        "1",
        "4,"
      ],
      [
        "7",
        "7"
      ],
      [
        "7",
        " = "
      ],
      [
        "D",
        "y"
      ],
      [
        "M",
        "ore "
      ],
      [
        "[",
        "n - "
      ],
      [
        "`",
        ", and "
      ],
      [
        "a",
        "i and "
      ],
      [
        "b",
        "utt"
      ],
      [
        "c",
        "al"
      ],
      [
        "i",
        "ce "
      ],
      [
        "m",
        "ight "
      ],
      [
        "o",
        ", "
      ],
      [
        "        ",
        "dfs("
      ],
      [
        "        ",
        "prefix_sum"
      ],
      [
        "s ",
        "for the "
      ],
      [
        "en",
        ".\r\n"
      ],
      [
        "en",
        "cy"
      ],
      [
        "ar",
        "range "
      ],
      [
        "st",
        "er "
      ],
      [
        "of ",
        "n "
      ],
      [
        "pl",
        "us the "
      ],
      [
        "Th",
        "en"
      ],
      [
        "im",
        "e"
      ],
      [
        "ac",
        "tive "
      ],
      [
        "nums",
        "):\r\n"
      ],
      [
        "The ",
        "sum of the "
      ],
      [
        "wh",
        "ite "
      ],
      [
        "sub",
        "se"
      ],
      [
        "x ",
        "<= "
      ],
      [
        "1, ",
        "the "
      ],
      [
        "tw",
        "or"
      ],
      [
        "\",\"",
        "a"
      ],
      [
        "                    ",
        "new_"
      ],
      [
        "                    ",
        "count += 1\r\n"
      ],
      [
        "(self, ",
        "word"
      ],
      [
        "    def ",
        "can"
      ],
      [
        "in range(",
        "n):\r\n"
      ],
      [
        "        return ",
        "len("
      ],
      [
        "two ",
        "numbers "
      ],
      [
        "me",
        "thod"
      ],
      [
        "s = ",
        "sorted("
      ],
      [
        "ke",
        "ts "
      ],
      [
        "        for ",
        "j in range("
      ],
      [
        "dp",
        "[i] = "
      ],
      [
        "\" ",
        "to "
      ],
      [
        "right",
        "most "
      ],
      [
        "index ",
        "is "
      ],
      [
        "operation",
        "s, "
      ],
      [
        "sequen",
        "ces"
      ],
      [
        "node ",
        "in "
      ],
      [
        "which ",
        "are "
      ],
      [
        "' ",
        "in "
      ],
      [
        "from the ",
        "second "
      ],
      [
        "time ",
        "and "
      ],
      [
        "Input: nums = [",
        "3,"
      ],
      [
        "k = ",
        "0\r\n"
      ],
      [
        "graph",
        " is "
      ],
      [
        "n - ",
        "1:\r\n"
      ],
      [
        "non",
        "_"
      ],
      [
        "set ",
        "bits "
      ],
      [
        "answer ",
        "to the "
      ],
      [
        "non-",
        "zero "
      ],
      [
        "and the ",
        "last "
      ],
      [
        "[0] ",
        "* "
      ],
      [
        "inter",
        "sect"
      ],
      [
        "1) ",
        "// "
      ],
      [
        "zero",
        ".\r\n"
      ],
      [
        "2] ",
        "and "
      ],
      [
        "3,4",
        "]]\r\n"
      ],
      [
        "out ",
        "of "
      ],
      [
        ". We ",
        "then "
      ],
      [
        "s` ",
        "module "
      ],
      [
        ": List[int], ",
        "nums2"
      ],
      [
        "at most ",
        "k "
      ],
      [
        "replac",
        "ement"
      ],
      [
        "nega",
        "tive"
      ],
      [
        "De",
        "fin"
      ],
      [
        "Op",
        "tion "
      ],
      [
        "vow",
        "el "
      ],
      [
        "constru",
        "ct the "
      ],
      [
        "        # Iterate ",
        "over the "
      ],
      [
        "Per",
        "son "
      ],
      [
        "mer",
        "ge "
      ],
      [
        ", we return ",
        "`"
      ],
      [
        "In the ",
        "first "
      ],
      [
        "occurrence ",
        "of each "
      ],
      [
        "Return the minimum number of ",
        "operations "
      ],
      [
        "neede",
        "d\r\n"
      ],
      [
        "Bo",
        "x"
      ],
      [
        "% 2 ",
        "== "
      ],
      [
        "bisect_",
        "right"
      ],
      [
        "bri",
        "c"
      ],
      [
        "tiv",
        "e, "
      ],
      [
        "Result",
        "**: The "
      ],
      [
        "domin",
        "o"
      ],
      [
        "This solution iterates ",
        "through each "
      ],
      [
        "easi",
        "ly "
      ],
      [
        "(self, grid",
        ": List[List[int]]) -> int:\r\n"
      ],
      [
        "Gener",
        "ate "
      ],
      [
        "        left, right = ",
        "0, "
      ],
      [
        "            mid = (",
        "left + right"
      ],
      [
        "kn",
        "ight "
      ],
      [
        "Pu",
        "sh"
      ],
      [
        "        # Helper function ",
        "to "
      ],
      [
        "A substring ",
        "is a contiguous "
      ],
      [
        "Cont",
        "inu"
      ],
      [
        "'",
        "O"
      ],
      [
        "1",
        "2\r\n"
      ],
      [
        "2",
        "00\r\n"
      ],
      [
        "3",
        ")\r\n"
      ],
      [
        "3",
        "0,"
      ],
      [
        "5",
        "4"
      ],
      [
        "5",
        "0,"
      ],
      [
        "8",
        "9"
      ],
      [
        ":",
        "00"
      ],
      [
        "G",
        "roup"
      ],
      [
        "L",
        "oo"
      ],
      [
        "a",
        ")\r\n"
      ],
      [
        "c",
        "ed"
      ],
      [
        "l",
        "d"
      ],
      [
        "p",
        "ing "
      ],
      [
        "    ",
        "\r\n"
      ],
      [
        "s ",
        "+= "
      ],
      [
        ", ",
        "a "
      ],
      [
        "ing ",
        "to "
      ],
      [
        "] ",
        "for "
      ],
      [
        "Ex",
        "tra"
      ],
      [
        "ma",
        "in"
      ],
      [
        "fi",
        "c"
      ],
      [
        "that ",
        "satisfies the "
      ],
      [
        "as",
        "sign "
      ],
      [
        "lo",
        "om"
      ],
      [
        "ne",
        "i"
      ],
      [
        "ne",
        "twor"
      ],
      [
        "ver",
        "sion"
      ],
      [
        "1 <= ",
        "Node.val "
      ],
      [
        "with ",
        "length "
      ],
      [
        "with ",
        "all "
      ],
      [
        "char",
        ")\r\n"
      ],
      [
        "<= 10",
        "\r\n"
      ],
      [
        "s = [",
        "0] "
      ],
      [
        "\",",
        "\r\n"
      ],
      [
        "Con",
        "ne"
      ],
      [
        "il",
        "ar "
      ],
      [
        "element",
        "s to "
      ],
      [
        "s = ",
        "set()\r\n"
      ],
      [
        "dp",
        "[i-1]["
      ],
      [
        "3 ",
        "* 104\r\n"
      ],
      [
        "use",
        "d_"
      ],
      [
        "there ",
        "exists "
      ],
      [
        "Input: nums = [",
        "0,"
      ],
      [
        "s[i] ",
        "is either "
      ],
      [
        "self.",
        "rank[root"
      ],
      [
        "approach ",
        "is "
      ],
      [
        "loc",
        "ation"
      ],
      [
        "cell ",
        "in the "
      ],
      [
        "Chec",
        "k"
      ],
      [
        "sig",
        "n the "
      ],
      [
        "constraint",
        "s and "
      ],
      [
        "spac",
        "e.\r\n"
      ],
      [
        "adjac",
        "ent"
      ],
      [
        "1 <= nums",
        ".length <= 100\r\n"
      ],
      [
        "it is ",
        "impossible to "
      ],
      [
        "s.",
        "sort("
      ],
      [
        "consists of ",
        "lowercase English letters.\r\n"
      ],
      [
        "does not ",
        "have "
      ],
      [
        "combin",
        "ed "
      ],
      [
        "-10",
        "5 "
      ],
      [
        "back",
        "ward"
      ],
      [
        "fu",
        "el"
      ],
      [
        "count the ",
        "occurrences of each "
      ],
      [
        "'1",
        "'"
      ],
      [
        "True",
        "`.\r\n"
      ],
      [
        "fru",
        "its "
      ],
      [
        "from 1 to ",
        "n"
      ],
      [
        "Operation",
        " "
      ],
      [
        "            for i in range(",
        "1, "
      ],
      [
        "        # Check ",
        "if the "
      ],
      [
        "1 <= m, ",
        "n "
      ],
      [
        "Given an array of ",
        "integers "
      ],
      [
        "brac",
        "ket"
      ],
      [
        "Secon",
        "d "
      ],
      [
        "        stack = ",
        "[]\r\n"
      ],
      [
        "%",
        "= "
      ],
      [
        "(",
        "p"
      ],
      [
        "1",
        "-"
      ],
      [
        "1",
        "6,"
      ],
      [
        "1",
        ".length, "
      ],
      [
        "3",
        "00\r\n"
      ],
      [
        "3",
        ") = "
      ],
      [
        "3",
        "]], "
      ],
      [
        "G",
        "rid"
      ],
      [
        "H",
        "and"
      ],
      [
        "I",
        "t"
      ],
      [
        "Y",
        " "
      ],
      [
        "[",
        "-"
      ],
      [
        "b",
        "\"\r\n"
      ],
      [
        "f",
        "ull"
      ],
      [
        "i",
        "th"
      ],
      [
        "l",
        "y-"
      ],
      [
        "m",
        "ing"
      ],
      [
        "n",
        ")\r\n"
      ],
      [
        "s",
        "))\r\n"
      ],
      [
        "s",
        "and"
      ],
      [
        "s",
        "[i - "
      ],
      [
        "t",
        "le"
      ],
      [
        "t",
        "emp"
      ],
      [
        "v",
        ")\r\n"
      ],
      [
        "s ",
        "or "
      ],
      [
        "in",
        "struction"
      ],
      [
        "t ",
        "to "
      ],
      [
        "an",
        "s = "
      ],
      [
        "st",
        "ines"
      ],
      [
        "co",
        "in "
      ],
      [
        "n ",
        "% "
      ],
      [
        "n ",
        "is the length of the "
      ],
      [
        "tur",
        "n, "
      ],
      [
        ") ",
        "* ("
      ],
      [
        "mo",
        "st_"
      ],
      [
        "ed",
        "y "
      ],
      [
        "i ",
        "is "
      ],
      [
        "[i] ",
        "and "
      ],
      [
        "s of ",
        "each "
      ],
      [
        "integer ",
        "matrix "
      ],
      [
        ", we ",
        "will "
      ],
      [
        "point",
        "s\r\n"
      ],
      [
        "secon",
        "d.\r\n"
      ],
      [
        "A ",
        "string "
      ],
      [
        "1,2,",
        "2,"
      ],
      [
        "ang",
        "le"
      ],
      [
        "function ",
        "returns `"
      ],
      [
        "heap",
        " = ["
      ],
      [
        "nodes ",
        "with "
      ],
      [
        ". It ",
        "is "
      ],
      [
        "root ",
        "node "
      ],
      [
        "answer",
        "[i] is the "
      ],
      [
        "spac",
        "e"
      ],
      [
        "neighbor",
        ")\r\n"
      ],
      [
        "i < ",
        "n\r\n"
      ],
      [
        "`n",
        "` is "
      ],
      [
        "replac",
        "ing "
      ],
      [
        "[i], ",
        "nums2"
      ],
      [
        ") + ",
        "1\r\n"
      ],
      [
        "parent",
        "[x"
      ],
      [
        "for a ",
        "cost of "
      ],
      [
        "            for j in range(",
        "i + 1, "
      ],
      [
        "There is ",
        "only one "
      ],
      [
        "'1",
        "'.\r\n"
      ],
      [
        "False",
        "] "
      ],
      [
        "sim",
        "ilar "
      ],
      [
        "change",
        "d"
      ],
      [
        "satisf",
        "y "
      ],
      [
        "appl",
        "i"
      ],
      [
        "appl",
        "y the "
      ],
      [
        "].append(",
        "("
      ],
      [
        "man",
        "ag"
      ],
      [
        "distinct",
        "_"
      ],
      [
        "far",
        "thest "
      ],
      [
        "fil",
        "led "
      ],
      [
        "mi",
        "le"
      ],
      [
        "consist of ",
        "lowercase English letters.\r\n"
      ],
      [
        "row and ",
        "column "
      ],
      [
        "bag",
        " "
      ],
      [
        "thresh",
        "ol"
      ],
      [
        "#\",\"",
        "#\",\""
      ],
      [
        "sta",
        "ur"
      ],
      [
        "', and ",
        "'"
      ],
      [
        "true",
        ","
      ],
      [
        "min-",
        "heap "
      ],
      [
        "log n",
        ") "
      ],
      [
        "following condition",
        "s:\r\n"
      ],
      [
        "py",
        "ra"
      ],
      [
        "perf",
        "ect "
      ],
      [
        "bread",
        "th-first search "
      ],
      [
        "This solution defines a ",
        "helper function `"
      ],
      [
        "Input: ma",
        "t = ["
      ],
      [
        "subse",
        "quent "
      ],
      [
        "(",
        "current_"
      ],
      [
        ",",
        " "
      ],
      [
        "0",
        ", and "
      ],
      [
        "1",
        "1, "
      ],
      [
        "1",
        "2, "
      ],
      [
        "2",
        "` "
      ],
      [
        "2",
        "00"
      ],
      [
        "2",
        "6\r\n"
      ],
      [
        "5",
        ": "
      ],
      [
        "F",
        "act"
      ],
      [
        "G",
        "et the "
      ],
      [
        "U",
        "sing "
      ],
      [
        "W",
        "e"
      ],
      [
        "[",
        "num"
      ],
      [
        "[",
        "left"
      ],
      [
        "`",
        "arr"
      ],
      [
        "b",
        "loom"
      ],
      [
        "d",
        "ra"
      ],
      [
        "p",
        "oly"
      ],
      [
        "s",
        "q"
      ],
      [
        "s",
        ".length <= 100\r\n"
      ],
      [
        "        ",
        "count = "
      ],
      [
        "s ",
        "+ "
      ],
      [
        "s ",
        "becomes "
      ],
      [
        "d ",
        "of "
      ],
      [
        "or",
        "e the "
      ],
      [
        "al",
        "lo"
      ],
      [
        "is ",
        "2.\r\n"
      ],
      [
        "er ",
        "= "
      ],
      [
        "ur",
        "ch"
      ],
      [
        "ra",
        "ti"
      ],
      [
        "or ",
        "\""
      ],
      [
        "ma",
        "ch"
      ],
      [
        "ri",
        "bb"
      ],
      [
        "am",
        " "
      ],
      [
        "qu",
        "ad"
      ],
      [
        "- ",
        "`"
      ],
      [
        "for ",
        "this "
      ],
      [
        "from ",
        "node "
      ],
      [
        "1 <= ",
        "n == "
      ],
      [
        "for",
        "e "
      ],
      [
        "with ",
        "its "
      ],
      [
        "\",\"",
        "ab"
      ],
      [
        "string ",
        "and "
      ],
      [
        "word",
        "s in "
      ],
      [
        "sum",
        " = 0\r\n"
      ],
      [
        "one ",
        "or more "
      ],
      [
        "maximum ",
        "profit "
      ],
      [
        "ru",
        "n "
      ],
      [
        "3 ",
        "to "
      ],
      [
        "where ",
        "`dp"
      ],
      [
        "result",
        "s in "
      ],
      [
        "is a ",
        "string "
      ],
      [
        "answ",
        "ers "
      ],
      [
        "is",
        "on"
      ],
      [
        "such ",
        "as "
      ],
      [
        "non",
        "e"
      ],
      [
        "7,",
        "6,"
      ],
      [
        "oc",
        "cup"
      ],
      [
        "dire",
        "ctions "
      ],
      [
        "pu",
        "zz"
      ],
      [
        "contain",
        "ing the "
      ],
      [
        "Calcul",
        "ation**: We "
      ],
      [
        "incre",
        "ase "
      ],
      [
        "position ",
        "of the "
      ],
      [
        "remain",
        "s "
      ],
      [
        "conne",
        "ction"
      ],
      [
        "sing",
        "ly-"
      ],
      [
        "spac",
        "es.\r\n"
      ],
      [
        "pow",
        "ers of "
      ],
      [
        "[1,2,",
        "3,4,"
      ],
      [
        "values",
        "\r\n"
      ],
      [
        "ensur",
        "e the "
      ],
      [
        "dy",
        "\r\n"
      ],
      [
        "ext",
        "end"
      ],
      [
        "product ",
        "is "
      ],
      [
        "desc",
        "end"
      ],
      [
        "num in ",
        "enumerate("
      ],
      [
        "                for ",
        "j in range("
      ],
      [
        "cho",
        "col"
      ],
      [
        "suffi",
        "x_"
      ],
      [
        "cover",
        "ed "
      ],
      [
        "cour",
        "ses "
      ],
      [
        "partition",
        " the "
      ],
      [
        "other",
        "wise "
      ],
      [
        "non-empty ",
        "sequence of "
      ],
      [
        "Sear",
        "ch"
      ],
      [
        "DP ",
        "table "
      ],
      [
        "nums[i]",
        ")\r\n"
      ],
      [
        "LC",
        "M"
      ],
      [
        "Return the minimum ",
        "possible "
      ],
      [
        "Binary ",
        "Search "
      ],
      [
        "Prefi",
        "x"
      ],
      [
        "messa",
        "ge"
      ],
      [
        "Base ",
        "Case"
      ],
      [
        "x and ",
        "y "
      ],
      [
        ": List[List[int]]",
        ") -> List[int]:\r\n"
      ],
      [
        "greatest ",
        "common divisor "
      ],
      [
        "remo",
        "val"
      ],
      [
        "redundant calculation",
        "s.\r\n"
      ],
      [
        "Given the root of a ",
        "binary tree, "
      ],
      [
        "Heigh",
        "t"
      ],
      [
        "ui, ",
        "vi"
      ],
      [
        "                left = ",
        "mid + 1\r\n"
      ],
      [
        "fron",
        "t "
      ],
      [
        "To solve this problem ",
        "efficiently"
      ],
      [
        "astero",
        "id"
      ],
      [
        "cer",
        "tain "
      ],
      [
        "        direction",
        "s = ["
      ],
      [
        "3",
        "4"
      ],
      [
        "5",
        " - "
      ],
      [
        "8",
        "],["
      ],
      [
        "L",
        "en"
      ],
      [
        "Z",
        "er"
      ],
      [
        "[",
        "start"
      ],
      [
        "[",
        "3,4,"
      ],
      [
        "]",
        "  # "
      ],
      [
        "`",
        "p"
      ],
      [
        "i",
        "):\r\n"
      ],
      [
        "k",
        ") "
      ],
      [
        "p",
        "izz"
      ],
      [
        "r",
        " in range("
      ],
      [
        "ar",
        "m"
      ],
      [
        "ar",
        "t"
      ],
      [
        "ti",
        "tion"
      ],
      [
        "st",
        "or "
      ],
      [
        "al",
        "ong "
      ],
      [
        "of ",
        "any "
      ],
      [
        "of ",
        "this "
      ],
      [
        "ch",
        "er"
      ],
      [
        "se",
        "e "
      ],
      [
        "to ",
        "get the "
      ],
      [
        "to ",
        "keep track of "
      ],
      [
        "co",
        "ok"
      ],
      [
        "] ",
        "<= "
      ],
      [
        "put",
        ":"
      ],
      [
        "di",
        "ame"
      ],
      [
        "or ",
        "a "
      ],
      [
        "- ",
        "Choose "
      ],
      [
        "for ",
        "any "
      ],
      [
        "= [",
        "1,2,"
      ],
      [
        "min",
        "us the "
      ],
      [
        "ed",
        ":\r\n"
      ],
      [
        "        # ",
        "We "
      ],
      [
        "Explanation: ",
        "\""
      ],
      [
        "all ",
        "pairs of "
      ],
      [
        "node",
        ")\r\n"
      ],
      [
        "s the ",
        "same "
      ],
      [
        "(self",
        "."
      ],
      [
        "word",
        ")\r\n"
      ],
      [
        "ta",
        "stines"
      ],
      [
        "        return ",
        "dp["
      ],
      [
        "mov",
        "es\r\n"
      ],
      [
        "            # ",
        "Try "
      ],
      [
        "This solution ",
        "sorts the "
      ],
      [
        "] = ",
        "root"
      ],
      [
        "ev",
        "er "
      ],
      [
        "number",
        ", "
      ],
      [
        "\"a",
        "\", "
      ],
      [
        "find the ",
        "maximum "
      ],
      [
        "word ",
        "in word"
      ],
      [
        "        def ",
        "count_"
      ],
      [
        "indices ",
        "of "
      ],
      [
        "cell",
        "s are "
      ],
      [
        "cost",
        "s "
      ],
      [
        "2] ",
        "-> "
      ],
      [
        "colum",
        "n\r\n"
      ],
      [
        "following ",
        "way"
      ],
      [
        "determin",
        "es the "
      ],
      [
        ") - ",
        "1\r\n"
      ],
      [
        "hel",
        "p "
      ],
      [
        "defin",
        "e a "
      ],
      [
        "combin",
        "ation "
      ],
      [
        "input ",
        "list "
      ],
      [
        "parent",
        "[root"
      ],
      [
        "This solution uses a ",
        "sliding window "
      ],
      [
        "To solve this problem",
        ", we can use "
      ],
      [
        "add ",
        "it to the "
      ],
      [
        "indices",
        "\r\n"
      ],
      [
        "square",
        "s "
      ],
      [
        "'1",
        "' "
      ],
      [
        "'0",
        "' "
      ],
      [
        "lexicographic",
        "al "
      ],
      [
        "palindrom",
        "es "
      ],
      [
        "absolute ",
        "difference "
      ],
      [
        "        dp",
        " = [0] "
      ],
      [
        "connect",
        "ing "
      ],
      [
        "Per",
        "form "
      ],
      [
        "            # Check ",
        "if the current "
      ],
      [
        "# Definition ",
        "for "
      ],
      [
        "Dist",
        "ance "
      ],
      [
        "ListNode",
        ":\r\n"
      ],
      [
        "alphab",
        "et "
      ],
      [
        "is defin",
        "ed as the "
      ],
      [
        "Hence, the ",
        "answer is "
      ],
      [
        "Min",
        "imum "
      ],
      [
        "2 <= n ",
        "<= 105\r\n"
      ],
      [
        "earli",
        "est "
      ],
      [
        "        while left ",
        "< right:\r\n"
      ],
      [
        "test ",
        "cases are "
      ],
      [
        "with memoization ",
        "to "
      ],
      [
        "space complexity ",
        "is "
      ],
      [
        "To solve the problem of ",
        "finding the "
      ],
      [
        "        queue = deque",
        "(["
      ],
      [
        "immedi",
        "ately "
      ],
      [
        "uf",
        "."
      ],
      [
        "0",
        ").\r\n"
      ],
      [
        "0",
        "]], "
      ],
      [
        "P",
        "op"
      ],
      [
        "R",
        "R"
      ],
      [
        "T",
        " "
      ],
      [
        "U",
        "n"
      ],
      [
        "X",
        "OR"
      ],
      [
        "]",
        "):\r\n"
      ],
      [
        "c",
        "ry"
      ],
      [
        "g",
        "ame"
      ],
      [
        "n",
        " "
      ],
      [
        "in",
        "stea"
      ],
      [
        "an",
        "s"
      ],
      [
        "= ",
        "{}\r\n"
      ],
      [
        "re",
        "serv"
      ],
      [
        ": ",
        "\""
      ],
      [
        "is ",
        "used "
      ],
      [
        "ro",
        "ut"
      ],
      [
        "            ",
        "right_"
      ],
      [
        "di",
        "r"
      ],
      [
        "di",
        "fficul"
      ],
      [
        "Ex",
        "pl"
      ],
      [
        "un",
        "its "
      ],
      [
        "es ",
        "that "
      ],
      [
        ") ",
        "of the "
      ],
      [
        "ol",
        "e "
      ],
      [
        "                ",
        "count += "
      ],
      [
        "10",
        "0,"
      ],
      [
        "In",
        "ter"
      ],
      [
        "for ",
        "every "
      ],
      [
        "fi",
        "ll "
      ],
      [
        "ot",
        "on"
      ],
      [
        "> ",
        "max_"
      ],
      [
        "        # ",
        "Calculate "
      ],
      [
        "0 ",
        "if "
      ],
      [
        "fin",
        "ding "
      ],
      [
        "List[",
        "List[str]"
      ],
      [
        "Con",
        "si"
      ],
      [
        "][",
        "0] "
      ],
      [
        "whi",
        "le the "
      ],
      [
        "string ",
        "`s` "
      ],
      [
        "word",
        "s\r\n"
      ],
      [
        "word",
        "1 = "
      ],
      [
        "You ",
        "need to "
      ],
      [
        "first ",
        "two "
      ],
      [
        "row",
        "][col"
      ],
      [
        "current ",
        "number "
      ],
      [
        "index ",
        "`i"
      ],
      [
        "where ",
        "edges[i] = ["
      ],
      [
        "which ",
        "is a "
      ],
      [
        "), ",
        "the "
      ],
      [
        "Input: nums = [",
        "1,1,"
      ],
      [
        "character",
        "s\r\n"
      ],
      [
        "bu",
        "s "
      ],
      [
        "differ",
        "ences"
      ],
      [
        "Output: [",
        "[1,"
      ],
      [
        "nums[i] ",
        "+ "
      ],
      [
        "divi",
        "ded "
      ],
      [
        "divi",
        "ded by "
      ],
      [
        "[0] ",
        "* n for _ in range("
      ],
      [
        ". It ",
        "uses a "
      ],
      [
        "after ",
        "removing "
      ],
      [
        "longe",
        "st_"
      ],
      [
        "[2,",
        "2,"
      ],
      [
        "comput",
        "e "
      ],
      [
        "1. **",
        "Graph "
      ],
      [
        "match",
        "ed "
      ],
      [
        "iterates ",
        "through each "
      ],
      [
        "1 <= nums",
        ".length <= 1000\r\n"
      ],
      [
        "Di",
        "g"
      ],
      [
        "#         self.",
        "next = "
      ],
      [
        "Sub",
        "tra"
      ],
      [
        "clo",
        "sing "
      ],
      [
        "[1",
        "])\r\n"
      ],
      [
        "above ",
        "shows the "
      ],
      [
        "distance",
        "\r\n"
      ],
      [
        "1,0,",
        "1,"
      ],
      [
        "fu",
        "el "
      ],
      [
        "indices",
        ".\r\n"
      ],
      [
        "correspon",
        "d"
      ],
      [
        "'1",
        "'s "
      ],
      [
        "'0",
        "'"
      ],
      [
        "Choo",
        "se the "
      ],
      [
        "man",
        "a "
      ],
      [
        "achiev",
        "e the "
      ],
      [
        "            # Check ",
        "if the "
      ],
      [
        "for _ in range(",
        "n)]\r\n"
      ],
      [
        "# class ",
        "ListNode:\r\n"
      ],
      [
        "Mo",
        "ves"
      ],
      [
        "Tri",
        "e"
      ],
      [
        "s. It ",
        "then "
      ],
      [
        "in-",
        "place "
      ],
      [
        "convert",
        "s the "
      ],
      [
        "interse",
        "ction "
      ],
      [
        "dp ",
        "array "
      ],
      [
        "is defin",
        "ed as "
      ],
      [
        "total cost ",
        "is "
      ],
      [
        "This code ",
        "defines a "
      ],
      [
        "Recursi",
        "vely "
      ],
      [
        "according",
        "ly.\r\n"
      ],
      [
        "boo",
        "le"
      ],
      [
        "modulo \\(10^9 + 7",
        "\\).\r\n"
      ],
      [
        "Dep",
        "th-First Search "
      ],
      [
        "Mar",
        "k the "
      ],
      [
        "mut",
        "ation"
      ],
      [
        "bul",
        "b"
      ],
      [
        "        left = ",
        "0\r\n"
      ],
      [
        "maximum and ",
        "minimum "
      ],
      [
        "            mid = (left + right",
        ") // 2\r\n"
      ],
      [
        "We",
        "'ll "
      ],
      [
        "singly-",
        "linked list.\r\n"
      ],
      [
        "# Definition for ",
        "singly-linked list.\r\n"
      ],
      [
        "(",
        "a "
      ],
      [
        ")",
        ". The "
      ],
      [
        "+",
        "1"
      ],
      [
        ".",
        "\"],[\""
      ],
      [
        "2",
        "\",\""
      ],
      [
        "3",
        "6"
      ],
      [
        "5",
        "."
      ],
      [
        "7",
        "].\r\n"
      ],
      [
        "S",
        "C"
      ],
      [
        "S",
        "h"
      ],
      [
        "S",
        "et"
      ],
      [
        "[",
        "b"
      ],
      [
        "`",
        "start"
      ],
      [
        "`",
        "(i, j"
      ],
      [
        "b",
        "f"
      ],
      [
        "b",
        "ran"
      ],
      [
        "i",
        "] "
      ],
      [
        "p",
        "on"
      ],
      [
        "s",
        "[i][j] "
      ],
      [
        "s",
        ":\\r\r\n"
      ],
      [
        "t",
        "_"
      ],
      [
        "y",
        ")\r\n"
      ],
      [
        "re",
        "cor"
      ],
      [
        "in ",
        "which "
      ],
      [
        "- ",
        "\""
      ],
      [
        "- ",
        "Swap "
      ],
      [
        "ac",
        "count"
      ],
      [
        "ac",
        "ces"
      ],
      [
        "m ",
        "- 1, "
      ],
      [
        "The ",
        "second "
      ],
      [
        "In",
        "stea"
      ],
      [
        "Output: ",
        "4"
      ],
      [
        "lo",
        "se"
      ],
      [
        "number ",
        "that "
      ],
      [
        "0 ",
        "degre"
      ],
      [
        "[i] ",
        "!= "
      ],
      [
        "[i] ",
        "<= 105\r\n"
      ],
      [
        "com",
        "e "
      ],
      [
        "with ",
        "no "
      ],
      [
        "                    ",
        "dp[i][j] = "
      ],
      [
        "sib",
        "ility "
      ],
      [
        "be",
        "low "
      ],
      [
        "        return ",
        "self."
      ],
      [
        "-1",
        "], "
      ],
      [
        "\", ",
        "k = 2\r\n"
      ],
      [
        "0, ",
        "0, "
      ],
      [
        "id",
        "x"
      ],
      [
        "sequen",
        "ce.\r\n"
      ],
      [
        "] = ",
        "0\r\n"
      ],
      [
        "oo",
        "d"
      ],
      [
        "gre",
        "en "
      ],
      [
        "with the ",
        "given "
      ],
      [
        "Output: [",
        "["
      ],
      [
        "result ",
        "is the "
      ],
      [
        "prob",
        "ability "
      ],
      [
        "target",
        "_"
      ],
      [
        "function ",
        "`"
      ],
      [
        "comp",
        "lement "
      ],
      [
        "heap",
        "\r\n"
      ],
      [
        "non-",
        "increasing "
      ],
      [
        "starting ",
        "point "
      ],
      [
        "at the ",
        "end"
      ],
      [
        "Input: n = ",
        "1\r\n"
      ],
      [
        "zero",
        "_"
      ],
      [
        "` to ",
        "keep track of the "
      ],
      [
        "queries",
        "[i] = ["
      ],
      [
        "1 <= n ",
        "<= 100\r\n"
      ],
      [
        "namic ",
        "Pro"
      ],
      [
        "strings ",
        "word"
      ],
      [
        "'a",
        "', '"
      ],
      [
        "query ",
        "is "
      ],
      [
        "constru",
        "ct "
      ],
      [
        "i and ",
        "j "
      ],
      [
        "occur",
        " "
      ],
      [
        "In the ",
        "second "
      ],
      [
        "fil",
        "ter"
      ],
      [
        "(0, 0",
        ") "
      ],
      [
        "starts ",
        "at "
      ],
      [
        "any number of ",
        "times:\r\n"
      ],
      [
        "inclusi",
        "ve "
      ],
      [
        ". In ",
        "one "
      ],
      [
        "        # Step ",
        "1: "
      ],
      [
        "pea",
        "k"
      ],
      [
        "_sum = ",
        "sum("
      ],
      [
        "lc",
        "m"
      ],
      [
        "necess",
        "ary "
      ],
      [
        "Here's the implementation of the ",
        "above approach:\r\n"
      ],
      [
        "ug",
        "ly "
      ],
      [
        "bel",
        "ong"
      ],
      [
        "priority ",
        "queue "
      ],
      [
        "set = ",
        "set("
      ],
      [
        "Here's the complete ",
        "solution:\r\n"
      ],
      [
        "fewer ",
        "than "
      ],
      [
        "olo",
        "gical "
      ],
      [
        "time complexity of this ",
        "solution is "
      ],
      [
        "dx, d",
        "y in "
      ],
      [
        "Dy",
        "namic Pro"
      ],
      [
        "nei",
        "ther "
      ],
      [
        "Depth-First Search ",
        "(DFS"
      ],
      [
        "Dynamic Pro",
        "gram"
      ],
      [
        "'",
        "?"
      ],
      [
        "(",
        "1 "
      ],
      [
        "(",
        "arr"
      ],
      [
        "*",
        "= "
      ],
      [
        ".",
        " \r\n"
      ],
      [
        "0",
        ". "
      ],
      [
        "6",
        "]]\r\n"
      ],
      [
        ":",
        "** "
      ],
      [
        "A",
        "t the "
      ],
      [
        "D",
        "ur"
      ],
      [
        "S",
        "k"
      ],
      [
        "W",
        "\",\""
      ],
      [
        "]",
        ") -> "
      ],
      [
        "c",
        ".\r\n"
      ],
      [
        "c",
        "ard "
      ],
      [
        "g",
        "ir"
      ],
      [
        "q",
        " = "
      ],
      [
        "s",
        "al"
      ],
      [
        "s",
        ")):\r\n"
      ],
      [
        " ",
        "<= "
      ],
      [
        "th",
        "i"
      ],
      [
        "= ",
        "3\r\n"
      ],
      [
        "st",
        "ers "
      ],
      [
        "num",
        "s of "
      ],
      [
        "ch",
        "un"
      ],
      [
        "de",
        "d"
      ],
      [
        "er ",
        "is "
      ],
      [
        "am",
        "ong the "
      ],
      [
        "an ",
        "odd "
      ],
      [
        "it",
        "ation"
      ],
      [
        "of the ",
        "approach:\r\n"
      ],
      [
        "wh",
        "ole "
      ],
      [
        "` ",
        "class "
      ],
      [
        "        # ",
        "Re"
      ],
      [
        "        # ",
        "Count "
      ],
      [
        "each ",
        "character "
      ],
      [
        "for",
        "ward"
      ],
      [
        "char",
        "_count["
      ],
      [
        "ir",
        "e "
      ],
      [
        "all ",
        "numbers "
      ],
      [
        "node",
        "s, "
      ],
      [
        "s, ",
        "and the "
      ],
      [
        "end",
        "ing_"
      ],
      [
        "t = ",
        "0\r\n"
      ],
      [
        "string",
        "s.\r\n"
      ],
      [
        "string",
        "s are "
      ],
      [
        "\" ",
        "can be "
      ],
      [
        "par",
        "t of "
      ],
      [
        "row",
        "s and "
      ],
      [
        "**: ",
        "Finally"
      ],
      [
        "id",
        "x "
      ],
      [
        "), ",
        "which is "
      ],
      [
        "us",
        "_"
      ],
      [
        "no ",
        "two "
      ],
      [
        "no ",
        "such "
      ],
      [
        "pair",
        "s\r\n"
      ],
      [
        "element ",
        "of the "
      ],
      [
        "elements ",
        "within "
      ],
      [
        "represent",
        "ed by a "
      ],
      [
        "Input: nums = [",
        "1,3,"
      ],
      [
        ", the ",
        "answer is "
      ],
      [
        "gre",
        "edy "
      ],
      [
        "with the ",
        "minimum "
      ],
      [
        "stac",
        "k\r\n"
      ],
      [
        "\"ab",
        "a"
      ],
      [
        "root",
        "ed at "
      ],
      [
        "do",
        "g"
      ],
      [
        "sum of ",
        "a "
      ],
      [
        "word ",
        "= \""
      ],
      [
        ". It ",
        "keeps track of the "
      ],
      [
        "integers ",
        "in "
      ],
      [
        "cell",
        "s.\r\n"
      ],
      [
        "start ",
        "+ "
      ],
      [
        "1) ",
        "+ "
      ],
      [
        "remov",
        "es "
      ],
      [
        "Input: n = ",
        "2\r\n"
      ],
      [
        "next",
        "=None):\r\n"
      ],
      [
        "day",
        ".\r\n"
      ],
      [
        "following ",
        "rules:\r\n"
      ],
      [
        "root ",
        "of the "
      ],
      [
        "mid",
        "):\r\n"
      ],
      [
        "English letter",
        "s.\r\n"
      ],
      [
        "dp[",
        "j"
      ],
      [
        "exist",
        "s a "
      ],
      [
        "shown ",
        "in the "
      ],
      [
        "height ",
        "of "
      ],
      [
        "-10",
        "4 <= "
      ],
      [
        "case",
        "s "
      ],
      [
        "Output: 1",
        "3\r\n"
      ],
      [
        "without ",
        "changing the "
      ],
      [
        "mak",
        "ing the "
      ],
      [
        "distance",
        ", "
      ],
      [
        "respec",
        "tive "
      ],
      [
        "freq",
        " = "
      ],
      [
        "connect",
        "ed to "
      ],
      [
        "top ",
        "of the "
      ],
      [
        "linked ",
        "list"
      ],
      [
        "        for i in range(1, ",
        "n + 1):\r\n"
      ],
      [
        "subsequences ",
        "of "
      ],
      [
        "An",
        "sw"
      ],
      [
        "You are given an integer array ",
        "nums and "
      ],
      [
        "Numb",
        "er of "
      ],
      [
        "Sort",
        "ing"
      ],
      [
        "exp",
        "ected "
      ],
      [
        "seen",
        "_"
      ],
      [
        "guarante",
        "ed to be "
      ],
      [
        "subtre",
        "e\r\n"
      ],
      [
        "#     def __init__(self, val=0, ",
        "next=None):\r\n"
      ],
      [
        "queries = [",
        "[0,"
      ],
      [
        "= [0] ",
        "* "
      ],
      [
        "Leng",
        "th "
      ],
      [
        "cha",
        "ir"
      ],
      [
        "abo",
        "ve"
      ],
      [
        "Inde",
        "x"
      ],
      [
        "processing ",
        "all "
      ],
      [
        "pref",
        "er"
      ],
      [
        "Alice",
        "'s "
      ],
      [
        "a and ",
        "b "
      ],
      [
        "This solution uses dynamic programming to ",
        "solve the problem"
      ],
      [
        "plit ",
        "the "
      ],
      [
        "favor",
        "ite"
      ],
      [
        "Char",
        "ac"
      ],
      [
        "significan",
        "t "
      ],
      [
        "max-",
        "heap "
      ],
      [
        "}, ",
        "{"
      ],
      [
        "(nx, n",
        "y"
      ],
      [
        "pai",
        "red "
      ],
      [
        "lang",
        "u"
      ],
      [
        "sq",
        "rt"
      ],
      [
        "occup",
        "i"
      ],
      [
        "#         self.next = ",
        "next\r\n"
      ],
      [
        "\"",
        "\\r\r\n"
      ],
      [
        "'",
        "("
      ],
      [
        "+",
        "+"
      ],
      [
        "1",
        "\", \""
      ],
      [
        "1",
        "2.\r\n"
      ],
      [
        "3",
        "), ("
      ],
      [
        "6",
        ". "
      ],
      [
        "6",
        "].\r\n"
      ],
      [
        "7",
        "]]\r\n"
      ],
      [
        "B",
        "ar"
      ],
      [
        "F",
        "F"
      ],
      [
        "R",
        "ight"
      ],
      [
        "[",
        "3], "
      ],
      [
        "`",
        "t"
      ],
      [
        "b",
        "ro"
      ],
      [
        "c",
        "a"
      ],
      [
        "c",
        " in range("
      ],
      [
        "e",
        "f "
      ],
      [
        "f",
        "its "
      ],
      [
        "g",
        "ar"
      ],
      [
        "i",
        ".e. "
      ],
      [
        "l",
        " = "
      ],
      [
        "q",
        ".append("
      ],
      [
        "s ",
        "from the "
      ],
      [
        "re",
        "cur"
      ],
      [
        "al",
        "ong the "
      ],
      [
        "is ",
        "["
      ],
      [
        "se",
        "mi"
      ],
      [
        "de",
        "l"
      ],
      [
        "co",
        "ver "
      ],
      [
        "            ",
        "current = "
      ],
      [
        "if ",
        "you "
      ],
      [
        "The ",
        "longest "
      ],
      [
        "fro",
        "g "
      ],
      [
        "` ",
        "pointer "
      ],
      [
        "k ",
        "+ 1):\r\n"
      ],
      [
        "pre",
        "order"
      ],
      [
        "ed",
        "u"
      ],
      [
        "        # ",
        "dp"
      ],
      [
        ". The ",
        "`dp` "
      ],
      [
        "array",
        "s.\r\n"
      ],
      [
        "s = ",
        "{"
      ],
      [
        "3 ",
        "-> "
      ],
      [
        "mov",
        "es.\r\n"
      ],
      [
        "current ",
        "index "
      ],
      [
        "current ",
        "element "
      ],
      [
        "current ",
        "character "
      ],
      [
        "you ",
        "must "
      ],
      [
        "has ",
        "length "
      ],
      [
        "0 <= ",
        "ai, b"
      ],
      [
        "s and ",
        "then "
      ],
      [
        "Input: nums = [",
        "2,3,"
      ],
      [
        "            return ",
        "count\r\n"
      ],
      [
        "follow",
        "s the "
      ],
      [
        "j] ",
        "+ "
      ],
      [
        "tree ",
        "and "
      ],
      [
        "for the ",
        "next "
      ],
      [
        "indices ",
        "of the "
      ],
      [
        "order ",
        "to "
      ],
      [
        "range ",
        "of "
      ],
      [
        "1) ",
        "/ "
      ],
      [
        ".length <= ",
        "50\r\n"
      ],
      [
        "path",
        "\r\n"
      ],
      [
        "`nums",
        "`.\r\n"
      ],
      [
        "node.",
        "val "
      ],
      [
        "answer",
        "\r\n"
      ],
      [
        "Return ",
        "an integer "
      ],
      [
        "pr",
        "int"
      ],
      [
        "aa",
        "aa"
      ],
      [
        "s of the ",
        "same "
      ],
      [
        "there is ",
        "an edge between "
      ],
      [
        "time",
        "stamp"
      ],
      [
        "clo",
        "sed "
      ],
      [
        "some ",
        "number of "
      ],
      [
        "This solution uses a ",
        "depth-first search (DFS) "
      ],
      [
        "[j",
        " - "
      ],
      [
        "2,2,",
        "2,2,"
      ],
      [
        "1 <= nums[i] ",
        "<= 105\r\n"
      ],
      [
        "prime ",
        "number "
      ],
      [
        "True",
        "`"
      ],
      [
        "column",
        ".\r\n"
      ],
      [
        "sim",
        "ply "
      ],
      [
        "        for i in range(1, ",
        "len("
      ],
      [
        ". The `",
        "dfs` function "
      ],
      [
        "        return max_",
        "length\r\n"
      ],
      [
        "        result ",
        "= ["
      ],
      [
        "initializ",
        "e a "
      ],
      [
        "char in ",
        "enumerate("
      ],
      [
        "so",
        "_"
      ],
      [
        "k-",
        "th "
      ],
      [
        "mapp",
        "ing "
      ],
      [
        "Incre",
        "ment the "
      ],
      [
        "stam",
        "p "
      ],
      [
        "        # Step ",
        "2: "
      ],
      [
        "LC",
        "A "
      ],
      [
        "list(",
        "range("
      ],
      [
        "leverag",
        "ing the "
      ],
      [
        "        an",
        "s = []\r\n"
      ],
      [
        "Ke",
        "y"
      ],
      [
        "qual",
        "ity "
      ],
      [
        "finish",
        " the "
      ],
      [
        "xor",
        "_"
      ],
      [
        "sta",
        "ir "
      ],
      [
        "Here's the implementation of the ",
        "solution:\r\n"
      ],
      [
        "In one ",
        "operation, you can "
      ],
      [
        "nums1 and nums",
        "2 "
      ],
      [
        "2 * 10",
        "5\r\n"
      ],
      [
        "toge",
        "ther"
      ],
      [
        "Cre",
        "ate a "
      ],
      [
        "        i = ",
        "0\r\n"
      ],
      [
        ".items(",
        "):\r\n"
      ],
      [
        "        for u, ",
        "v in "
      ],
      [
        "        \"",
        "\"\"\r\n"
      ],
      [
        "sand",
        "wi"
      ],
      [
        "bro",
        "k"
      ],
      [
        "\"",
        "]], "
      ],
      [
        "(",
        "i, "
      ],
      [
        ")",
        ": "
      ],
      [
        ")",
        "))\r\n"
      ],
      [
        ".",
        "val"
      ],
      [
        "2",
        "\"\r\n"
      ],
      [
        "2",
        ". We "
      ],
      [
        "5",
        ". "
      ],
      [
        "5",
        ") "
      ],
      [
        "8",
        "8"
      ],
      [
        "I",
        "D "
      ],
      [
        "T",
        "e"
      ],
      [
        "V",
        "i"
      ],
      [
        "W",
        "ord "
      ],
      [
        "]",
        "`.\r\n"
      ],
      [
        "a",
        ".\r\n"
      ],
      [
        "a",
        "fter"
      ],
      [
        "e",
        "di"
      ],
      [
        "h",
        "am"
      ],
      [
        "k",
        "th"
      ],
      [
        "m",
        "in "
      ],
      [
        "m",
        "aliz"
      ],
      [
        "m",
        "irr"
      ],
      [
        "p",
        "let"
      ],
      [
        "s",
        "pre"
      ],
      [
        "s",
        "' "
      ],
      [
        "w",
        "ra"
      ],
      [
        "}",
        ".\r\n"
      ],
      [
        "        ",
        "left_"
      ],
      [
        "s ",
        "into "
      ],
      [
        "= ",
        "False\r\n"
      ],
      [
        "re",
        "staur"
      ],
      [
        "            ",
        "prefix_sum"
      ],
      [
        "ing ",
        "it "
      ],
      [
        ". ",
        "When "
      ],
      [
        "at",
        "ed by "
      ],
      [
        "Th",
        "us, the "
      ],
      [
        "an ",
        "integer"
      ],
      [
        "len",
        " = "
      ],
      [
        "- ",
        "For "
      ],
      [
        "Input: ",
        "num"
      ],
      [
        "` ",
        "("
      ],
      [
        "k ",
        "- 1"
      ],
      [
        "sub",
        "seq"
      ],
      [
        "length ",
        "+= 1\r\n"
      ],
      [
        "mo",
        "d "
      ],
      [
        "        # ",
        "Process "
      ],
      [
        "in the ",
        "given "
      ],
      [
        "array ",
        "nums "
      ],
      [
        "array ",
        "becomes "
      ],
      [
        "as ",
        "we "
      ],
      [
        "sh",
        "are "
      ],
      [
        "sh",
        "ip"
      ],
      [
        "Explanation: ",
        "All "
      ],
      [
        "with ",
        "each "
      ],
      [
        "low",
        " = "
      ],
      [
        "node",
        "s\r\n"
      ],
      [
        "\",\"",
        "d"
      ],
      [
        ". The ",
        "resulting "
      ],
      [
        "whi",
        "ch the "
      ],
      [
        "be",
        "t"
      ],
      [
        "be",
        "an"
      ],
      [
        "count",
        ".\r\n"
      ],
      [
        "sum ",
        "+ "
      ],
      [
        ", we ",
        "have "
      ],
      [
        "tra",
        "ver"
      ],
      [
        "-1",
        "],["
      ],
      [
        "3 ",
        "("
      ],
      [
        "ic",
        "al "
      ],
      [
        "0, ",
        "1, and "
      ],
      [
        "so ",
        "return "
      ],
      [
        "length",
        "s "
      ],
      [
        "length",
        "s of "
      ],
      [
        "point",
        "s to "
      ],
      [
        "] = ",
        "1\r\n"
      ],
      [
        "cre",
        "ator"
      ],
      [
        "will ",
        "always "
      ],
      [
        "s that ",
        "have "
      ],
      [
        "+ 1",
        ")]\r\n"
      ],
      [
        "represent",
        "ation of the "
      ],
      [
        "s and ",
        "t "
      ],
      [
        "s[i] ",
        "!= "
      ],
      [
        "conta",
        "in the "
      ],
      [
        "numbers ",
        "that "
      ],
      [
        "divi",
        "des "
      ],
      [
        "dire",
        "ct "
      ],
      [
        "word ",
        "in the "
      ],
      [
        "contain",
        "s a "
      ],
      [
        "score ",
        "= "
      ],
      [
        "ust ",
        "the "
      ],
      [
        "2],[",
        "4,"
      ],
      [
        "` and ",
        "`nums2"
      ],
      [
        "add",
        "s "
      ],
      [
        "[1, ",
        "2, 3, "
      ],
      [
        "Return ",
        "an integer array "
      ],
      [
        "condition",
        ".\r\n"
      ],
      [
        "decre",
        "ment"
      ],
      [
        "operation ",
        "on "
      ],
      [
        "cle",
        "an"
      ],
      [
        "Val",
        "id"
      ],
      [
        "        # C",
        "om"
      ],
      [
        "sign",
        "ed "
      ],
      [
        "of",
        "f "
      ],
      [
        "**: The ",
        "`"
      ],
      [
        "This solution efficiently ",
        "finds the "
      ],
      [
        "This solution efficiently ",
        "computes the "
      ],
      [
        "prime",
        "_"
      ],
      [
        "achiev",
        "able "
      ],
      [
        "Com",
        "put"
      ],
      [
        "that",
        ", "
      ],
      [
        "--",
        "--"
      ],
      [
        "ance",
        "stor "
      ],
      [
        "stic",
        "k "
      ],
      [
        "candid",
        "ates"
      ],
      [
        "twi",
        "ce"
      ],
      [
        "forma",
        "t "
      ],
      [
        "distrib",
        "ute "
      ],
      [
        "tiv",
        "e.\r\n"
      ],
      [
        "x + ",
        "dx, "
      ],
      [
        "Quer",
        "y "
      ],
      [
        "once",
        ", "
      ],
      [
        "peri",
        "o"
      ],
      [
        "heal",
        "th"
      ],
      [
        "Siz",
        "e"
      ],
      [
        "Input: num = ",
        "\""
      ],
      [
        "compres",
        "sed "
      ],
      [
        "'c",
        "' "
      ],
      [
        "gard",
        "en"
      ],
      [
        "rat",
        "ing"
      ],
      [
        "rin",
        "k"
      ],
      [
        "trailing ",
        "zero"
      ],
      [
        "enem",
        "y "
      ],
      [
        ".is",
        "digit"
      ],
      [
        "break",
        "down "
      ],
      [
        "pen",
        "al"
      ],
      [
        ". It can be ",
        "shown that "
      ],
      [
        "continues ",
        "until "
      ],
      [
        "strateg",
        "y "
      ],
      [
        "dama",
        "ge "
      ],
      [
        "bisect_left",
        "("
      ],
      [
        "Inser",
        "t "
      ],
      [
        "shor",
        "ter "
      ],
      [
        "i.e.",
        ", "
      ],
      [
        "iden",
        "tical "
      ],
      [
        "networ",
        "k "
      ],
      [
        "elements within ",
        "an array.\r\n"
      ],
      [
        "\"",
        "]"
      ],
      [
        "'",
        "R"
      ],
      [
        "'",
        "d"
      ],
      [
        "-",
        "hour "
      ],
      [
        "1",
        "1\r\n"
      ],
      [
        "1",
        "))\r\n"
      ],
      [
        "1",
        "\".\r\n"
      ],
      [
        "2",
        "5 "
      ],
      [
        "9",
        " and "
      ],
      [
        "D",
        "o "
      ],
      [
        "R",
        "o"
      ],
      [
        "T",
        "ree "
      ],
      [
        "[",
        "8,"
      ],
      [
        "[",
        "2] = "
      ],
      [
        "_",
        "size "
      ],
      [
        "`",
        "m"
      ],
      [
        "e",
        "mail"
      ],
      [
        "p",
        "et"
      ],
      [
        "s",
        "**:\r\n"
      ],
      [
        "u",
        " "
      ],
      [
        "        ",
        "word"
      ],
      [
        "er",
        "\r\n"
      ],
      [
        "= ",
        "True\r\n"
      ],
      [
        "re",
        "a"
      ],
      [
        "re",
        "g"
      ],
      [
        ": ",
        "Optional[ListNode"
      ],
      [
        "of ",
        "node "
      ],
      [
        "num",
        ":\r\n"
      ],
      [
        "se",
        "s"
      ],
      [
        "in ",
        "that "
      ],
      [
        "in ",
        "its "
      ],
      [
        "- ",
        "("
      ],
      [
        "                ",
        "dfs("
      ],
      [
        "The ",
        "only "
      ],
      [
        "max",
        "Sum"
      ],
      [
        "= [",
        "0,"
      ],
      [
        "Input: ",
        "s1 = "
      ],
      [
        "k ",
        "* "
      ],
      [
        "it ",
        "in "
      ],
      [
        "mo",
        "st"
      ],
      [
        "        # ",
        "Use a "
      ],
      [
        "2 ",
        "is the "
      ],
      [
        "i ",
        "in "
      ],
      [
        "i ",
        "> "
      ],
      [
        "i ",
        "in the "
      ],
      [
        "per",
        "ime"
      ],
      [
        "[i] ",
        "< "
      ],
      [
        "com",
        "es "
      ],
      [
        "ex",
        "peri"
      ],
      [
        "with ",
        "sum "
      ],
      [
        "all ",
        "valid "
      ],
      [
        "s = [",
        "[2,"
      ],
      [
        "bo",
        "mb"
      ],
      [
        "\",\"",
        "E"
      ],
      [
        "                    ",
        "\r\n"
      ],
      [
        "                    ",
        "else:\r\n"
      ],
      [
        "                    ",
        "result.append("
      ],
      [
        "end",
        "\r\n"
      ],
      [
        "to the ",
        "first "
      ],
      [
        "        return ",
        "min("
      ],
      [
        ", and ",
        "a "
      ],
      [
        "import ",
        "math"
      ],
      [
        "s = ",
        "len("
      ],
      [
        "0, ",
        "the "
      ],
      [
        "current",
        "ly "
      ],
      [
        "point",
        "\r\n"
      ],
      [
        "node ",
        "and "
      ],
      [
        "will ",
        "have "
      ],
      [
        "s[",
        "2] "
      ],
      [
        "position",
        ", "
      ],
      [
        "grid",
        "[i][j"
      ],
      [
        "            return ",
        "max_"
      ],
      [
        "right ",
        "-= 1\r\n"
      ],
      [
        "s in ",
        "this "
      ],
      [
        "binary ",
        "matrix "
      ],
      [
        "binary ",
        "search"
      ],
      [
        "5 ",
        "* 10"
      ],
      [
        "order",
        ", "
      ],
      [
        "and",
        " "
      ],
      [
        "set",
        "\r\n"
      ],
      [
        "matri",
        "x, "
      ],
      [
        "op",
        "en "
      ],
      [
        "ori",
        "g"
      ],
      [
        "divi",
        "de the "
      ],
      [
        "digit",
        "s\r\n"
      ],
      [
        "Coun",
        "ting "
      ],
      [
        "[0] ",
        "== "
      ],
      [
        "        def ",
        "dp("
      ],
      [
        "remov",
        "e("
      ],
      [
        "grid ",
        "is "
      ],
      [
        "next ",
        "greater "
      ],
      [
        ". This ",
        "helps in "
      ],
      [
        "substring ",
        "is "
      ],
      [
        "proces",
        "ses "
      ],
      [
        "1 + ",
        "1 = "
      ],
      [
        "Alice ",
        "win"
      ],
      [
        "these ",
        "two "
      ],
      [
        "s_",
        "list"
      ],
      [
        "ally",
        ", the "
      ],
      [
        "hand",
        "les "
      ],
      [
        "Al",
        "so"
      ],
      [
        "conver",
        "t the "
      ],
      [
        ") for ",
        "i in range("
      ],
      [
        "run",
        "s in "
      ],
      [
        "dictionary ",
        "`"
      ],
      [
        "trans",
        "form "
      ],
      [
        "else ",
        "0\r\n"
      ],
      [
        "[3,",
        "1,"
      ],
      [
        "'0",
        "' or "
      ],
      [
        "price ",
        "of "
      ],
      [
        "att",
        "emp"
      ],
      [
        "Pro",
        "du"
      ],
      [
        "rang",
        "es "
      ],
      [
        "# print(sol.",
        "min"
      ],
      [
        "                    return ",
        "True\r\n"
      ],
      [
        "num_",
        "str"
      ],
      [
        "dur",
        "ation"
      ],
      [
        "not",
        ".\r\n"
      ],
      [
        "proper",
        "ties"
      ],
      [
        "simul",
        "ate the "
      ],
      [
        "Tri",
        "e "
      ],
      [
        "checking ",
        "if the "
      ],
      [
        "head",
        ": Optional[ListNode"
      ],
      [
        "maintain",
        "ing a "
      ],
      [
        "-2,",
        "-"
      ],
      [
        "_count = ",
        "defaultdict(int)\r\n"
      ],
      [
        "buc",
        "ket "
      ],
      [
        "Union",
        "Find"
      ],
      [
        "half ",
        "of the "
      ],
      [
        "non-negative ",
        "integer "
      ],
      [
        "method ",
        "`"
      ],
      [
        "floor",
        "("
      ],
      [
        "based on ",
        "their "
      ],
      [
        "X\",\"",
        "X\",\""
      ],
      [
        "l, ",
        "r"
      ],
      [
        "piv",
        "ot "
      ],
      [
        "        for char in ",
        "s:\r\n"
      ],
      [
        "properties ",
        "of "
      ],
      [
        "true ",
        "if the "
      ],
      [
        "fea",
        "sible "
      ],
      [
        "simultane",
        "ous"
      ],
      [
        "), (1, 0",
        "), (0, -1"
      ],
      [
        "More ",
        "form"
      ],
      [
        "gar",
        "b"
      ],
      [
        "import math",
        "\r\n"
      ],
      [
        "\"",
        "d"
      ],
      [
        "(",
        "r"
      ],
      [
        ")",
        "("
      ],
      [
        "2",
        "0.\r\n"
      ],
      [
        "5",
        ", and "
      ],
      [
        "9",
        "0"
      ],
      [
        "C",
        "an"
      ],
      [
        "D",
        "is"
      ],
      [
        "H",
        "H"
      ],
      [
        "I",
        "P"
      ],
      [
        "L",
        "ist "
      ],
      [
        "[",
        "] "
      ],
      [
        "`",
        ", it "
      ],
      [
        "b",
        "\", "
      ],
      [
        "b",
        "id"
      ],
      [
        "e",
        "u"
      ],
      [
        "e",
        "\" "
      ],
      [
        "s",
        ":"
      ],
      [
        "s",
        "\",\""
      ],
      [
        "v",
        "ir"
      ],
      [
        " ",
        "is "
      ],
      [
        "s ",
        "on "
      ],
      [
        "st",
        "u"
      ],
      [
        "st",
        "ay"
      ],
      [
        "an ",
        "index "
      ],
      [
        "ed ",
        "from the "
      ],
      [
        "- ",
        "["
      ],
      [
        "                ",
        "next_"
      ],
      [
        "ac",
        "tion "
      ],
      [
        "nums",
        "[0]\r\n"
      ],
      [
        "po",
        "s, "
      ],
      [
        "gh",
        "i"
      ],
      [
        "for ",
        "fre"
      ],
      [
        "that ",
        "has "
      ],
      [
        "that ",
        "is not "
      ],
      [
        "= [",
        "[1,"
      ],
      [
        "        # ",
        "Try "
      ],
      [
        "from ",
        "a "
      ],
      [
        "sh",
        "el"
      ],
      [
        "<= 10",
        "8\r\n"
      ],
      [
        "ce",
        "il"
      ],
      [
        "Re",
        "pe"
      ],
      [
        "        return ",
        "sum("
      ],
      [
        "            if ",
        "index "
      ],
      [
        "5,",
        "7,"
      ],
      [
        "arr",
        " = ["
      ],
      [
        "so ",
        "we "
      ],
      [
        "operation",
        "s are "
      ],
      [
        "to",
        "-"
      ],
      [
        "point",
        "s, "
      ],
      [
        "point",
        "s are "
      ],
      [
        "node ",
        "to "
      ],
      [
        "node ",
        "with value "
      ],
      [
        "ph",
        "ra"
      ],
      [
        "position",
        "s of the "
      ],
      [
        "there ",
        "exists a "
      ],
      [
        "pair",
        " is "
      ],
      [
        "elements ",
        "from "
      ],
      [
        "s: ",
        "List[str], "
      ],
      [
        "6,",
        "8,"
      ],
      [
        "ori",
        "es"
      ],
      [
        "edge",
        "s[i].length == 2\r\n"
      ],
      [
        "after ",
        "each "
      ],
      [
        "Not",
        "e "
      ],
      [
        "sorted ",
        "list of "
      ],
      [
        "[0,",
        "1,2,"
      ],
      [
        "colum",
        "n, "
      ],
      [
        "day",
        ", "
      ],
      [
        "ei",
        "ther the "
      ],
      [
        "Chec",
        "k the "
      ],
      [
        "problem",
        ".\r\n"
      ],
      [
        "node.",
        "val"
      ],
      [
        "height",
        "s "
      ],
      [
        "Return ",
        "a "
      ],
      [
        "s[i]",
        ".length == 3\r\n"
      ],
      [
        "exist",
        "s, return "
      ],
      [
        ", so ",
        "return "
      ],
      [
        "lowercase English letter",
        "s and "
      ],
      [
        "stack",
        ":\r\n"
      ],
      [
        "`n",
        "`.\r\n"
      ],
      [
        "ni",
        "ce "
      ],
      [
        "gener",
        "ates "
      ],
      [
        "operation ",
        "on the "
      ],
      [
        "product ",
        "of the "
      ],
      [
        "On",
        "ce "
      ],
      [
        "continu",
        "e "
      ],
      [
        "pic",
        "k"
      ],
      [
        "sk",
        "ip "
      ],
      [
        "sk",
        "ill "
      ],
      [
        "rot",
        "ation"
      ],
      [
        "room",
        "s "
      ],
      [
        "        dp",
        "[0] = "
      ],
      [
        "area ",
        "of the "
      ],
      [
        "ba",
        "d "
      ],
      [
        "fe",
        "ature"
      ],
      [
        "(i.e.",
        ", the "
      ],
      [
        "redu",
        "ces "
      ],
      [
        "algorithm ",
        "to find the "
      ],
      [
        "false",
        ","
      ],
      [
        "leetcode",
        ".com"
      ],
      [
        "5,6",
        "],["
      ],
      [
        "wri",
        "te "
      ],
      [
        "spe",
        "ed"
      ],
      [
        "len(s",
        ")):\r\n"
      ],
      [
        "amount of ",
        "money "
      ],
      [
        "s consists of ",
        "lowercase English letters.\r\n"
      ],
      [
        "represents a ",
        "valid "
      ],
      [
        "exclu",
        "ding the "
      ],
      [
        "excep",
        "t the "
      ],
      [
        "according",
        "ly"
      ],
      [
        "easi",
        "er "
      ],
      [
        "sam",
        "e.\r\n"
      ],
      [
        "edges = [[0,",
        "1],[0,"
      ],
      [
        "each other",
        ".\r\n"
      ],
      [
        "maz",
        "e"
      ],
      [
        "key=lambda x: ",
        "x"
      ],
      [
        "Follow up: ",
        "Could you "
      ],
      [
        "oper",
        "ator"
      ],
      [
        "ware",
        "house"
      ],
      [
        "- T",
        "ake "
      ],
      [
        "Ener",
        "g"
      ],
      [
        "* (n + 1",
        ") for _ in range("
      ],
      [
        "Python ",
        "code "
      ],
      [
        "return the answer ",
        "in any order.\r\n"
      ],
      [
        "mach",
        "in"
      ],
      [
        "so_",
        "far"
      ],
      [
        "x + dx, ",
        "y + "
      ],
      [
        "0",
        "'"
      ],
      [
        "1",
        "5, "
      ],
      [
        "2",
        "+"
      ],
      [
        "2",
        "x"
      ],
      [
        "3",
        "+"
      ],
      [
        "A",
        "G"
      ],
      [
        "A",
        "fter"
      ],
      [
        "H",
        "ea"
      ],
      [
        "T",
        "rans"
      ],
      [
        "W",
        "or"
      ],
      [
        "X",
        "-"
      ],
      [
        "g",
        "ap"
      ],
      [
        "h",
        "er "
      ],
      [
        "i",
        "-th "
      ],
      [
        "m",
        "me"
      ],
      [
        "n",
        "-1"
      ],
      [
        "t",
        "ran"
      ],
      [
        "v",
        "o"
      ],
      [
        "w",
        "ea"
      ],
      [
        "y",
        ":\r\n"
      ],
      [
        "th",
        "es"
      ],
      [
        "in",
        "s "
      ],
      [
        "on",
        "ge"
      ],
      [
        "ar",
        "y, "
      ],
      [
        "is ",
        "("
      ],
      [
        "is ",
        "greater than "
      ],
      [
        "is ",
        "equal to the "
      ],
      [
        "num",
        "s are "
      ],
      [
        "le",
        "_"
      ],
      [
        "ch",
        "am"
      ],
      [
        "se",
        "cur"
      ],
      [
        "co",
        "prime "
      ],
      [
        "or ",
        "false otherwise.\r\n"
      ],
      [
        "in ",
        "reverse "
      ],
      [
        "ma",
        "g"
      ],
      [
        "ma",
        "ke"
      ],
      [
        "an ",
        "n x n "
      ],
      [
        "10",
        "-"
      ],
      [
        "ou",
        "t the "
      ],
      [
        "Input: ",
        "m = "
      ],
      [
        "Input: ",
        "prices "
      ],
      [
        "ne",
        "g"
      ],
      [
        "2,",
        "5,"
      ],
      [
        "ter",
        "i"
      ],
      [
        "ed",
        ", and "
      ],
      [
        "from ",
        "any "
      ],
      [
        "from ",
        "iterto"
      ],
      [
        "2 ",
        "+ 1"
      ],
      [
        "as ",
        "`"
      ],
      [
        "1 <= ",
        "num"
      ],
      [
        "1 <= ",
        "n, "
      ],
      [
        "char",
        " = "
      ],
      [
        "s = [",
        "[\""
      ],
      [
        "                    ",
        "min_"
      ],
      [
        "word",
        ", "
      ],
      [
        "two ",
        "pointers "
      ],
      [
        "integer ",
        "is "
      ],
      [
        "        for ",
        "right "
      ],
      [
        "-1",
        "])\r\n"
      ],
      [
        "            if ",
        "char "
      ],
      [
        "\", ",
        "word"
      ],
      [
        "to",
        "ur"
      ],
      [
        "cre",
        "ated "
      ],
      [
        "nums[",
        "index"
      ],
      [
        "grid",
        "[1]["
      ],
      [
        "pair",
        "s are "
      ],
      [
        "0 <= ",
        "k <= "
      ],
      [
        "pri",
        "m"
      ],
      [
        "sol",
        "v"
      ],
      [
        "            return ",
        "[]\r\n"
      ],
      [
        "with the ",
        "highest "
      ],
      [
        "Explanation: The ",
        "only "
      ],
      [
        "ear",
        "n"
      ],
      [
        "11",
        ".\r\n"
      ],
      [
        "digit",
        ", "
      ],
      [
        "subarray",
        "s of size "
      ],
      [
        "step",
        "s:\r\n"
      ],
      [
        "St",
        "ud"
      ],
      [
        "tic",
        "ket"
      ],
      [
        "cost",
        ", "
      ],
      [
        ".length == ",
        "n - 1\r\n"
      ],
      [
        "_count",
        ":\r\n"
      ],
      [
        "exactly ",
        "k "
      ],
      [
        "\"abc",
        "\"\r\n"
      ],
      [
        ", we can ",
        "use the "
      ],
      [
        "Su",
        "ffi"
      ],
      [
        "), (",
        "-1, 0"
      ],
      [
        "2 <= ",
        "n <= "
      ],
      [
        "subsequen",
        "ces"
      ],
      [
        "combin",
        "ation of "
      ],
      [
        "problem ",
        "constraints.\r\n"
      ],
      [
        "Output: 1",
        "1\r\n"
      ],
      [
        "since ",
        "it "
      ],
      [
        "using the ",
        "`"
      ],
      [
        "fini",
        "sh "
      ],
      [
        "constru",
        "cted "
      ],
      [
        "cover",
        "ed by "
      ],
      [
        "approach to ",
        "traverse the "
      ],
      [
        "All the ",
        "values of "
      ],
      [
        "bitwise ",
        "XOR "
      ],
      [
        "cach",
        "e\r\n"
      ],
      [
        "s by ",
        "their "
      ],
      [
        "lab",
        "el "
      ],
      [
        "check if ",
        "a "
      ],
      [
        "roun",
        "ded "
      ],
      [
        "paren",
        "thes"
      ],
      [
        "lam",
        "p"
      ],
      [
        "        def dfs(",
        "node, "
      ],
      [
        "nums2 = ",
        "["
      ],
      [
        "combination",
        "s of "
      ],
      [
        "s[j",
        "]"
      ],
      [
        "present ",
        "in "
      ],
      [
        "present ",
        "in the "
      ],
      [
        "Max",
        "im"
      ],
      [
        "turn",
        "s "
      ],
      [
        "GC",
        "D"
      ],
      [
        "Quer",
        "ies"
      ],
      [
        "data ",
        "structure "
      ],
      [
        "ed by a ",
        "single "
      ],
      [
        ". Then",
        ", it "
      ],
      [
        "order of the ",
        "remaining "
      ],
      [
        "As ",
        "we "
      ],
      [
        "insi",
        "de the "
      ],
      [
        ". Since the ",
        "answer may be "
      ],
      [
        "lan",
        "e "
      ],
      [
        "Since the answer may be ",
        "very large, return it modulo 109 + 7.\r\n"
      ],
      [
        "sr",
        "c"
      ],
      [
        "results of ",
        "subproblem"
      ],
      [
        "Given the constraints, ",
        "a "
      ],
      [
        "Id",
        "entif"
      ],
      [
        "bric",
        "ks "
      ],
      [
        "pyra",
        "mid"
      ],
      [
        "from iterto",
        "ols import "
      ],
      [
        " ",
        "* "
      ],
      [
        "\"",
        ":\r\n"
      ],
      [
        "'",
        "#"
      ],
      [
        "(",
        "node):\r\n"
      ],
      [
        ")",
        "`"
      ],
      [
        "3",
        "):\r\n"
      ],
      [
        "G",
        "re"
      ],
      [
        "S",
        "qu"
      ],
      [
        "`",
        "c"
      ],
      [
        "b",
        ".\r\n"
      ],
      [
        "b",
        "le "
      ],
      [
        "c",
        "\r\n"
      ],
      [
        "d",
        "ing"
      ],
      [
        "h",
        "tt"
      ],
      [
        "i",
        ":\r\n"
      ],
      [
        "i",
        "l "
      ],
      [
        "p",
        "end"
      ],
      [
        "s",
        "]\r\n"
      ],
      [
        "        ",
        "from collections import Counter\r\n"
      ],
      [
        ", ",
        "they "
      ],
      [
        "of ",
        "all the "
      ],
      [
        "is ",
        "to find the "
      ],
      [
        "ch",
        "ess"
      ],
      [
        "de",
        "co"
      ],
      [
        "1 ",
        "with "
      ],
      [
        "im",
        "balance "
      ],
      [
        "                ",
        "stack.append("
      ],
      [
        "nums",
        ". "
      ],
      [
        "if ",
        "there are "
      ],
      [
        "if ",
        "there is "
      ],
      [
        "m ",
        "* "
      ],
      [
        "10",
        "10"
      ],
      [
        "10",
        "4].\r\n"
      ],
      [
        "The ",
        "distance "
      ],
      [
        "fi",
        "ve "
      ],
      [
        "number ",
        "and "
      ],
      [
        "i ",
        ">= "
      ],
      [
        "[i] ",
        "> "
      ],
      [
        "li",
        ", "
      ],
      [
        "cl",
        "as"
      ],
      [
        "for",
        "bid"
      ],
      [
        "tim",
        "es\r\n"
      ],
      [
        "to the ",
        "last "
      ],
      [
        "    def ",
        "sum"
      ],
      [
        "    def ",
        "largest"
      ],
      [
        "array",
        "s, "
      ],
      [
        "        for ",
        "_ in range("
      ],
      [
        "        for ",
        "a, b in "
      ],
      [
        "-1",
        "`.\r\n"
      ],
      [
        "sw",
        "apping "
      ],
      [
        "typ",
        "e"
      ],
      [
        "[1,",
        "2], "
      ],
      [
        "id",
        "enti"
      ],
      [
        "sequen",
        "ti"
      ],
      [
        "will ",
        "not "
      ],
      [
        "For ",
        "every "
      ],
      [
        "no ",
        "longer "
      ],
      [
        "Return the ",
        "total number of "
      ],
      [
        "A ",
        "subsequence "
      ],
      [
        "k = ",
        "4\r\n"
      ],
      [
        "chec",
        "k the "
      ],
      [
        "follow",
        "ed by "
      ],
      [
        "binary ",
        "tree"
      ],
      [
        "            for ",
        "_ in range("
      ],
      [
        "5 ",
        "* "
      ],
      [
        "root",
        ", "
      ],
      [
        "self.",
        "find("
      ],
      [
        "set ",
        "bit"
      ],
      [
        "values ",
        "are "
      ],
      [
        "comp",
        "any "
      ],
      [
        "1 and ",
        "word"
      ],
      [
        "od",
        "d, "
      ],
      [
        "sum of ",
        "its "
      ],
      [
        "step",
        ".\r\n"
      ],
      [
        "[0] ",
        "+ "
      ],
      [
        "tri",
        "m"
      ],
      [
        "starting ",
        "at "
      ],
      [
        "able ",
        "to "
      ],
      [
        "substring",
        "\r\n"
      ],
      [
        "ment",
        "or"
      ],
      [
        "proces",
        "s the "
      ],
      [
        "upd",
        "ate("
      ],
      [
        "bi",
        "\r\n"
      ],
      [
        "\"abc",
        "\" "
      ],
      [
        "reach",
        "es the "
      ],
      [
        "if",
        "t"
      ],
      [
        "goo",
        "d_"
      ],
      [
        "(self, nums",
        "1"
      ],
      [
        "(self, nums",
        ": List[int]) -> List[int]:\r\n"
      ],
      [
        "* 10",
        " + "
      ],
      [
        "ensur",
        "e that the "
      ],
      [
        "allow",
        " "
      ],
      [
        "moves ",
        "required to "
      ],
      [
        "equal",
        "s the "
      ],
      [
        ". Th",
        "us, "
      ],
      [
        "coordin",
        "ate"
      ],
      [
        "perform",
        "ed "
      ],
      [
        "[0][",
        "0] "
      ],
      [
        "], k = ",
        "1\r\n"
      ],
      [
        "You are given a 0-indexed ",
        "string "
      ],
      [
        "bound",
        "ary"
      ],
      [
        "of",
        " "
      ],
      [
        "it's ",
        "possible to "
      ],
      [
        "needed to ",
        "make "
      ],
      [
        "appl",
        "y "
      ],
      [
        "    def min",
        "Operation"
      ],
      [
        "You are given two ",
        "0-indexed "
      ],
      [
        "car",
        "s "
      ],
      [
        "        if not ",
        "root"
      ],
      [
        "5,6",
        "]\r\n"
      ],
      [
        "fac",
        "t "
      ],
      [
        "binary represent",
        "ation "
      ],
      [
        "assign",
        "ed to "
      ],
      [
        "Incre",
        "ment "
      ],
      [
        "Given an integer array ",
        "nums"
      ],
      [
        ".length <= 2",
        "000\r\n"
      ],
      [
        "solve the problem",
        ":\r\n"
      ],
      [
        "Ap",
        "ply the "
      ],
      [
        "s(self, s: str",
        ") -> int:\r\n"
      ],
      [
        "bel",
        "ong "
      ],
      [
        "gam",
        "e.\r\n"
      ],
      [
        "arrange",
        "ment "
      ],
      [
        "`nums1",
        "` and `nums2"
      ],
      [
        "don",
        "'t "
      ],
      [
        "boun",
        "d "
      ],
      [
        "making it ",
        "suitable "
      ],
      [
        "peci",
        "fic"
      ],
      [
        "acros",
        "s all "
      ],
      [
        "Lim",
        "it"
      ],
      [
        "nx, n",
        "y = "
      ],
      [
        "ballo",
        "on"
      ],
      [
        "cubo",
        "id"
      ],
      [
        "even and ",
        "odd "
      ],
      [
        "semi",
        "-"
      ],
      [
        "htt",
        "p"
      ],
      [
        "identi",
        "fi"
      ],
      [
        "\"",
        "00"
      ],
      [
        "(",
        "0)\r\n"
      ],
      [
        ")",
        ") "
      ],
      [
        "-",
        "to-"
      ],
      [
        ".",
        "co"
      ],
      [
        "1",
        "7,"
      ],
      [
        "2",
        "-"
      ],
      [
        "2",
        "000\r\n"
      ],
      [
        "3",
        "1, "
      ],
      [
        "9",
        "]]\r\n"
      ],
      [
        "C",
        "D"
      ],
      [
        "C",
        "ase "
      ],
      [
        "E",
        "qual"
      ],
      [
        "L",
        "ea"
      ],
      [
        "O",
        "r"
      ],
      [
        "W",
        "ith"
      ],
      [
        "[",
        "("
      ],
      [
        "[",
        "l"
      ],
      [
        "\\",
        "le"
      ],
      [
        "]",
        "))\r\n"
      ],
      [
        "_",
        "value"
      ],
      [
        "`",
        ". "
      ],
      [
        "a",
        "i != "
      ],
      [
        "b",
        "right"
      ],
      [
        "f",
        "ar "
      ],
      [
        "j",
        "+"
      ],
      [
        "k",
        ": int, "
      ],
      [
        "n",
        "-"
      ],
      [
        "n",
        "er"
      ],
      [
        "s",
        "To"
      ],
      [
        "w",
        "on"
      ],
      [
        "w",
        "alk "
      ],
      [
        "y",
        "s "
      ],
      [
        "        ",
        "answer "
      ],
      [
        "        ",
        "current = "
      ],
      [
        "s ",
        "these "
      ],
      [
        "on",
        "e, "
      ],
      [
        "= ",
        "{"
      ],
      [
        "f ",
        "= "
      ],
      [
        "ar",
        "ti"
      ],
      [
        "num",
        "2 "
      ],
      [
        "ch",
        "al"
      ],
      [
        "to ",
        "`"
      ],
      [
        "pl",
        "it"
      ],
      [
        "            ",
        "node."
      ],
      [
        "            ",
        "   "
      ],
      [
        "a ",
        "is "
      ],
      [
        ") ",
        "+ 1"
      ],
      [
        "qu",
        "i"
      ],
      [
        "- ",
        "1 "
      ],
      [
        "                ",
        "node = "
      ],
      [
        "10",
        "0\r\n"
      ],
      [
        "The ",
        "array "
      ],
      [
        "The ",
        "test cases are "
      ],
      [
        "for ",
        "which "
      ],
      [
        "that ",
        "have "
      ],
      [
        "of the ",
        "second "
      ],
      [
        "Input: ",
        "str"
      ],
      [
        "ne",
        "sted "
      ],
      [
        "` ",
        "to the "
      ],
      [
        "k ",
        "+ "
      ],
      [
        "1, ",
        "2, and "
      ],
      [
        "ver",
        "sa"
      ],
      [
        "3,",
        "6,"
      ],
      [
        "Explanation: ",
        "You "
      ],
      [
        "by ",
        "one "
      ],
      [
        "by ",
        "considering "
      ],
      [
        "pa",
        "int "
      ],
      [
        "Con",
        "caten"
      ],
      [
        "il",
        "ity"
      ],
      [
        "one ",
        "way to "
      ],
      [
        "pres",
        "se"
      ],
      [
        "            if ",
        "is_"
      ],
      [
        "gra",
        "de"
      ],
      [
        "start",
        "Po"
      ],
      [
        "sp",
        "ell"
      ],
      [
        "you ",
        "may "
      ],
      [
        "id",
        "x = "
      ],
      [
        "point",
        "s["
      ],
      [
        "will ",
        "not be "
      ],
      [
        "use",
        "s the "
      ],
      [
        "time ",
        "to "
      ],
      [
        "Input: nums = [",
        "3,2,"
      ],
      [
        "1] ",
        "-> "
      ],
      [
        "                if ",
        "("
      ],
      [
        "graph",
        " and "
      ],
      [
        "j ",
        "in "
      ],
      [
        "plac",
        "e"
      ],
      [
        "numbers ",
        "and "
      ],
      [
        "heigh",
        "t = "
      ],
      [
        "rema",
        "in "
      ],
      [
        "En",
        "sur"
      ],
      [
        "s(self, ",
        "word"
      ],
      [
        ".length <= ",
        "500\r\n"
      ],
      [
        "`k",
        "` is "
      ],
      [
        "                        ",
        "break\r\n"
      ],
      [
        "high",
        " = "
      ],
      [
        "play",
        "ing a "
      ],
      [
        "multi",
        "plic"
      ],
      [
        "3],[",
        "0,"
      ],
      [
        "0],[",
        "1,1,"
      ],
      [
        "characters ",
        "within a "
      ],
      [
        "operations ",
        "on "
      ],
      [
        "integer",
        "s, "
      ],
      [
        "hel",
        "per"
      ],
      [
        "row ",
        "or "
      ],
      [
        "num ",
        "% "
      ],
      [
        "ston",
        "es = ["
      ],
      [
        "cont",
        "ent"
      ],
      [
        "direction",
        "al "
      ],
      [
        "short",
        "est"
      ],
      [
        "brea",
        "k "
      ],
      [
        "rectang",
        "les "
      ],
      [
        "mid ",
        "- 1\r\n"
      ],
      [
        "find ",
        "all "
      ],
      [
        "            while ",
        "i < "
      ],
      [
        "query",
        ", we "
      ],
      [
        "top",
        "_"
      ],
      [
        "Val",
        "id "
      ],
      [
        "mon",
        "th"
      ],
      [
        "# print(",
        "solution"
      ],
      [
        "vowel",
        "s "
      ],
      [
        "        # Initialize the ",
        "result "
      ],
      [
        "appl",
        "ying "
      ],
      [
        "To solve this problem, we need to ",
        "determine the "
      ],
      [
        "This solution efficiently ",
        "calculates the "
      ],
      [
        "Conver",
        "t "
      ],
      [
        "consist ",
        "only of "
      ],
      [
        "dur",
        "ation "
      ],
      [
        "flip",
        "_"
      ],
      [
        "| ",
        "<= "
      ],
      [
        "back ",
        "to "
      ],
      [
        "mapp",
        "ing"
      ],
      [
        "lru_cach",
        "e"
      ],
      [
        "len(s",
        ") - "
      ],
      [
        "_count = ",
        "Counter("
      ],
      [
        "reque",
        "st "
      ],
      [
        "rece",
        "ive "
      ],
      [
        "to the right ",
        "of "
      ],
      [
        "necess",
        "arily "
      ],
      [
        "Fun",
        "ction "
      ],
      [
        "thresh",
        "old"
      ],
      [
        "piec",
        "es "
      ],
      [
        "clock",
        "wise"
      ],
      [
        "cri",
        "teri"
      ],
      [
        "gard",
        "en "
      ],
      [
        "output ",
        "is "
      ],
      [
        "arrange",
        "ment"
      ],
      [
        "from the `",
        "collection"
      ],
      [
        "Fri",
        "end"
      ],
      [
        "fra",
        "ction"
      ],
      [
        "compa",
        "ti"
      ],
      [
        "stand",
        "ing "
      ],
      [
        "ref",
        "le"
      ],
      [
        "invol",
        "ves "
      ],
      [
        "up, ",
        "down, "
      ],
      [
        "breadth-first search ",
        "(BFS) "
      ],
      [
        "poly",
        "g"
      ],
      [
        "put:",
        "   "
      ],
      [
        "oton",
        "ic "
      ],
      [
        "orig",
        "in "
      ],
      [
        "parenthes",
        "is "
      ],
      [
        "(self, nums1",
        ": List[int], nums2"
      ],
      [
        "\\le",
        "q "
      ],
      [
        "\"",
        "] "
      ],
      [
        "'",
        "))\r\n"
      ],
      [
        "(",
        "or "
      ],
      [
        "1",
        "\" "
      ],
      [
        "2",
        "6 "
      ],
      [
        "2",
        ":\\r\r\n"
      ],
      [
        "3",
        "."
      ],
      [
        "4",
        "3"
      ],
      [
        "4",
        ", and "
      ],
      [
        "4",
        ") = "
      ],
      [
        "6",
        " and "
      ],
      [
        "8",
        " = "
      ],
      [
        "C",
        "an "
      ],
      [
        "I",
        "N"
      ],
      [
        "M",
        "M"
      ],
      [
        "S",
        "er"
      ],
      [
        "W",
        "id"
      ],
      [
        "[",
        "right"
      ],
      [
        "]",
        ") % MOD\r\n"
      ],
      [
        "a",
        "ff"
      ],
      [
        "f",
        "ast "
      ],
      [
        "i",
        "es "
      ],
      [
        "p",
        "es"
      ],
      [
        "p",
        "[x"
      ],
      [
        "s",
        ".length <= 1000\r\n"
      ],
      [
        "t",
        "ed "
      ],
      [
        "v",
        "ot"
      ],
      [
        "w",
        "ar"
      ],
      [
        "w",
        "all "
      ],
      [
        "        ",
        "root"
      ],
      [
        "        ",
        "digit"
      ],
      [
        "        ",
        "elif "
      ],
      [
        "an",
        "yth"
      ],
      [
        "re",
        "le"
      ],
      [
        "ar",
        "rows "
      ],
      [
        "is ",
        "already "
      ],
      [
        "num",
        "2"
      ],
      [
        "num",
        "2 = "
      ],
      [
        "ut",
        "es "
      ],
      [
        "le",
        "d"
      ],
      [
        "se",
        "t the "
      ],
      [
        "            ",
        "i = "
      ],
      [
        "at",
        "ed"
      ],
      [
        "] ",
        "if "
      ],
      [
        "in ",
        "Python"
      ],
      [
        "<= ",
        "right:\r\n"
      ],
      [
        "ma",
        "gical "
      ],
      [
        "an ",
        "index i "
      ],
      [
        "an ",
        "infinite "
      ],
      [
        "ed ",
        "into "
      ],
      [
        "ac",
        "cess "
      ],
      [
        "1,",
        "2]\r\n"
      ],
      [
        "con",
        "fli"
      ],
      [
        "= [",
        "[\""
      ],
      [
        "Example ",
        "1:"
      ],
      [
        "Example ",
        "2:\\r\r\n"
      ],
      [
        "` ",
        "by "
      ],
      [
        "> ",
        "1:\r\n"
      ],
      [
        "in the ",
        "current "
      ],
      [
        "ab",
        "br"
      ],
      [
        "<= 10",
        "7\r\n"
      ],
      [
        "Con",
        "stru"
      ],
      [
        ". The ",
        "result is "
      ],
      [
        "count",
        "s of "
      ],
      [
        "vi",
        "ce "
      ],
      [
        "Constraint",
        "s:\\r\r\n"
      ],
      [
        "        return ",
        "answer\r\n"
      ],
      [
        "dp",
        "[i - "
      ],
      [
        "3 ",
        "== "
      ],
      [
        "you ",
        "should "
      ],
      [
        "current",
        "\r\n"
      ],
      [
        "s to ",
        "a "
      ],
      [
        "s to ",
        "make "
      ],
      [
        "s[",
        "k"
      ],
      [
        "nums[",
        "mid"
      ],
      [
        "s and ",
        "a "
      ],
      [
        "Input: nums = [",
        "10,"
      ],
      [
        "Output: [",
        "4,"
      ],
      [
        "result ",
        "is the maximum "
      ],
      [
        "s. ",
        "\r\n"
      ],
      [
        "sequence ",
        "is "
      ],
      [
        "numbers ",
        "up to "
      ],
      [
        "set ",
        "for "
      ],
      [
        "non-",
        "decreas"
      ],
      [
        "subarray",
        "\r\n"
      ],
      [
        "for the ",
        "given "
      ],
      [
        "between ",
        "1 and "
      ],
      [
        "consist",
        "ing "
      ],
      [
        "after ",
        "performing "
      ],
      [
        "substring",
        "s.\r\n"
      ],
      [
        "5, ",
        "6, "
      ],
      [
        "te",
        "st"
      ],
      [
        "` to ",
        "store the "
      ],
      [
        "node.",
        "left, "
      ],
      [
        "Input: s = \"",
        "0"
      ],
      [
        ". We ",
        "will "
      ],
      [
        "inclu",
        "ded "
      ],
      [
        "key",
        "s "
      ],
      [
        "] == ",
        "1:\r\n"
      ],
      [
        "1 <= n ",
        "<= 104\r\n"
      ],
      [
        "condition",
        "s "
      ],
      [
        "second",
        ", "
      ],
      [
        "weigh",
        "t of "
      ],
      [
        "decre",
        "ment "
      ],
      [
        "Output: 1",
        "6\r\n"
      ],
      [
        ". Th",
        "e"
      ],
      [
        "through ",
        "all possible "
      ],
      [
        "side ",
        "of the "
      ],
      [
        "times",
        ", "
      ],
      [
        "fri",
        "ends "
      ],
      [
        "Pro",
        "ces"
      ],
      [
        "lea",
        "f"
      ],
      [
        "within the ",
        "given "
      ],
      [
        "student",
        "s "
      ],
      [
        "make the ",
        "array "
      ],
      [
        "redu",
        "ce the "
      ],
      [
        "0 + ",
        "0 + "
      ],
      [
        "Hence",
        ", we return "
      ],
      [
        "specifi",
        "ed in the "
      ],
      [
        "dis",
        "joint "
      ],
      [
        "sy",
        "mb"
      ],
      [
        "type ",
        "of "
      ],
      [
        "in_",
        "degree"
      ],
      [
        "arri",
        "val"
      ],
      [
        "]` ",
        "represents the "
      ],
      [
        "node.right",
        ":\r\n"
      ],
      [
        ". If it ",
        "does"
      ],
      [
        "provi",
        "de"
      ],
      [
        "Move ",
        "to the next "
      ],
      [
        "_map",
        "["
      ],
      [
        "Col",
        "um"
      ],
      [
        "stre",
        "et"
      ],
      [
        "streng",
        "th"
      ],
      [
        "union",
        "("
      ],
      [
        ":i",
        "+"
      ],
      [
        "an adjacency ",
        "list "
      ],
      [
        "colli",
        "sion"
      ],
      [
        ", so the ",
        "answer is "
      ],
      [
        "gam",
        "e, "
      ],
      [
        "foo",
        "d "
      ],
      [
        "start and ",
        "end "
      ],
      [
        "lu",
        "ck"
      ],
      [
        "mou",
        "se"
      ],
      [
        "cumul",
        "ative "
      ],
      [
        "gl",
        "ass "
      ],
      [
        "s` module ",
        "to "
      ],
      [
        "Fact",
        "or"
      ],
      [
        "following way",
        ":\r\n"
      ],
      [
        "Instea",
        "d"
      ],
      [
        "Charac",
        "ter"
      ],
      [
        "there is an edge between ",
        "nodes "
      ],
      [
        "Do ",
        "not "
      ],
      [
        "ai != ",
        "bi\r\n"
      ],
      [
        "characters within a ",
        "string.\r\n"
      ],
      [
        "Example 1:",
        "\\r\r\n"
      ],
      [
        "\"",
        "y"
      ],
      [
        "-",
        "23"
      ],
      [
        "1",
        "8,"
      ],
      [
        "1",
        "9,"
      ],
      [
        "1",
        "5.\r\n"
      ],
      [
        "3",
        "\",\""
      ],
      [
        "3",
        ").\r\n"
      ],
      [
        "4",
        ").\r\n"
      ],
      [
        "8",
        "] "
      ],
      [
        "?",
        " "
      ],
      [
        "D",
        "rink"
      ],
      [
        "F",
        "i"
      ],
      [
        "U",
        "se the "
      ],
      [
        "W",
        "ind"
      ],
      [
        "[",
        "r"
      ],
      [
        "_",
        "length "
      ],
      [
        "_",
        "count = 0\r\n"
      ],
      [
        "_",
        "length = "
      ],
      [
        "`",
        ". It then "
      ],
      [
        "h",
        "is "
      ],
      [
        "r",
        " - "
      ],
      [
        "s",
        ".length "
      ],
      [
        "s",
        "cre"
      ],
      [
        "y",
        "ou"
      ],
      [
        "th",
        "en"
      ],
      [
        "in",
        "st"
      ],
      [
        "an",
        "ts "
      ],
      [
        "an",
        "agram"
      ],
      [
        ": ",
        "List[str]"
      ],
      [
        "is ",
        "now "
      ],
      [
        "            ",
        "result"
      ],
      [
        "n ",
        "* "
      ],
      [
        "n ",
        "/ "
      ],
      [
        "a ",
        "+ "
      ],
      [
        "<= ",
        "n\r\n"
      ],
      [
        ") ",
        ">= "
      ],
      [
        "qu",
        "anti"
      ],
      [
        "                ",
        "heapq.heappush("
      ],
      [
        "nums",
        "2 "
      ],
      [
        "10",
        "].\r\n"
      ],
      [
        "lo",
        "ve"
      ],
      [
        "` ",
        "array "
      ],
      [
        "plan",
        "e"
      ],
      [
        "2 ",
        "== "
      ],
      [
        "i ",
        "* "
      ],
      [
        "as ",
        "long "
      ],
      [
        "sh",
        "are the "
      ],
      [
        "<= 10",
        "^"
      ],
      [
        "ad",
        "v"
      ],
      [
        "end",
        ":\r\n"
      ],
      [
        "star",
        "ti, "
      ],
      [
        "sum ",
        "to "
      ],
      [
        "    def ",
        "check"
      ],
      [
        "len(",
        "arr"
      ],
      [
        "is the ",
        "largest "
      ],
      [
        "s = ",
        "max(max_"
      ],
      [
        "2, ",
        "the "
      ],
      [
        "left",
        ".\r\n"
      ],
      [
        "row",
        "_"
      ],
      [
        "operation",
        " is "
      ],
      [
        "where ",
        "0 <= "
      ],
      [
        "node ",
        "is a "
      ],
      [
        "nums[",
        "2]"
      ],
      [
        "diff",
        "er "
      ],
      [
        "no ",
        "more "
      ],
      [
        "elements ",
        "and "
      ],
      [
        "time ",
        "taken "
      ],
      [
        "[i][",
        "1] "
      ],
      [
        "            return ",
        "("
      ],
      [
        "right ",
        "and "
      ],
      [
        "s[i] ",
        "== '"
      ],
      [
        "Ch",
        "ang"
      ],
      [
        "target",
        ": int) -> int:\r\n"
      ],
      [
        "root",
        "ed "
      ],
      [
        "max(",
        "dp"
      ],
      [
        "values ",
        "in "
      ],
      [
        "subarray ",
        "sum "
      ],
      [
        "        if ",
        "n "
      ],
      [
        "zero",
        ", "
      ],
      [
        "group",
        "s of "
      ],
      [
        "loc",
        "ated "
      ],
      [
        "**: We ",
        "use "
      ],
      [
        "colle",
        "cted "
      ],
      [
        "distance ",
        "of "
      ],
      [
        "produ",
        "ct = "
      ],
      [
        "in a ",
        "32-bit "
      ],
      [
        "frequen",
        "c"
      ],
      [
        "upd",
        "ates "
      ],
      [
        ", return ",
        "0.\r\n"
      ],
      [
        "Initializ",
        "e "
      ],
      [
        "ensures that ",
        "each "
      ],
      [
        "height",
        "s = ["
      ],
      [
        "3,4",
        "].\r\n"
      ],
      [
        "\"abc",
        "def"
      ],
      [
        "positive ",
        "integers.\r\n"
      ],
      [
        "comm",
        "and"
      ],
      [
        "key",
        "s("
      ],
      [
        "checks ",
        "each "
      ],
      [
        "Output: \"",
        "\"\r\n"
      ],
      [
        "1 <= n ",
        "<= 1000\r\n"
      ],
      [
        "shown ",
        "that the "
      ],
      [
        "second",
        "s "
      ],
      [
        "float",
        ":\r\n"
      ],
      [
        "Al",
        "gorith"
      ],
      [
        "optim",
        "ally.\r\n"
      ],
      [
        "Ad",
        "dition"
      ],
      [
        "[j",
        "]:\r\n"
      ],
      [
        "i, j",
        ", "
      ],
      [
        "run",
        "g"
      ],
      [
        "visited",
        "\r\n"
      ],
      [
        "'a",
        "'"
      ],
      [
        "get ",
        "a "
      ],
      [
        "shortest ",
        "distance "
      ],
      [
        "Wh",
        "en the "
      ],
      [
        "close",
        "st_"
      ],
      [
        "head ",
        "of the "
      ],
      [
        "head ",
        "of a "
      ],
      [
        "within the ",
        "given constraints.\r\n"
      ],
      [
        "s[i] = [",
        "xi, yi"
      ],
      [
        "inser",
        "tion"
      ],
      [
        "inser",
        "tion "
      ],
      [
        "            current_",
        "sum += "
      ],
      [
        "(self, s: str",
        ") -> str:\r\n"
      ],
      [
        "bisect",
        "."
      ],
      [
        "sti",
        "t"
      ],
      [
        "dow",
        "n the "
      ],
      [
        "stic",
        "ks "
      ],
      [
        ".pop",
        "left()\r\n"
      ],
      [
        "candid",
        "ates "
      ],
      [
        "triplet",
        "s "
      ],
      [
        "twi",
        "ce.\r\n"
      ],
      [
        "        # Step ",
        "3: "
      ],
      [
        "It is ",
        "guaranteed that "
      ],
      [
        "maintain",
        "ing the "
      ],
      [
        "        # Fil",
        "l "
      ],
      [
        "LC",
        "A"
      ],
      [
        "[node",
        "]:\r\n"
      ],
      [
        "rearrang",
        "ed to "
      ],
      [
        "            graph[",
        "u"
      ],
      [
        ". So ",
        "the "
      ],
      [
        "deriv",
        "ed from "
      ],
      [
        "current_sum",
        ")\r\n"
      ],
      [
        "labeled ",
        "from 0 to n - "
      ],
      [
        "//",
        "= "
      ],
      [
        "need",
        "s to be "
      ],
      [
        "separat",
        "ed by a single "
      ],
      [
        "This approach ensures that we efficiently ",
        "find the "
      ],
      [
        "endi",
        " "
      ],
      [
        "accumul",
        "ated "
      ],
      [
        "frequenci",
        "es "
      ],
      [
        "toge",
        "ther "
      ],
      [
        "fur",
        "ther "
      ],
      [
        "wait",
        "ing "
      ],
      [
        "energy",
        "Drink"
      ],
      [
        "float('-inf'",
        ")\r\n"
      ],
      [
        "Sim",
        "ilar"
      ],
      [
        "desi",
        "red "
      ],
      [
        "butt",
        "on "
      ],
      [
        "Push",
        " the "
      ],
      [
        "A substring is a contiguous ",
        "sequence of "
      ],
      [
        "-105 ",
        "<= "
      ],
      [
        "non-empty sequence of ",
        "elements within an array.\r\n"
      ],
      [
        "bran",
        "ch"
      ],
      [
        "Dynamic Program",
        "ming "
      ],
      [
        "'0' or ",
        "'1'.\r\n"
      ],
      [
        "x + dx, y + ",
        "dy\r\n"
      ],
      [
        "nx, ny = ",
        "x + dx, y + dy\r\n"
      ],
      [
        "\"",
        "F"
      ],
      [
        "(",
        "root."
      ],
      [
        ")",
        "\"\r\n"
      ],
      [
        "-",
        "4,"
      ],
      [
        "-",
        "up "
      ],
      [
        "1",
        "3.\r\n"
      ],
      [
        "1",
        "-indexed "
      ],
      [
        "3",
        ", the "
      ],
      [
        "A",
        "no"
      ],
      [
        "C",
        "ity "
      ],
      [
        "I",
        "P "
      ],
      [
        "L",
        "L"
      ],
      [
        "M",
        "atch"
      ],
      [
        "R",
        "ight "
      ],
      [
        "U",
        "R"
      ],
      [
        "[",
        "c"
      ],
      [
        "[",
        "2]"
      ],
      [
        "_",
        "values"
      ],
      [
        "`",
        "a"
      ],
      [
        "b",
        "en"
      ],
      [
        "b",
        "cc"
      ],
      [
        "c",
        "ru"
      ],
      [
        "j",
        ".\r\n"
      ],
      [
        "k",
        "i"
      ],
      [
        "l",
        "ap"
      ],
      [
        "p",
        "urch"
      ],
      [
        "s",
        "/"
      ],
      [
        "s",
        "n"
      ],
      [
        "s",
        "end"
      ],
      [
        "u",
        ")\r\n"
      ],
      [
        "w",
        "ell "
      ],
      [
        "x",
        "or "
      ],
      [
        " ",
        "and "
      ],
      [
        "    ",
        "- "
      ],
      [
        "        ",
        "index"
      ],
      [
        "an",
        "k "
      ],
      [
        "re",
        "di"
      ],
      [
        "re",
        "d.\r\n"
      ],
      [
        "re",
        "d, "
      ],
      [
        "ti",
        "le "
      ],
      [
        "st",
        "able "
      ],
      [
        "ing",
        "redi"
      ],
      [
        "is ",
        "1.\r\n"
      ],
      [
        "num",
        " - "
      ],
      [
        "num",
        "s that "
      ],
      [
        "ro",
        "b"
      ],
      [
        "ro",
        "bb"
      ],
      [
        "            ",
        "node = "
      ],
      [
        "1 ",
        "XOR "
      ],
      [
        "- ",
        "For each "
      ],
      [
        "- ",
        "Finally"
      ],
      [
        "ol",
        "der"
      ],
      [
        "[i",
        "-"
      ],
      [
        "if ",
        "all "
      ],
      [
        "m ",
        "+ 1):\r\n"
      ],
      [
        "gh",
        "o"
      ],
      [
        "fi",
        "le"
      ],
      [
        "that ",
        "satisfies "
      ],
      [
        "of the ",
        "given "
      ],
      [
        "Example ",
        "4:\r\n"
      ],
      [
        "Input: ",
        "k = "
      ],
      [
        "Input: ",
        "word = \""
      ],
      [
        "` ",
        "array"
      ],
      [
        "sub",
        "matri"
      ],
      [
        "it ",
        "becomes "
      ],
      [
        "2 ",
        "or "
      ],
      [
        "3,",
        "1]\r\n"
      ],
      [
        "li",
        "e "
      ],
      [
        "ex",
        "ha"
      ],
      [
        "Explanation: ",
        "No "
      ],
      [
        "by ",
        "1 "
      ],
      [
        "with ",
        "one "
      ],
      [
        "with ",
        "index "
      ],
      [
        "pa",
        "y "
      ],
      [
        "\",\"",
        "1\",\""
      ],
      [
        ". The ",
        "time complexity of this solution is "
      ],
      [
        "par",
        "ity "
      ],
      [
        "row",
        " + "
      ],
      [
        "You are ",
        "allowed to "
      ],
      [
        "] = ",
        "max("
      ],
      [
        "us",
        "er "
      ],
      [
        "from the ",
        "current "
      ],
      [
        "Return the ",
        "length of the longest "
      ],
      [
        "bu",
        "t the "
      ],
      [
        "sm",
        "all "
      ],
      [
        "s[i] ",
        "- "
      ],
      [
        "Explanation: The ",
        "diagram "
      ],
      [
        "ori",
        "al "
      ],
      [
        "\"a",
        "\" "
      ],
      [
        "\"a",
        "\", \""
      ],
      [
        "ve",
        "lo"
      ],
      [
        "nums ",
        "into "
      ],
      [
        "queri",
        "es.\r\n"
      ],
      [
        "lin",
        "es "
      ],
      [
        ". It ",
        "first "
      ],
      [
        "edge",
        "s: List[List[int]], "
      ],
      [
        "                # ",
        "Update the "
      ],
      [
        "score ",
        "= 0\r\n"
      ],
      [
        "substring",
        "s in "
      ],
      [
        "remov",
        "ed.\r\n"
      ],
      [
        "Input: n = ",
        "3\r\n"
      ],
      [
        "Input: n = ",
        "6, "
      ],
      [
        "_count",
        "` "
      ],
      [
        "substring ",
        "in "
      ],
      [
        "cell ",
        "("
      ],
      [
        "(0, ",
        "1"
      ],
      [
        "(0, ",
        "0, "
      ],
      [
        "problem",
        "'s "
      ],
      [
        "                        ",
        "queue.append("
      ],
      [
        "dp[",
        "m"
      ],
      [
        "at least ",
        "two "
      ],
      [
        "s[i]",
        ")\r\n"
      ],
      [
        "inf",
        "\r\n"
      ],
      [
        "score",
        ", "
      ],
      [
        "calculates the ",
        "number of "
      ],
      [
        "pp",
        "ing "
      ],
      [
        "at most ",
        "`k` "
      ],
      [
        "replac",
        "e the "
      ],
      [
        "\"b",
        "ab"
      ],
      [
        "subsequen",
        "ce.\r\n"
      ],
      [
        "` is ",
        "`"
      ],
      [
        "valid",
        "\r\n"
      ],
      [
        "moves ",
        "to "
      ],
      [
        "(i",
        ".e. "
      ],
      [
        "board",
        "[i][j] "
      ],
      [
        "calculate the ",
        "number of "
      ],
      [
        "For example, ",
        "\""
      ],
      [
        "[j",
        "]\r\n"
      ],
      [
        "pic",
        "ked "
      ],
      [
        "choose ",
        "any "
      ],
      [
        "[0][",
        "0] = "
      ],
      [
        "[0, ",
        "1, "
      ],
      [
        "stack ",
        "to "
      ],
      [
        "1 <= s",
        ".length <= 1000\r\n"
      ],
      [
        "iterate ",
        "through each "
      ],
      [
        "To solve this problem, we need to ",
        "find the "
      ],
      [
        "Com",
        "bin"
      ],
      [
        ") == ",
        "1:\r\n"
      ],
      [
        "At ",
        "time "
      ],
      [
        "duplic",
        "ates "
      ],
      [
        "DP ",
        "array "
      ],
      [
        "count the number of ",
        "valid "
      ],
      [
        "power",
        "_of_"
      ],
      [
        "\"aa",
        "ab"
      ],
      [
        "hav",
        "ing a "
      ],
      [
        "numer",
        "ic "
      ],
      [
        "n - 1, ",
        "-1, -1):\r\n"
      ],
      [
        "r ",
        "< "
      ],
      [
        "tok",
        "en "
      ],
      [
        "dp ",
        "array\r\n"
      ],
      [
        "            # If the ",
        "current "
      ],
      [
        "domin",
        "ant "
      ],
      [
        "Ke",
        "ep "
      ],
      [
        ".length <= 2",
        "0\r\n"
      ],
      [
        "), where ",
        "n is the length of the "
      ],
      [
        "fa",
        "st"
      ],
      [
        "employe",
        "e "
      ],
      [
        "employe",
        "es "
      ],
      [
        "<= nums[i] ",
        "<= 109\r\n"
      ],
      [
        "ans ",
        "+= "
      ],
      [
        "0 <= n",
        "x < "
      ],
      [
        "0 <= n",
        "y < "
      ],
      [
        "dictionary",
        "\r\n"
      ],
      [
        "Div",
        "i"
      ],
      [
        "nor",
        "maliz"
      ],
      [
        "edges = [[0,",
        "1],[1,"
      ],
      [
        "Here's a step-by-step ",
        "approach to "
      ],
      [
        "top-",
        "left "
      ],
      [
        "Optional[ListNode",
        "]:\r\n"
      ],
      [
        "does",
        "n't "
      ],
      [
        "A subarray is a contiguous ",
        "non-empty sequence of elements within an array.\r\n"
      ],
      [
        "rover",
        "t"
      ],
      [
        "verti",
        "ces "
      ],
      [
        "cher",
        "ri"
      ],
      [
        "dx, dy in ",
        "directions:\r\n"
      ],
      [
        "without changing the ",
        "order of the remaining "
      ],
      [
        "Return an integer ",
        "denoting the "
      ],
      [
        "        if not root",
        ":\r\n"
      ],
      [
        "Ano",
        "ther "
      ],
      [
        "'",
        "-"
      ],
      [
        "(",
        "i + 1"
      ],
      [
        "2",
        "8"
      ],
      [
        "2",
        "1,"
      ],
      [
        "2",
        ") and "
      ],
      [
        "3",
        "-"
      ],
      [
        "4",
        " = 1"
      ],
      [
        "6",
        " - "
      ],
      [
        "7",
        "4"
      ],
      [
        "M",
        "er"
      ],
      [
        "M",
        "at"
      ],
      [
        "S",
        "m"
      ],
      [
        "S",
        "ort "
      ],
      [
        "X",
        " = "
      ],
      [
        "[",
        "-1, "
      ],
      [
        "_",
        "str"
      ],
      [
        "_",
        "count += 1\r\n"
      ],
      [
        "_",
        "traversal"
      ],
      [
        "`",
        "d"
      ],
      [
        "`",
        "\r\n"
      ],
      [
        "`",
        "right` "
      ],
      [
        "a",
        "\""
      ],
      [
        "b",
        "on"
      ],
      [
        "b",
        "us"
      ],
      [
        "j",
        ":\r\n"
      ],
      [
        "k",
        "er "
      ],
      [
        "s",
        "1, "
      ],
      [
        "t",
        "s to "
      ],
      [
        "v",
        "e, "
      ],
      [
        "w",
        " in "
      ],
      [
        "x",
        "2, y"
      ],
      [
        "        ",
        "g"
      ],
      [
        "        ",
        "last_"
      ],
      [
        "        ",
        "num_"
      ],
      [
        "s ",
        "consists only of lowercase English letters.\r\n"
      ],
      [
        "= ",
        "2, "
      ],
      [
        "re",
        "v"
      ],
      [
        "re",
        "ad "
      ],
      [
        "st",
        "k"
      ],
      [
        "y ",
        "== "
      ],
      [
        ": ",
        "List[str], "
      ],
      [
        "is ",
        "equal to "
      ],
      [
        "ch",
        "r"
      ],
      [
        "se",
        "at "
      ],
      [
        "pl",
        "ot"
      ],
      [
        "            ",
        "n = len("
      ],
      [
        "            ",
        "stack.append("
      ],
      [
        ". ",
        "However, "
      ],
      [
        "] ",
        ">= "
      ],
      [
        "un",
        "marked "
      ],
      [
        "ma",
        "tic"
      ],
      [
        "ed ",
        "and "
      ],
      [
        "                ",
        "self."
      ],
      [
        " = ",
        "{"
      ],
      [
        "that ",
        "can "
      ],
      [
        "Input: ",
        "a = "
      ],
      [
        "number ",
        "to "
      ],
      [
        "el",
        "y.\r\n"
      ],
      [
        "ap",
        "ple "
      ],
      [
        "0,",
        "1]\r\n"
      ],
      [
        "        # ",
        "Pre"
      ],
      [
        "        # ",
        "Traverse the "
      ],
      [
        "0 ",
        "< "
      ],
      [
        "[i] ",
        "represents the "
      ],
      [
        "self",
        "-"
      ],
      [
        "inde",
        "pend"
      ],
      [
        "ct",
        "ed"
      ],
      [
        "Explanation: ",
        "After "
      ],
      [
        "to the ",
        "same "
      ],
      [
        "solution",
        ".\r\n"
      ],
      [
        ", and ",
        "we "
      ],
      [
        ", and ",
        "so "
      ],
      [
        "ke",
        "y.\r\n"
      ],
      [
        "the",
        " "
      ],
      [
        "max_",
        "sum"
      ],
      [
        "first ",
        "k "
      ],
      [
        "        for ",
        "word in word"
      ],
      [
        "string",
        "s, "
      ],
      [
        "-1",
        "]["
      ],
      [
        "\" ",
        "--> "
      ],
      [
        "3 ",
        "is the "
      ],
      [
        "sw",
        "ord "
      ],
      [
        "            # ",
        "Expl"
      ],
      [
        "minimum ",
        "value "
      ],
      [
        "operation",
        ":\r\n"
      ],
      [
        "sort",
        "ed by "
      ],
      [
        "can be ",
        "placed "
      ],
      [
        "which ",
        "represents the "
      ],
      [
        "result",
        "s in the "
      ],
      [
        "is a ",
        "list of "
      ],
      [
        "time ",
        "is "
      ],
      [
        "A ",
        "valid "
      ],
      [
        "j ",
        "== "
      ],
      [
        "appro",
        "pri"
      ],
      [
        ", it ",
        "increments the "
      ],
      [
        "numbers ",
        "from 1 to "
      ],
      [
        "\"ab",
        "ac"
      ],
      [
        "set ",
        "`"
      ],
      [
        "roo",
        "t = "
      ],
      [
        "form",
        "s a "
      ],
      [
        "x, ",
        "y in "
      ],
      [
        "ag",
        " "
      ],
      [
        "cell",
        "s in the "
      ],
      [
        "start ",
        "of the "
      ],
      [
        ". This ",
        "ensures that the "
      ],
      [
        "distance ",
        "is "
      ],
      [
        "path",
        "s from "
      ],
      [
        "`nums",
        "[i]"
      ],
      [
        "prefix ",
        "and "
      ],
      [
        "we can ",
        "achieve "
      ],
      [
        "2 + ",
        "1 = "
      ],
      [
        "distinct ",
        "integers "
      ],
      [
        "there is ",
        "only one "
      ],
      [
        "Di",
        "ct"
      ],
      [
        "child",
        ", "
      ],
      [
        "Sub",
        "array "
      ],
      [
        "        max_",
        "length = 0\r\n"
      ],
      [
        "patter",
        "n = "
      ],
      [
        "mean",
        "ing "
      ],
      [
        "\"b",
        "bb"
      ],
      [
        "Counter",
        "()\r\n"
      ],
      [
        "board",
        ".\r\n"
      ],
      [
        "previ",
        "ously "
      ],
      [
        "without ",
        "any "
      ],
      [
        "odd ",
        "and "
      ],
      [
        "coordin",
        "at"
      ],
      [
        "continu",
        "ous "
      ],
      [
        "group ",
        "is "
      ],
      [
        "pic",
        "k the "
      ],
      [
        "1 <= nums[i] ",
        "<= 100\r\n"
      ],
      [
        "4],[",
        "1,"
      ],
      [
        "ed as ",
        "follows:\r\n"
      ],
      [
        "price ",
        "= "
      ],
      [
        "a, b",
        ", c"
      ],
      [
        "palindrom",
        "ic"
      ],
      [
        "vowel",
        "s = "
      ],
      [
        "require",
        "d.\r\n"
      ],
      [
        "(i, j",
        ", "
      ],
      [
        "grid[",
        "n"
      ],
      [
        "achiev",
        "e.\r\n"
      ],
      [
        "Count the ",
        "number of "
      ],
      [
        "duplic",
        "ates"
      ],
      [
        "exp",
        "and"
      ],
      [
        "into a ",
        "single "
      ],
      [
        "Fir",
        "st"
      ],
      [
        "horizont",
        "alCut"
      ],
      [
        "j < ",
        "len("
      ],
      [
        "in the range [1, ",
        "n"
      ],
      [
        "memoiz",
        "ation"
      ],
      [
        "go ",
        "from "
      ],
      [
        "robot",
        "s "
      ],
      [
        "Tot",
        "al"
      ],
      [
        "ord(",
        "c"
      ],
      [
        "mem",
        "ory "
      ],
      [
        "peri",
        "od"
      ],
      [
        ", it returns `",
        "False"
      ],
      [
        "s, so ",
        "we return "
      ],
      [
        "vertic",
        "alCut"
      ],
      [
        "`num",
        "` "
      ],
      [
        "[i - 1] ",
        "== "
      ],
      [
        "aga",
        "in "
      ],
      [
        "quic",
        "k "
      ],
      [
        "know",
        "n "
      ],
      [
        "tow",
        "ard"
      ],
      [
        "build ",
        "a "
      ],
      [
        "45",
        "6"
      ],
      [
        "Given an integer ",
        "n, return the "
      ],
      [
        "Return an array ",
        "answer "
      ],
      [
        "stoc",
        "k "
      ],
      [
        "n + 1",
        ")]\r\n"
      ],
      [
        "] indicates that ",
        "there is an edge between nodes "
      ],
      [
        "Ty",
        "pe "
      ],
      [
        "radi",
        "us "
      ],
      [
        "hash ",
        "map "
      ],
      [
        "common",
        "_"
      ],
      [
        "rec",
        "ord"
      ],
      [
        "Calculation",
        "**: For each "
      ],
      [
        "bud",
        "get"
      ],
      [
        "-109 ",
        "<= "
      ],
      [
        "sorted in ascending ",
        "order.\r\n"
      ],
      [
        "transforma",
        "tion"
      ],
      [
        "App",
        "end the "
      ],
      [
        "\", s",
        "2 = \""
      ],
      [
        "Fli",
        "p"
      ],
      [
        "Palindro",
        "me"
      ],
      [
        "ribb",
        "on"
      ],
      [
        "diame",
        "ter "
      ],
      [
        "Dig",
        "it"
      ],
      [
        ".isdigit",
        "():\r\n"
      ],
      [
        "breakdown ",
        "of the approach:\r\n"
      ],
      [
        "More form",
        "ally, "
      ],
      [
        "starti, ",
        "endi"
      ],
      [
        "Mat",
        "ri"
      ],
      [
        "\"",
        "z"
      ],
      [
        "(",
        "since "
      ],
      [
        "(",
        "start, "
      ],
      [
        "0",
        "])\r\n"
      ],
      [
        "1",
        "\", "
      ],
      [
        "1",
        "6\r\n"
      ],
      [
        "2",
        "9"
      ],
      [
        "2",
        "0 "
      ],
      [
        "3",
        "0, "
      ],
      [
        "C",
        "C"
      ],
      [
        "F",
        "re"
      ],
      [
        "M",
        "on"
      ],
      [
        "N",
        "one "
      ],
      [
        "S",
        "plit"
      ],
      [
        "[",
        "1]\r\n"
      ],
      [
        "_",
        "number"
      ],
      [
        "b",
        "ur"
      ],
      [
        "c",
        "itation"
      ],
      [
        "f",
        "older"
      ],
      [
        "i",
        "="
      ],
      [
        "k",
        ": int) -> List[int]:\r\n"
      ],
      [
        "m",
        ".\r\n"
      ],
      [
        "p",
        ", "
      ],
      [
        "s",
        ") and "
      ],
      [
        "t",
        "alle"
      ],
      [
        "        ",
        "operation"
      ],
      [
        "        ",
        "right_"
      ],
      [
        "        ",
        "odd_"
      ],
      [
        "s ",
        "at "
      ],
      [
        "s ",
        "required to "
      ],
      [
        "in",
        "com"
      ],
      [
        "re",
        "ve"
      ],
      [
        "st",
        "ates"
      ],
      [
        "y ",
        "- "
      ],
      [
        "is ",
        "called "
      ],
      [
        "num",
        "1 and "
      ],
      [
        "to ",
        "determine the "
      ],
      [
        "            ",
        "dfs("
      ],
      [
        "            ",
        "next_"
      ],
      [
        "n ",
        "* (n - "
      ],
      [
        ". ",
        "For "
      ],
      [
        "at",
        "_"
      ],
      [
        "at",
        "ing"
      ],
      [
        "] ",
        "> 0:\r\n"
      ],
      [
        "or ",
        "no "
      ],
      [
        "or ",
        "trailing "
      ],
      [
        "- ",
        "[1,"
      ],
      [
        "im",
        "g"
      ],
      [
        "                ",
        "answer"
      ],
      [
        "nums",
        ".length <= 105\r\n"
      ],
      [
        "m ",
        "+ "
      ],
      [
        "10",
        "0 "
      ],
      [
        "10",
        "0, "
      ],
      [
        "10",
        "\"\r\n"
      ],
      [
        "The ",
        "subarray "
      ],
      [
        "The ",
        "final "
      ],
      [
        "that ",
        "contains "
      ],
      [
        "Input: ",
        "x = "
      ],
      [
        "Input: ",
        "target = "
      ],
      [
        "return ",
        "-1.\r\n"
      ],
      [
        "pre",
        "order "
      ],
      [
        "        # ",
        "Jo"
      ],
      [
        "in the ",
        "array.\r\n"
      ],
      [
        "array ",
        "into "
      ],
      [
        "iv",
        "er"
      ],
      [
        "ex",
        "cess "
      ],
      [
        "tim",
        "es the "
      ],
      [
        ". The ",
        "main "
      ],
      [
        "range",
        ".\r\n"
      ],
      [
        "string ",
        "in "
      ],
      [
        "vi",
        "sible "
      ],
      [
        "imp",
        "ort"
      ],
      [
        "You ",
        "want to "
      ],
      [
        "col",
        "s):\r\n"
      ],
      [
        ", and ",
        "each "
      ],
      [
        "ru",
        "les "
      ],
      [
        "is the ",
        "first "
      ],
      [
        "any ",
        "of them.\r\n"
      ],
      [
        "on ",
        "key "
      ],
      [
        "2, ",
        "-1, -1):\r\n"
      ],
      [
        "row",
        "s):\r\n"
      ],
      [
        "**: ",
        "After "
      ],
      [
        "index",
        ")\r\n"
      ],
      [
        "mat",
        "ter "
      ],
      [
        "point",
        "s ("
      ],
      [
        "us",
        "ers "
      ],
      [
        "grid",
        ", "
      ],
      [
        "there ",
        "will be "
      ],
      [
        "+ 1",
        ")"
      ],
      [
        "left ",
        "child "
      ],
      [
        "character",
        "s of "
      ],
      [
        "[i][",
        "0] "
      ],
      [
        "3, ",
        "4, "
      ],
      [
        "binary ",
        "array "
      ],
      [
        "cost ",
        "+= "
      ],
      [
        "1,2,",
        "3]\r\n"
      ],
      [
        "5 ",
        "is "
      ],
      [
        "op",
        "pon"
      ],
      [
        "ear",
        "n "
      ],
      [
        "1 and ",
        "2 "
      ],
      [
        "subarray ",
        "of length "
      ],
      [
        "and the ",
        "maximum "
      ],
      [
        "lin",
        "e.\r\n"
      ],
      [
        "!= ",
        "-1:\r\n"
      ],
      [
        "tri",
        "es to "
      ],
      [
        "Input: s = ",
        "\"a"
      ],
      [
        "Input: s = ",
        "\"abcd"
      ],
      [
        "size ",
        "of "
      ],
      [
        "of a ",
        "node "
      ],
      [
        "at the ",
        "end of the "
      ],
      [
        "group",
        "\r\n"
      ],
      [
        "day",
        "\r\n"
      ],
      [
        "day",
        "s.\r\n"
      ],
      [
        "digit ",
        "= "
      ],
      [
        "`nums",
        "1` "
      ],
      [
        "using ",
        "`"
      ],
      [
        "largest ",
        "element "
      ],
      [
        "es = [",
        "[1,"
      ],
      [
        "rever",
        "se the "
      ],
      [
        "mas",
        "k\r\n"
      ],
      [
        "exactly ",
        "`k` "
      ],
      [
        "2 + ",
        "("
      ],
      [
        "tak",
        "ing the "
      ],
      [
        "inf",
        "ected "
      ],
      [
        "hel",
        "lo"
      ],
      [
        "over",
        "all "
      ],
      [
        "mar",
        "k the "
      ],
      [
        "`, ",
        "`"
      ],
      [
        "conver",
        "sion "
      ],
      [
        "parent",
        "[u"
      ],
      [
        "nums1",
        ")\r\n"
      ],
      [
        "back",
        "log"
      ],
      [
        "trans",
        "formed "
      ],
      [
        "first",
        "\r\n"
      ],
      [
        "Pa",
        "th "
      ],
      [
        "query",
        "\r\n"
      ],
      [
        "pic",
        "ture "
      ],
      [
        "event",
        "u"
      ],
      [
        "'1",
        "':\r\n"
      ],
      [
        "100",
        "].\r\n"
      ],
      [
        "query ",
        "in "
      ],
      [
        "1 <= s",
        ".length <= 100\r\n"
      ],
      [
        "Input: grid = [",
        "["
      ],
      [
        "reverse",
        "d"
      ],
      [
        "strictly ",
        "greater than "
      ],
      [
        "[j] ",
        "+ "
      ],
      [
        "dest",
        "ro"
      ],
      [
        "5],[",
        "2,"
      ],
      [
        "leading ",
        "or trailing "
      ],
      [
        "overl",
        "ap "
      ],
      [
        "].append(",
        "v)\r\n"
      ],
      [
        "Se",
        "le"
      ],
      [
        "duplic",
        "at"
      ],
      [
        "edges",
        ".length == n - 1\r\n"
      ],
      [
        "sy",
        "ste"
      ],
      [
        "sy",
        "mme"
      ],
      [
        "worker",
        "Times"
      ],
      [
        "consisting of ",
        "n "
      ],
      [
        "An ",
        "integer "
      ],
      [
        "children",
        "\r\n"
      ],
      [
        "arri",
        "ve "
      ],
      [
        "            # If ",
        "we "
      ],
      [
        "has the ",
        "same "
      ],
      [
        "Optional[TreeNode",
        "]:\r\n"
      ],
      [
        "blu",
        "e"
      ],
      [
        "people ",
        "who "
      ],
      [
        ". If it ",
        "i"
      ],
      [
        "Fro",
        "m"
      ],
      [
        "Let",
        "ter"
      ],
      [
        "ban",
        "k"
      ],
      [
        "11,",
        "1"
      ],
      [
        "s[i",
        ":"
      ],
      [
        "leav",
        "es "
      ],
      [
        "Initi",
        "al "
      ],
      [
        "at a ",
        "cost of "
      ],
      [
        "BST",
        " "
      ],
      [
        "Python",
        "'s "
      ],
      [
        "mem",
        "ory"
      ],
      [
        "\", k = ",
        "1\r\n"
      ],
      [
        "difference",
        "\r\n"
      ],
      [
        "infin",
        "ity"
      ],
      [
        "Inde",
        "x "
      ],
      [
        "an integer k",
        ", return the "
      ],
      [
        "        dp = [",
        "["
      ],
      [
        "[n",
        "x][ny"
      ],
      [
        ". Then",
        ", "
      ],
      [
        "min-",
        "heap"
      ],
      [
        "her",
        "o"
      ],
      [
        "stack[-1",
        "]"
      ],
      [
        "direct",
        "ory "
      ],
      [
        "merg",
        "ed "
      ],
      [
        "loo",
        "k "
      ],
      [
        "is even",
        ".\r\n"
      ],
      [
        "generate ",
        "all possible "
      ],
      [
        "exceed",
        "s "
      ],
      [
        "                right = ",
        "mid\r\n"
      ],
      [
        ". This approach ensures that ",
        "the "
      ],
      [
        "sorted in non-decreasing ",
        "order.\r\n"
      ],
      [
        "-109 ",
        "<= nums[i] <= 109\r\n"
      ],
      [
        "goal ",
        "is to "
      ],
      [
        "Ed",
        "ge "
      ],
      [
        "        if n == ",
        "1:\r\n"
      ],
      [
        "fold",
        "er "
      ],
      [
        "two-pointer ",
        "technique "
      ],
      [
        "well",
        "-"
      ],
      [
        ".split",
        "('"
      ],
      [
        "vide",
        "o"
      ],
      [
        "gir",
        "l"
      ],
      [
        "sandwi",
        "ch"
      ],
      [
        "        # Process ",
        "each "
      ],
      [
        "bet",
        "ter "
      ],
      [
        "perime",
        "ter "
      ],
      [
        "Produ",
        "ct"
      ],
      [
        "for fre",
        "e.\r\n"
      ],
      [
        "Input: prices ",
        "= ["
      ],
      [
        "Squ",
        "are"
      ],
      [
        "li, ",
        "ri"
      ],
      [
        "adv",
        "an"
      ],
      [
        "'",
        "T"
      ],
      [
        "(",
        "a"
      ],
      [
        "(",
        "s, "
      ],
      [
        "(",
        "max_"
      ],
      [
        "(",
        "4, "
      ],
      [
        ")",
        "\\) "
      ],
      [
        "-",
        "10,"
      ],
      [
        "/",
        "a"
      ],
      [
        "0",
        "-"
      ],
      [
        "1",
        "/"
      ],
      [
        "2",
        "4,"
      ],
      [
        "5",
        ")\r\n"
      ],
      [
        "6",
        "0\r\n"
      ],
      [
        "8",
        " - "
      ],
      [
        "L",
        "eet"
      ],
      [
        "M",
        "od"
      ],
      [
        "R",
        "ect"
      ],
      [
        "S",
        "et "
      ],
      [
        "U",
        "S"
      ],
      [
        "\\",
        "times "
      ],
      [
        "_",
        "len"
      ],
      [
        "_",
        "cost"
      ],
      [
        "b",
        "ad"
      ],
      [
        "c",
        ")\r\n"
      ],
      [
        "e",
        "vi"
      ],
      [
        "e",
        "', '"
      ],
      [
        "h",
        "n"
      ],
      [
        "h",
        "om"
      ],
      [
        "u",
        "i and "
      ],
      [
        "v",
        " = "
      ],
      [
        "x",
        "1, y"
      ],
      [
        "y",
        "el"
      ],
      [
        "t ",
        "and "
      ],
      [
        "ing",
        "Cost"
      ],
      [
        "is ",
        "an "
      ],
      [
        "num",
        "s of size "
      ],
      [
        "ch",
        "ee"
      ],
      [
        "de",
        "l "
      ],
      [
        "to ",
        "their "
      ],
      [
        "ing ",
        "each "
      ],
      [
        ". ",
        "Return the "
      ],
      [
        "di",
        "v"
      ],
      [
        "at ",
        "that "
      ],
      [
        "1 ",
        "are "
      ],
      [
        "                ",
        "last_"
      ],
      [
        "ou",
        "que"
      ],
      [
        "as",
        ":\r\n"
      ],
      [
        "Input: ",
        "word1 = "
      ],
      [
        "return ",
        "false.\r\n"
      ],
      [
        "it ",
        "by "
      ],
      [
        "it ",
        "is not possible to "
      ],
      [
        "        # ",
        "This "
      ],
      [
        "from ",
        "both "
      ],
      [
        "3,",
        "3], "
      ],
      [
        "com",
        "b"
      ],
      [
        "inde",
        "gre"
      ],
      [
        "ad",
        "her"
      ],
      [
        "This ",
        "question "
      ],
      [
        "\",\"",
        "F"
      ],
      [
        "be",
        "y"
      ],
      [
        "star",
        "ti "
      ],
      [
        "to the ",
        "target "
      ],
      [
        "ta",
        "ke"
      ],
      [
        "is the ",
        "total number of "
      ],
      [
        "< ",
        "min_"
      ],
      [
        "< ",
        "0:\r\n"
      ],
      [
        "s = ",
        "("
      ],
      [
        "s = ",
        "1\r\n"
      ],
      [
        "first ",
        "character "
      ],
      [
        "        for ",
        "r in range("
      ],
      [
        "string",
        "s in "
      ],
      [
        "string",
        "s of length "
      ],
      [
        "\", ",
        "t = \""
      ],
      [
        "right",
        ")\r\n"
      ],
      [
        "mov",
        "ing the "
      ],
      [
        "row",
        " is "
      ],
      [
        "current ",
        "node's "
      ],
      [
        "**: ",
        "If the "
      ],
      [
        "start",
        ":"
      ],
      [
        "[1,",
        "4,"
      ],
      [
        "[1,",
        "1,1,"
      ],
      [
        "current",
        ".next\r\n"
      ],
      [
        "point",
        "s. "
      ],
      [
        "count ",
        "is "
      ],
      [
        "count ",
        "of the "
      ],
      [
        "cre",
        "ates "
      ],
      [
        "), ",
        "it "
      ],
      [
        "will ",
        "help "
      ],
      [
        "position",
        " = "
      ],
      [
        "from the ",
        "end "
      ],
      [
        "has ",
        "two "
      ],
      [
        "0 <= ",
        "k "
      ],
      [
        "character",
        "s that "
      ],
      [
        "character",
        "s and "
      ],
      [
        "1] ",
        "* "
      ],
      [
        "                if ",
        "grid[i][j] "
      ],
      [
        "total ",
        "cost of "
      ],
      [
        "right ",
        "subtree "
      ],
      [
        "4 ",
        "("
      ],
      [
        "4 ",
        "-> "
      ],
      [
        "Output: [",
        "3,"
      ],
      [
        "Output: [",
        "1]\r\n"
      ],
      [
        "            for ",
        "neighbor in graph["
      ],
      [
        "cost ",
        "to "
      ],
      [
        "character ",
        "to "
      ],
      [
        "6,",
        "6,"
      ],
      [
        "nums[i] ",
        "== "
      ],
      [
        "Given ",
        "an m x n "
      ],
      [
        "        for i in range(",
        "2, "
      ],
      [
        "comp",
        "are "
      ],
      [
        "roo",
        "k"
      ],
      [
        "on the ",
        "same "
      ],
      [
        "smallest ",
        "element "
      ],
      [
        "   - ",
        "**"
      ],
      [
        "subarray",
        "s that "
      ],
      [
        "subarray",
        "s with "
      ],
      [
        "path ",
        "from the "
      ],
      [
        "sum of ",
        "any "
      ],
      [
        "sum of ",
        "values "
      ],
      [
        "step",
        "ping "
      ],
      [
        "[0] ",
        "- "
      ],
      [
        "[0] ",
        "* (n + 1) for _ in range("
      ],
      [
        "        def ",
        "backtrack("
      ],
      [
        "order ",
        "is "
      ],
      [
        "cell",
        "s ("
      ],
      [
        "substring",
        ".\r\n"
      ],
      [
        "pi",
        "les"
      ],
      [
        "grid ",
        "and "
      ],
      [
        "2] ",
        "is "
      ],
      [
        "bit",
        "_"
      ],
      [
        "substring ",
        "of length "
      ],
      [
        "squ",
        "ir"
      ],
      [
        "ei",
        "ou"
      ],
      [
        "ei",
        "ther"
      ],
      [
        "difference ",
        "of "
      ],
      [
        "Initializ",
        "e the "
      ],
      [
        "9,",
        "9,"
      ],
      [
        "sur",
        "roun"
      ],
      [
        "at least ",
        "k "
      ],
      [
        "0],[",
        "0,1,"
      ],
      [
        "characters ",
        "at "
      ],
      [
        "should ",
        "not "
      ],
      [
        "iterates ",
        "over each "
      ],
      [
        "exist",
        "ing "
      ],
      [
        "at most ",
        "2 "
      ],
      [
        "\\(",
        "\\text{"
      ],
      [
        "3,2,",
        "4,"
      ],
      [
        "mod",
        "\r\n"
      ],
      [
        "[1",
        "].\r\n"
      ],
      [
        "[i + ",
        "1]["
      ],
      [
        "chang",
        "ed "
      ],
      [
        "letter ",
        "in "
      ],
      [
        "mainta",
        "in the "
      ],
      [
        "obta",
        "in a "
      ],
      [
        "sorted",
        "contain"
      ],
      [
        "ip",
        "ul"
      ],
      [
        "(1, ",
        "1) "
      ],
      [
        "smaller ",
        "than the "
      ],
      [
        "Input: nums = [1,2,",
        "3,4]\r\n"
      ],
      [
        "possible",
        "\r\n"
      ],
      [
        "absolute ",
        "difference between the "
      ],
      [
        "i - ",
        "j"
      ],
      [
        "# print(sol.",
        "count"
      ],
      [
        "i <= ",
        "n - 1\r\n"
      ],
      [
        "redu",
        "ce "
      ],
      [
        "elements in the ",
        "array "
      ],
      [
        "Conver",
        "t the "
      ],
      [
        "lam",
        "p "
      ],
      [
        "dp[i][j",
        "]["
      ],
      [
        "This solution uses dynamic programming ",
        "to keep track of the "
      ],
      [
        "        def dfs(",
        "node):\r\n"
      ],
      [
        "        for i, ",
        "num in enumerate("
      ],
      [
        "        for i, ",
        "char in enumerate("
      ],
      [
        "node.right",
        ", "
      ],
      [
        "job",
        " "
      ],
      [
        "one of the ",
        "following "
      ],
      [
        "1111",
        "1111"
      ],
      [
        "leav",
        "ing "
      ],
      [
        "increas",
        "e the "
      ],
      [
        "s[i][",
        "0] "
      ],
      [
        "satisfy the ",
        "condition"
      ],
      [
        "condition ",
        "is "
      ],
      [
        "\", k = ",
        "3\r\n"
      ],
      [
        "), (0, ",
        "1"
      ],
      [
        "[i - 1][",
        "j - "
      ],
      [
        "to make ",
        "it "
      ],
      [
        "in descending ",
        "order\r\n"
      ],
      [
        ") or ",
        "("
      ],
      [
        "among ",
        "all "
      ],
      [
        "winn",
        "er "
      ],
      [
        "On ",
        "day "
      ],
      [
        "explore all possible ",
        "ways to "
      ],
      [
        "A and ",
        "B "
      ],
      [
        "s: List[str]",
        ") -> int:\r\n"
      ],
      [
        "gues",
        "se"
      ],
      [
        "capit",
        "al "
      ],
      [
        "`mid",
        "` "
      ],
      [
        "strictly increas",
        "ing"
      ],
      [
        "strictly increas",
        "ing.\r\n"
      ],
      [
        "gives ",
        "us the "
      ],
      [
        "open",
        "ing "
      ],
      [
        "s(self, nums: List[int], ",
        "k: int) -> int:\r\n"
      ],
      [
        "with n ",
        "nodes "
      ],
      [
        "underlin",
        "ed "
      ],
      [
        "s1 and ",
        "s2 "
      ],
      [
        "paw",
        "n"
      ],
      [
        "Explanation: It is ",
        "impossible to "
      ],
      [
        "scenari",
        "o"
      ],
      [
        "mention",
        "ed "
      ],
      [
        "rati",
        "o "
      ],
      [
        "quad",
        "ru"
      ],
      [
        "Zer",
        "o"
      ],
      [
        "Python code ",
        "implement"
      ],
      [
        "mag",
        "ic "
      ],
      [
        "compati",
        "b"
      ],
      [
        "Fi",
        "bon"
      ],
      [
        "syste",
        "m "
      ],
      [
        "\"",
        ". \r\n"
      ],
      [
        "(",
        "k"
      ],
      [
        "(",
        "node.right)\r\n"
      ],
      [
        "-",
        "5,"
      ],
      [
        "/",
        "b"
      ],
      [
        "3",
        "  "
      ],
      [
        "3",
        ". We "
      ],
      [
        "4",
        "]], "
      ],
      [
        "5",
        "5"
      ],
      [
        "5",
        " = 1"
      ],
      [
        "8",
        "].\r\n"
      ],
      [
        "9",
        " = "
      ],
      [
        "@",
        "m"
      ],
      [
        "B",
        "eca"
      ],
      [
        "B",
        "read"
      ],
      [
        "B",
        "ack"
      ],
      [
        "C",
        "or"
      ],
      [
        "G",
        "roup "
      ],
      [
        "M",
        "E"
      ],
      [
        "S",
        "ome "
      ],
      [
        "W",
        "eigh"
      ],
      [
        "\\",
        "["
      ],
      [
        "\\",
        "t"
      ],
      [
        "^",
        "= "
      ],
      [
        "_",
        "square"
      ],
      [
        "`",
        "min_"
      ],
      [
        "`",
        "SortedList"
      ],
      [
        "b",
        "use"
      ],
      [
        "c",
        "ba"
      ],
      [
        "d",
        "ate"
      ],
      [
        "f",
        "\""
      ],
      [
        "h",
        "op"
      ],
      [
        "k",
        "]"
      ],
      [
        "l",
        "atest "
      ],
      [
        "m",
        ": int, "
      ],
      [
        "n",
        ". "
      ],
      [
        "p",
        "ort"
      ],
      [
        "q",
        ":\r\n"
      ],
      [
        "v",
        "ing "
      ],
      [
        "x",
        "t"
      ],
      [
        "➝",
        " "
      ],
      [
        "        ",
        "col"
      ],
      [
        "        ",
        "count_"
      ],
      [
        "s ",
        "an "
      ],
      [
        "s ",
        "can "
      ],
      [
        "an",
        "s[i] "
      ],
      [
        "= ",
        "sum("
      ],
      [
        "en",
        "se"
      ],
      [
        "en",
        "velo"
      ],
      [
        "re",
        "ci"
      ],
      [
        "le",
        "-"
      ],
      [
        "ro",
        "d"
      ],
      [
        "se",
        "e the "
      ],
      [
        "pl",
        "if"
      ],
      [
        "ing ",
        "them "
      ],
      [
        "ra",
        "in"
      ],
      [
        "and ",
        "return the "
      ],
      [
        "a ",
        "number "
      ],
      [
        "] ",
        "represents the "
      ],
      [
        "<= ",
        "50\r\n"
      ],
      [
        "ma",
        "de"
      ],
      [
        "                ",
        "j += 1\r\n"
      ],
      [
        "nums",
        "\r\n"
      ],
      [
        "po",
        "ison"
      ],
      [
        "m ",
        "+ 1)]\r\n"
      ],
      [
        "10",
        " and "
      ],
      [
        "The ",
        "sum of "
      ],
      [
        "str",
        "ong "
      ],
      [
        "are ",
        "distinct.\r\n"
      ],
      [
        "for ",
        "i, "
      ],
      [
        "that ",
        "appears "
      ],
      [
        "sub",
        "stit"
      ],
      [
        "2 ",
        "\r\n"
      ],
      [
        "com",
        "ment"
      ],
      [
        "sh",
        "op"
      ],
      [
        "1 <= ",
        "arr[i] "
      ],
      [
        "for",
        "t"
      ],
      [
        "with ",
        "their "
      ],
      [
        "to the ",
        "total "
      ],
      [
        "    def ",
        "remove"
      ],
      [
        "        return ",
        "("
      ],
      [
        "        return ",
        "dp[n"
      ],
      [
        "one ",
        "of "
      ],
      [
        "one ",
        "push "
      ],
      [
        ", we ",
        "update the "
      ],
      [
        "2, ",
        "4, "
      ],
      [
        "possible ",
        "way to "
      ],
      [
        "ha",
        "d "
      ],
      [
        "mov",
        "ement "
      ],
      [
        "index",
        "_"
      ],
      [
        "            # ",
        "Option "
      ],
      [
        "[i]",
        ".length == "
      ],
      [
        "position",
        "s of "
      ],
      [
        "elements ",
        "at indices "
      ],
      [
        "0 <= ",
        "grid[i][j] "
      ],
      [
        "pri",
        "or"
      ],
      [
        "left ",
        "subtree "
      ],
      [
        "Input: nums = [",
        "5,"
      ],
      [
        ", the ",
        "first "
      ],
      [
        "sol",
        "di"
      ],
      [
        "with the ",
        "largest "
      ],
      [
        "3, ",
        "5, "
      ],
      [
        "right ",
        "child "
      ],
      [
        "There ",
        "exists "
      ],
      [
        "cost ",
        "= ["
      ],
      [
        "Explanation: The ",
        "figure "
      ],
      [
        "nums[i] ",
        "< "
      ],
      [
        "root",
        ".\r\n"
      ],
      [
        "cor",
        "rid"
      ],
      [
        "smallest ",
        "number "
      ],
      [
        "do",
        "ing "
      ],
      [
        "do",
        "main"
      ],
      [
        "path ",
        "between "
      ],
      [
        "        if ",
        "self."
      ],
      [
        "starting ",
        "point"
      ],
      [
        "score ",
        "of the "
      ],
      [
        "Input: n = ",
        "1, "
      ],
      [
        "grid ",
        "of size "
      ],
      [
        "2] ",
        "+ "
      ],
      [
        "loc",
        "k "
      ],
      [
        "You are given a ",
        "positive integer "
      ],
      [
        "`nums",
        "` and "
      ],
      [
        "OR ",
        "("
      ],
      [
        "add",
        "s the "
      ],
      [
        ", return ",
        "-1\r\n"
      ],
      [
        "high",
        " "
      ],
      [
        "height",
        ", "
      ],
      [
        "determin",
        "ed by the "
      ],
      [
        "2 + ",
        "2 = "
      ],
      [
        "may ",
        "contain "
      ],
      [
        "i = ",
        "0 and "
      ],
      [
        "1 <= nums",
        "1"
      ],
      [
        "1 <= nums",
        "[i], "
      ],
      [
        "consider",
        "ed to be "
      ],
      [
        "fli",
        "ght"
      ],
      [
        "condition",
        "s are "
      ],
      [
        "as the ",
        "result.\r\n"
      ],
      [
        "weigh",
        "t = "
      ],
      [
        "This solution uses a ",
        "breadth-first search (BFS) "
      ],
      [
        "It can be ",
        "shown that the "
      ],
      [
        "resulting ",
        "in "
      ],
      [
        "mon",
        "th "
      ],
      [
        ".\",\".\",\"",
        ".\",\".\",\""
      ],
      [
        "reverse",
        "d_"
      ],
      [
        "close",
        "st"
      ],
      [
        "if it ",
        "exist"
      ],
      [
        "[-1",
        "] "
      ],
      [
        "buil",
        "t "
      ],
      [
        "Ma",
        "in "
      ],
      [
        ", you ",
        "must "
      ],
      [
        "man",
        "ipul"
      ],
      [
        "length = ",
        "1\r\n"
      ],
      [
        "midd",
        "le"
      ],
      [
        "from collections import defaultdict",
        ", "
      ],
      [
        "extra",
        "ct"
      ],
      [
        "palindrome",
        "("
      ],
      [
        "horizont",
        "ally "
      ],
      [
        "edges = [",
        "[0,1,"
      ],
      [
        "children",
        ".\r\n"
      ],
      [
        "set to ",
        "keep track of "
      ],
      [
        "binary represent",
        "ation"
      ],
      [
        "Note",
        ":\r\n"
      ],
      [
        "Output: 2",
        "0\r\n"
      ],
      [
        "check",
        "s the "
      ],
      [
        "count[",
        "num"
      ],
      [
        "You are given a string ",
        "s "
      ],
      [
        "Incre",
        "ase "
      ],
      [
        "Here's the step-by-step ",
        "plan:\r\n"
      ],
      [
        "difference between the ",
        "maximum and minimum "
      ],
      [
        "cha",
        "in "
      ],
      [
        "mem",
        "b"
      ],
      [
        "Note: ",
        "This question "
      ],
      [
        "under",
        " the "
      ],
      [
        "Binary ",
        "search "
      ],
      [
        "thresh",
        "old "
      ],
      [
        "Return true if ",
        "it is possible to "
      ],
      [
        "cri",
        "tical "
      ],
      [
        "r, ",
        "n"
      ],
      [
        "distance between ",
        "two "
      ],
      [
        "`left",
        "` and `"
      ],
      [
        "dumm",
        "y"
      ],
      [
        "s(self, n",
        ": int) -> int:\r\n"
      ],
      [
        "compar",
        "ing the "
      ],
      [
        "modif",
        "y "
      ],
      [
        ". Therefore",
        ", "
      ],
      [
        "You may ",
        "assum"
      ],
      [
        "batter",
        "y "
      ],
      [
        "            if i ",
        ">= "
      ],
      [
        "simultane",
        "ously "
      ],
      [
        "here ",
        "is "
      ],
      [
        "variable",
        "s to "
      ],
      [
        "equivalent ",
        "to "
      ],
      [
        ".count",
        "('"
      ],
      [
        "gc",
        "d "
      ],
      [
        "tr",
        "ying "
      ],
      [
        "Input: point",
        "s = [[1,"
      ],
      [
        "aroun",
        "d "
      ],
      [
        "nat",
        "ur"
      ],
      [
        "ai and ",
        "b"
      ],
      [
        "bisect_right",
        "("
      ],
      [
        "%= ",
        "MOD\r\n"
      ],
      [
        "            for j in range(i + 1, ",
        "n):\r\n"
      ],
      [
        "threshol",
        "d = "
      ],
      [
        "        count = ",
        "Counter("
      ],
      [
        "To solve this problem, we can use ",
        "dynamic programming "
      ],
      [
        "instea",
        "d.\r\n"
      ],
      [
        "difficul",
        "ty "
      ],
      [
        "Subtra",
        "ct "
      ],
      [
        "boole",
        "an "
      ],
      [
        "Dur",
        "ing the "
      ],
      [
        "Vi",
        "sit"
      ],
      [
        "Suffi",
        "x"
      ],
      [
        "Can ",
        "you "
      ],
      [
        "in Python",
        ":\r\n"
      ],
      [
        "symb",
        "ol"
      ],
      [
        "        for word in word",
        "s:\r\n"
      ],
      [
        "Mod",
        "ulo "
      ],
      [
        "@m",
        ".co"
      ],
      [
        "Note: This question ",
        "is the same "
      ],
      [
        "\"",
        "."
      ],
      [
        "\"",
        ". The "
      ],
      [
        "(",
        "not "
      ],
      [
        ",",
        "(2,"
      ],
      [
        "-",
        "length "
      ],
      [
        "1",
        "3, "
      ],
      [
        "2",
        "0, "
      ],
      [
        "4",
        "."
      ],
      [
        "4",
        "), ("
      ],
      [
        "5",
        "]], "
      ],
      [
        "7",
        "6"
      ],
      [
        "7",
        " - "
      ],
      [
        "?",
        "?"
      ],
      [
        "H",
        "e "
      ],
      [
        "I",
        "S"
      ],
      [
        "M",
        "ul"
      ],
      [
        "X",
        "X"
      ],
      [
        "[",
        "current_"
      ],
      [
        "_",
        "min"
      ],
      [
        "_",
        "set"
      ],
      [
        "_",
        "time"
      ],
      [
        "`",
        "result"
      ],
      [
        "a",
        "tive"
      ],
      [
        "d",
        "\"\r\n"
      ],
      [
        "g",
        "row"
      ],
      [
        "i",
        "+"
      ],
      [
        "n",
        "-1 "
      ],
      [
        "p",
        "\",\""
      ],
      [
        "r",
        "ing"
      ],
      [
        "t",
        "les "
      ],
      [
        "x",
        ": int, "
      ],
      [
        "y",
        "("
      ],
      [
        "y",
        "\",\""
      ],
      [
        "|",
        "= "
      ],
      [
        "  ",
        "\r\n"
      ],
      [
        "th",
        "ough "
      ],
      [
        "        ",
        "char"
      ],
      [
        "        ",
        "prefix_"
      ],
      [
        "        ",
        "from collections import defaultdict\r\n"
      ],
      [
        "        ",
        "m = "
      ],
      [
        "t ",
        "in "
      ],
      [
        "on",
        "e\r\n"
      ],
      [
        "en",
        "ever "
      ],
      [
        "re",
        "vi"
      ],
      [
        "st",
        "ay "
      ],
      [
        "is ",
        "divisible by "
      ],
      [
        "to ",
        "represent the "
      ],
      [
        "and ",
        "return "
      ],
      [
        ". ",
        "Your "
      ],
      [
        "or ",
        "("
      ],
      [
        "si",
        "tion "
      ],
      [
        "su",
        "ffici"
      ],
      [
        ") ",
        "is the "
      ],
      [
        ") ",
        "else -1\r\n"
      ],
      [
        "[i",
        "dx"
      ],
      [
        "nums",
        "[0.."
      ],
      [
        "po",
        "int the "
      ],
      [
        "m ",
        "- 1"
      ],
      [
        "1,",
        "2], "
      ],
      [
        "str",
        "1"
      ],
      [
        "fi",
        "f"
      ],
      [
        "= [",
        "False] "
      ],
      [
        "x ",
        "in range("
      ],
      [
        "0,",
        "3,"
      ],
      [
        "        # ",
        "Defin"
      ],
      [
        "        # ",
        "Generate "
      ],
      [
        "in the ",
        "array"
      ],
      [
        "in the ",
        "second "
      ],
      [
        "from ",
        "\""
      ],
      [
        "each ",
        "node "
      ],
      [
        "number of ",
        "times "
      ],
      [
        "0 ",
        "for "
      ],
      [
        "[i] ",
        "<= 1000\r\n"
      ],
      [
        "3,",
        "0,"
      ],
      [
        "ex",
        "ces"
      ],
      [
        "with ",
        "0 "
      ],
      [
        "s = [",
        "2,"
      ],
      [
        "node",
        "s and "
      ],
      [
        "node",
        "s in "
      ],
      [
        "ad",
        "dition "
      ],
      [
        "fin",
        "al"
      ],
      [
        "s, ",
        "each "
      ],
      [
        "range",
        "\r\n"
      ],
      [
        "Re",
        "place the "
      ],
      [
        "vi",
        "ol"
      ],
      [
        "    def ",
        "smallest"
      ],
      [
        "il",
        "l the "
      ],
      [
        "array",
        ". "
      ],
      [
        "element",
        "s. "
      ],
      [
        "4,",
        "8,"
      ],
      [
        "len(",
        "queue"
      ],
      [
        "[0",
        "].\r\n"
      ],
      [
        ", we ",
        "check "
      ],
      [
        ", we ",
        "need "
      ],
      [
        "            if ",
        "i == "
      ],
      [
        "\", ",
        "t = "
      ],
      [
        "tre",
        "es"
      ],
      [
        "ic",
        "ally "
      ],
      [
        "mov",
        "ed "
      ],
      [
        "current ",
        "window "
      ],
      [
        "current ",
        "window"
      ],
      [
        "            # ",
        "The "
      ],
      [
        "s[",
        "index"
      ],
      [
        "s[",
        "1] = "
      ],
      [
        "nums[",
        ":"
      ],
      [
        "grid",
        ")\r\n"
      ],
      [
        "from the ",
        "original "
      ],
      [
        "has ",
        "exactly "
      ],
      [
        "have ",
        "an "
      ],
      [
        "left ",
        "or "
      ],
      [
        "gre",
        "en"
      ],
      [
        "follow",
        "ing the "
      ],
      [
        "            for ",
        "num in "
      ],
      [
        "cost ",
        "= 0\r\n"
      ],
      [
        "Explanation: The ",
        "following "
      ],
      [
        "target",
        ")\r\n"
      ],
      [
        "set",
        "s of "
      ],
      [
        "digit",
        "s of "
      ],
      [
        "step",
        "s to "
      ],
      [
        "St",
        "ep"
      ],
      [
        "starting ",
        "with "
      ],
      [
        "ser",
        "i"
      ],
      [
        "substring",
        "s\r\n"
      ],
      [
        "substring",
        "s that "
      ],
      [
        "prefix",
        "es "
      ],
      [
        "                return ",
        "-1\r\n"
      ],
      [
        "av",
        "g"
      ],
      [
        "**: We ",
        "first "
      ],
      [
        "more ",
        "efficient "
      ],
      [
        "`nums",
        "`, "
      ],
      [
        "1 + ",
        "2 = "
      ],
      [
        "in a ",
        "single "
      ],
      [
        "node.",
        "val)\r\n"
      ],
      [
        "', ",
        "or "
      ],
      [
        "Alice ",
        "has "
      ],
      [
        "spac",
        "es"
      ],
      [
        "bi",
        "k"
      ],
      [
        "0],[",
        "1,0,"
      ],
      [
        "reach",
        "ed "
      ],
      [
        "occurr",
        "ences"
      ],
      [
        "ari",
        "es "
      ],
      [
        "lowercase English letter",
        "s "
      ],
      [
        "row ",
        "of "
      ],
      [
        "mar",
        "b"
      ],
      [
        "replac",
        "ement "
      ],
      [
        "even ",
        "indices "
      ],
      [
        "consists of ",
        "only "
      ],
      [
        "does not ",
        "exceed "
      ],
      [
        "`i",
        "`"
      ],
      [
        "hand",
        "led "
      ],
      [
        "direction",
        ".\r\n"
      ],
      [
        "complet",
        "ely "
      ],
      [
        "edge ",
        "between "
      ],
      [
        "board",
        "[r][c"
      ],
      [
        "problem ",
        "statement"
      ],
      [
        "conver",
        "ting "
      ],
      [
        "[j",
        "], "
      ],
      [
        ": int) -> ",
        "List[List[int]]:\r\n"
      ],
      [
        "letter ",
        "in the "
      ],
      [
        "remove ",
        "all "
      ],
      [
        "dictionary ",
        "to keep track of the "
      ],
      [
        "resulting ",
        "string "
      ],
      [
        "resulting ",
        "array is "
      ],
      [
        "            while ",
        "stack and "
      ],
      [
        "2 and ",
        "3 "
      ],
      [
        "count the ",
        "frequency of each "
      ],
      [
        "square",
        ".\r\n"
      ],
      [
        "sk",
        "y"
      ],
      [
        "log",
        "arith"
      ],
      [
        "True",
        ":\r\n"
      ],
      [
        "column",
        "s "
      ],
      [
        "level",
        "\r\n"
      ],
      [
        "iterate ",
        "over each "
      ],
      [
        "        # Calculate the ",
        "number of "
      ],
      [
        "                for ",
        "i in range("
      ],
      [
        "split ",
        "into "
      ],
      [
        "efficient ",
        "given the constraints.\r\n"
      ],
      [
        "absolute ",
        "difference between "
      ],
      [
        "that can be ",
        "derived from "
      ],
      [
        "lea",
        "ve "
      ],
      [
        "push",
        "es "
      ],
      [
        "Per",
        "mutation"
      ],
      [
        "cc",
        "c"
      ],
      [
        "map",
        "("
      ],
      [
        "        # Cre",
        "ate "
      ],
      [
        "        # If ",
        "no "
      ],
      [
        "Valu",
        "e "
      ],
      [
        "lexicographically ",
        "largest "
      ],
      [
        "(i, j",
        ") "
      ],
      [
        "expl",
        "ore"
      ],
      [
        "\" -> ",
        "one push "
      ],
      [
        "lay",
        "er"
      ],
      [
        "show",
        "s "
      ],
      [
        "size",
        "):\r\n"
      ],
      [
        "help",
        "s "
      ],
      [
        "Dist",
        "in"
      ],
      [
        "Given a string ",
        "s, return the "
      ],
      [
        ". In ",
        "other words, "
      ],
      [
        "convert",
        "ed to "
      ],
      [
        "Tw",
        "o"
      ],
      [
        "dp(",
        "i + 1, "
      ],
      [
        "        # Di",
        "re"
      ],
      [
        "Time ",
        "= ["
      ],
      [
        "rearrang",
        "e the "
      ],
      [
        " = [0] ",
        "* n\r\n"
      ],
      [
        "modu",
        "lo"
      ],
      [
        "sorting ",
        "step"
      ],
      [
        "there",
        "'s "
      ],
      [
        "sen",
        "sor"
      ],
      [
        "know",
        " the "
      ],
      [
        "s(self, s: str",
        ", "
      ],
      [
        ". The key ",
        "idea is to "
      ],
      [
        "maz",
        "e "
      ],
      [
        "minimum number of operations ",
        "required to "
      ],
      [
        "As",
        "sum"
      ],
      [
        "**: This ",
        "function "
      ],
      [
        "proj",
        "ect "
      ],
      [
        "        return ''.join(",
        "result)\r\n"
      ],
      [
        "Here is the implementation of the ",
        "above approach:\r\n"
      ],
      [
        "'*",
        "' "
      ],
      [
        "too ",
        "large, return it modulo 109 + 7.\r\n"
      ],
      [
        "identif",
        "y "
      ],
      [
        "(possibly ",
        "none"
      ],
      [
        "deleting some ",
        "or no "
      ],
      [
        "cop",
        "y "
      ],
      [
        "Integ",
        "er"
      ],
      [
        "bf",
        "s("
      ],
      [
        "0 degre",
        "es "
      ],
      [
        "Depth-First Search (DFS",
        ") to "
      ],
      [
        "Sk",
        "ip"
      ],
      [
        "char_count[",
        "char"
      ],
      [
        "langu",
        "age"
      ],
      [
        "        for u, v in ",
        "edges:\r\n"
      ],
      [
        "reduces ",
        "the "
      ],
      [
        "forbid",
        "den"
      ],
      [
        "The test cases are ",
        "generated "
      ],
      [
        "vice ",
        "versa"
      ],
      [
        "Fre",
        "quen"
      ],
      [
        "Bread",
        "th-First Search "
      ],
      [
        "Mul",
        "ti"
      ],
      [
        "\" -> one push ",
        "on key "
      ],
      [
        "(",
        "in "
      ],
      [
        "(",
        "word"
      ],
      [
        "0",
        ") = "
      ],
      [
        "1",
        "6 "
      ],
      [
        "2",
        "/"
      ],
      [
        "2",
        "])\r\n"
      ],
      [
        "2",
        "`.\r\n"
      ],
      [
        "5",
        "9"
      ],
      [
        "5",
        ") = "
      ],
      [
        "8",
        " and "
      ],
      [
        "A",
        "t"
      ],
      [
        "A",
        "SC"
      ],
      [
        "D",
        "u"
      ],
      [
        "H",
        "am"
      ],
      [
        "N",
        "or"
      ],
      [
        "R",
        "ange"
      ],
      [
        "W",
        "E"
      ],
      [
        "W",
        "ay"
      ],
      [
        "[",
        "10,"
      ],
      [
        "[",
        "4], "
      ],
      [
        "\\",
        "]\r\n"
      ],
      [
        "_",
        "distance"
      ],
      [
        "`",
        ". It "
      ],
      [
        "b",
        "it is "
      ],
      [
        "c",
        "am"
      ],
      [
        "d",
        "ot"
      ],
      [
        "d",
        "rin"
      ],
      [
        "e",
        "o"
      ],
      [
        "f",
        "oc"
      ],
      [
        "g",
        "as "
      ],
      [
        "h",
        " "
      ],
      [
        "i",
        "di"
      ],
      [
        "k",
        "now "
      ],
      [
        "l",
        "ing "
      ],
      [
        "l",
        "ad"
      ],
      [
        "m",
        "u"
      ],
      [
        "m",
        ":\r\n"
      ],
      [
        "m",
        "ic "
      ],
      [
        "n",
        ") if "
      ],
      [
        "o",
        "ffer"
      ],
      [
        "p",
        "t "
      ],
      [
        "r",
        "ing "
      ]
    ]
  }
}